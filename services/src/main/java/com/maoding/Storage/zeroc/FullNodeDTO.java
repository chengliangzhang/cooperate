// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `StorageData.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.Storage.zeroc;

public class FullNodeDTO implements java.lang.Cloneable,
                                    java.io.Serializable
{
    public SimpleNodeDTO basic;

    public SimpleNodeDTO getBasic()
    {
        return basic;
    }

    public void setBasic(SimpleNodeDTO basic)
    {
        this.basic = basic;
    }

    public String issuePath;

    public String getIssuePath()
    {
        return issuePath;
    }

    public void setIssuePath(String issuePath)
    {
        this.issuePath = issuePath;
    }

    public String taskPath;

    public String getTaskPath()
    {
        return taskPath;
    }

    public void setTaskPath(String taskPath)
    {
        this.taskPath = taskPath;
    }

    public FullNodeDTO()
    {
        this.basic = new SimpleNodeDTO();
        this.issuePath = "";
        this.taskPath = "";
    }

    public FullNodeDTO(SimpleNodeDTO basic, String issuePath, String taskPath)
    {
        this.basic = basic;
        this.issuePath = issuePath;
        this.taskPath = taskPath;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        FullNodeDTO r = null;
        if(rhs instanceof FullNodeDTO)
        {
            r = (FullNodeDTO)rhs;
        }

        if(r != null)
        {
            if(this.basic != r.basic)
            {
                if(this.basic == null || r.basic == null || !this.basic.equals(r.basic))
                {
                    return false;
                }
            }
            if(this.issuePath != r.issuePath)
            {
                if(this.issuePath == null || r.issuePath == null || !this.issuePath.equals(r.issuePath))
                {
                    return false;
                }
            }
            if(this.taskPath != r.taskPath)
            {
                if(this.taskPath == null || r.taskPath == null || !this.taskPath.equals(r.taskPath))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::zeroc::FullNodeDTO");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, basic);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, issuePath);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, taskPath);
        return h_;
    }

    public FullNodeDTO clone()
    {
        FullNodeDTO c = null;
        try
        {
            c = (FullNodeDTO)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        SimpleNodeDTO.ice_write(ostr, this.basic);
        ostr.writeString(this.issuePath);
        ostr.writeString(this.taskPath);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.basic = SimpleNodeDTO.ice_read(istr);
        this.issuePath = istr.readString();
        this.taskPath = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, FullNodeDTO v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public FullNodeDTO ice_read(com.zeroc.Ice.InputStream istr)
    {
        FullNodeDTO v = new FullNodeDTO();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<FullNodeDTO> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, FullNodeDTO v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<FullNodeDTO> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(FullNodeDTO.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final FullNodeDTO _nullMarshalValue = new FullNodeDTO();

    public static final long serialVersionUID = 2127503727L;
}
