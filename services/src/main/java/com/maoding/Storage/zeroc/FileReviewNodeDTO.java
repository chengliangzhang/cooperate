// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Storage.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.Storage.zeroc;

public class FileReviewNodeDTO implements java.lang.Cloneable,
                                          java.io.Serializable
{
    public String id;

    public String fileId;

    public String dutyId;

    public String dutyName;

    public short actionId;

    public String actionName;

    public long actionTimeStamp;

    public String actionTimeText;

    public FileReviewNodeDTO()
    {
        this.id = "";
        this.fileId = "";
        this.dutyId = "";
        this.dutyName = "";
        this.actionName = "";
        this.actionTimeText = "";
    }

    public FileReviewNodeDTO(String id, String fileId, String dutyId, String dutyName, short actionId, String actionName, long actionTimeStamp, String actionTimeText)
    {
        this.id = id;
        this.fileId = fileId;
        this.dutyId = dutyId;
        this.dutyName = dutyName;
        this.actionId = actionId;
        this.actionName = actionName;
        this.actionTimeStamp = actionTimeStamp;
        this.actionTimeText = actionTimeText;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        FileReviewNodeDTO r = null;
        if(rhs instanceof FileReviewNodeDTO)
        {
            r = (FileReviewNodeDTO)rhs;
        }

        if(r != null)
        {
            if(this.id != r.id)
            {
                if(this.id == null || r.id == null || !this.id.equals(r.id))
                {
                    return false;
                }
            }
            if(this.fileId != r.fileId)
            {
                if(this.fileId == null || r.fileId == null || !this.fileId.equals(r.fileId))
                {
                    return false;
                }
            }
            if(this.dutyId != r.dutyId)
            {
                if(this.dutyId == null || r.dutyId == null || !this.dutyId.equals(r.dutyId))
                {
                    return false;
                }
            }
            if(this.dutyName != r.dutyName)
            {
                if(this.dutyName == null || r.dutyName == null || !this.dutyName.equals(r.dutyName))
                {
                    return false;
                }
            }
            if(this.actionId != r.actionId)
            {
                return false;
            }
            if(this.actionName != r.actionName)
            {
                if(this.actionName == null || r.actionName == null || !this.actionName.equals(r.actionName))
                {
                    return false;
                }
            }
            if(this.actionTimeStamp != r.actionTimeStamp)
            {
                return false;
            }
            if(this.actionTimeText != r.actionTimeText)
            {
                if(this.actionTimeText == null || r.actionTimeText == null || !this.actionTimeText.equals(r.actionTimeText))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::zeroc::FileReviewNodeDTO");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, id);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, dutyId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, dutyName);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, actionId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, actionName);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, actionTimeStamp);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, actionTimeText);
        return h_;
    }

    public FileReviewNodeDTO clone()
    {
        FileReviewNodeDTO c = null;
        try
        {
            c = (FileReviewNodeDTO)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.id);
        ostr.writeString(this.fileId);
        ostr.writeString(this.dutyId);
        ostr.writeString(this.dutyName);
        ostr.writeShort(this.actionId);
        ostr.writeString(this.actionName);
        ostr.writeLong(this.actionTimeStamp);
        ostr.writeString(this.actionTimeText);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.id = istr.readString();
        this.fileId = istr.readString();
        this.dutyId = istr.readString();
        this.dutyName = istr.readString();
        this.actionId = istr.readShort();
        this.actionName = istr.readString();
        this.actionTimeStamp = istr.readLong();
        this.actionTimeText = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, FileReviewNodeDTO v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public FileReviewNodeDTO ice_read(com.zeroc.Ice.InputStream istr)
    {
        FileReviewNodeDTO v = new FileReviewNodeDTO();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<FileReviewNodeDTO> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, FileReviewNodeDTO v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<FileReviewNodeDTO> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(FileReviewNodeDTO.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final FileReviewNodeDTO _nullMarshalValue = new FileReviewNodeDTO();

    public static final long serialVersionUID = -349988375L;
}
