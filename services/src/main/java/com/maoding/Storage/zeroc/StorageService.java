// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Storage.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.Storage.zeroc;

public interface StorageService extends com.zeroc.Ice.Object
{
    EmbedElementDTO createEmbedElement(UpdateElementDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.Common.zeroc.CustomException;

    AnnotateDTO createAnnotate(UpdateAnnotateDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.Common.zeroc.CustomException;

    NodeFileDTO createNodeFile(UpdateNodeFileDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.Common.zeroc.CustomException;

    SuggestionDTO createSuggestion(UpdateSuggestionDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.Common.zeroc.CustomException;

    NodeFileDTO updateNodeFile(NodeFileDTO src, UpdateNodeFileDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.Common.zeroc.CustomException;

    java.util.List<NodeFileDTO> listNodeFile(QueryNodeFileDTO query, com.zeroc.Ice.Current current)
        throws com.maoding.Common.zeroc.CustomException;

    long summaryNodeLength(QuerySummaryDTO query, com.zeroc.Ice.Current current)
        throws com.maoding.Common.zeroc.CustomException;

    void deleteNodeById(com.maoding.User.zeroc.AccountDTO account, String id, com.zeroc.Ice.Current current)
        throws com.maoding.Common.zeroc.CustomException;

    void deleteNodeByIdList(com.maoding.User.zeroc.AccountDTO account, java.util.List<java.lang.String> idList, com.zeroc.Ice.Current current)
        throws com.maoding.Common.zeroc.CustomException;

    void deleteNode(com.maoding.User.zeroc.AccountDTO account, SimpleNodeDTO node, com.zeroc.Ice.Current current)
        throws com.maoding.Common.zeroc.CustomException;

    void deleteNodeList(com.maoding.User.zeroc.AccountDTO account, java.util.List<SimpleNodeDTO> node, com.zeroc.Ice.Current current)
        throws com.maoding.Common.zeroc.CustomException;

    SimpleNodeDTO createNode(SimpleNodeDTO parent, UpdateNodeDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.Common.zeroc.CustomException;

    SimpleNodeDTO createNodeWithRequestOnly(UpdateNodeDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.Common.zeroc.CustomException;

    SimpleNodeDTO updateNodeSimple(SimpleNodeDTO src, UpdateNodeDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.Common.zeroc.CustomException;

    /**
     * @param current The Current object for the invocation.
     * @deprecated 使用createNodeFile代替
     **/
    @Deprecated
    FullNodeDTO createMirror(FullNodeDTO src, UpdateNodeDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.Common.zeroc.CustomException;

    java.util.List<SimpleNodeDTO> listNode(QueryNodeDTO query, com.zeroc.Ice.Current current)
        throws com.maoding.Common.zeroc.CustomException;

    java.util.List<SimpleNodeDTO> listChild(SimpleNodeDTO parent, com.zeroc.Ice.Current current)
        throws com.maoding.Common.zeroc.CustomException;

    java.util.List<SimpleNodeDTO> listChildren(SimpleNodeDTO parent, com.zeroc.Ice.Current current)
        throws com.maoding.Common.zeroc.CustomException;

    java.util.List<SimpleNodeDTO> listRoot(String accountId, com.zeroc.Ice.Current current)
        throws com.maoding.Common.zeroc.CustomException;

    SimpleNodeDTO getNodeById(java.lang.String id, com.zeroc.Ice.Current current)
        throws com.maoding.Common.zeroc.CustomException;

    SimpleNodeDTO getNodeByPath(java.lang.String path, com.zeroc.Ice.Current current)
        throws com.maoding.Common.zeroc.CustomException;

    SimpleNodeDTO getNodeByFuzzyPath(java.lang.String fuzzyPath, com.zeroc.Ice.Current current)
        throws com.maoding.Common.zeroc.CustomException;

    java.util.List<SimpleNodeDTO> listOldNode(QueryNodeDTO query, com.zeroc.Ice.Current current)
        throws com.maoding.Common.zeroc.CustomException;

    FullNodeDTO getNodeInfo(SimpleNodeDTO node, QueryNodeInfoDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.Common.zeroc.CustomException;

    SimpleNodeDTO updateNode(SimpleNodeDTO src, SimpleNodeDTO parent, UpdateNodeDTO request, com.zeroc.Ice.Current current)
        throws com.maoding.Common.zeroc.CustomException;

    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::zeroc::StorageService"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::zeroc::StorageService";
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_createEmbedElement(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        UpdateElementDTO iceP_request;
        iceP_request = UpdateElementDTO.ice_read(istr);
        inS.endReadParams();
        EmbedElementDTO ret = obj.createEmbedElement(iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        EmbedElementDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_createAnnotate(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        UpdateAnnotateDTO iceP_request;
        iceP_request = UpdateAnnotateDTO.ice_read(istr);
        inS.endReadParams();
        AnnotateDTO ret = obj.createAnnotate(iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        AnnotateDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_createNodeFile(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        UpdateNodeFileDTO iceP_request;
        iceP_request = UpdateNodeFileDTO.ice_read(istr);
        inS.endReadParams();
        NodeFileDTO ret = obj.createNodeFile(iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        NodeFileDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_createSuggestion(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        UpdateSuggestionDTO iceP_request;
        iceP_request = UpdateSuggestionDTO.ice_read(istr);
        inS.endReadParams();
        SuggestionDTO ret = obj.createSuggestion(iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SuggestionDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_updateNodeFile(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        NodeFileDTO iceP_src;
        UpdateNodeFileDTO iceP_request;
        iceP_src = NodeFileDTO.ice_read(istr);
        iceP_request = UpdateNodeFileDTO.ice_read(istr);
        inS.endReadParams();
        NodeFileDTO ret = obj.updateNodeFile(iceP_src, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        NodeFileDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listNodeFile(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        QueryNodeFileDTO iceP_query;
        iceP_query = QueryNodeFileDTO.ice_read(istr);
        inS.endReadParams();
        java.util.List<NodeFileDTO> ret = obj.listNodeFile(iceP_query, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        NodeFileListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_summaryNodeLength(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        QuerySummaryDTO iceP_query;
        iceP_query = QuerySummaryDTO.ice_read(istr);
        inS.endReadParams();
        long ret = obj.summaryNodeLength(iceP_query, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeLong(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_deleteNodeById(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.User.zeroc.AccountDTO iceP_account;
        String iceP_id;
        iceP_account = com.maoding.User.zeroc.AccountDTO.ice_read(istr);
        iceP_id = istr.readString();
        inS.endReadParams();
        obj.deleteNodeById(iceP_account, iceP_id, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_deleteNodeByIdList(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.User.zeroc.AccountDTO iceP_account;
        java.util.List<java.lang.String> iceP_idList;
        iceP_account = com.maoding.User.zeroc.AccountDTO.ice_read(istr);
        iceP_idList = com.maoding.Common.zeroc.StringListHelper.read(istr);
        inS.endReadParams();
        obj.deleteNodeByIdList(iceP_account, iceP_idList, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_deleteNode(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.User.zeroc.AccountDTO iceP_account;
        SimpleNodeDTO iceP_node;
        iceP_account = com.maoding.User.zeroc.AccountDTO.ice_read(istr);
        iceP_node = SimpleNodeDTO.ice_read(istr);
        inS.endReadParams();
        obj.deleteNode(iceP_account, iceP_node, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_deleteNodeList(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.User.zeroc.AccountDTO iceP_account;
        java.util.List<SimpleNodeDTO> iceP_node;
        iceP_account = com.maoding.User.zeroc.AccountDTO.ice_read(istr);
        iceP_node = SimpleNodeListHelper.read(istr);
        inS.endReadParams();
        obj.deleteNodeList(iceP_account, iceP_node, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_createNode(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        SimpleNodeDTO iceP_parent;
        UpdateNodeDTO iceP_request;
        iceP_parent = SimpleNodeDTO.ice_read(istr);
        iceP_request = UpdateNodeDTO.ice_read(istr);
        inS.endReadParams();
        SimpleNodeDTO ret = obj.createNode(iceP_parent, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_createNodeWithRequestOnly(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        UpdateNodeDTO iceP_request;
        iceP_request = UpdateNodeDTO.ice_read(istr);
        inS.endReadParams();
        SimpleNodeDTO ret = obj.createNodeWithRequestOnly(iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_updateNodeSimple(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        SimpleNodeDTO iceP_src;
        UpdateNodeDTO iceP_request;
        iceP_src = SimpleNodeDTO.ice_read(istr);
        iceP_request = UpdateNodeDTO.ice_read(istr);
        inS.endReadParams();
        SimpleNodeDTO ret = obj.updateNodeSimple(iceP_src, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    @Deprecated
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_createMirror(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        FullNodeDTO iceP_src;
        UpdateNodeDTO iceP_request;
        iceP_src = FullNodeDTO.ice_read(istr);
        iceP_request = UpdateNodeDTO.ice_read(istr);
        inS.endReadParams();
        FullNodeDTO ret = obj.createMirror(iceP_src, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        FullNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listNode(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        QueryNodeDTO iceP_query;
        iceP_query = QueryNodeDTO.ice_read(istr);
        inS.endReadParams();
        java.util.List<SimpleNodeDTO> ret = obj.listNode(iceP_query, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SimpleNodeListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listChild(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        SimpleNodeDTO iceP_parent;
        iceP_parent = SimpleNodeDTO.ice_read(istr);
        inS.endReadParams();
        java.util.List<SimpleNodeDTO> ret = obj.listChild(iceP_parent, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SimpleNodeListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listChildren(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        SimpleNodeDTO iceP_parent;
        iceP_parent = SimpleNodeDTO.ice_read(istr);
        inS.endReadParams();
        java.util.List<SimpleNodeDTO> ret = obj.listChildren(iceP_parent, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SimpleNodeListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listRoot(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_accountId;
        iceP_accountId = istr.readString();
        inS.endReadParams();
        java.util.List<SimpleNodeDTO> ret = obj.listRoot(iceP_accountId, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SimpleNodeListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getNodeById(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.lang.String iceP_id;
        iceP_id = istr.readSerializable(java.lang.String.class);
        inS.endReadParams();
        SimpleNodeDTO ret = obj.getNodeById(iceP_id, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getNodeByPath(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.lang.String iceP_path;
        iceP_path = istr.readSerializable(java.lang.String.class);
        inS.endReadParams();
        SimpleNodeDTO ret = obj.getNodeByPath(iceP_path, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getNodeByFuzzyPath(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.lang.String iceP_fuzzyPath;
        iceP_fuzzyPath = istr.readSerializable(java.lang.String.class);
        inS.endReadParams();
        SimpleNodeDTO ret = obj.getNodeByFuzzyPath(iceP_fuzzyPath, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listOldNode(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        QueryNodeDTO iceP_query;
        iceP_query = QueryNodeDTO.ice_read(istr);
        inS.endReadParams();
        java.util.List<SimpleNodeDTO> ret = obj.listOldNode(iceP_query, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SimpleNodeListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getNodeInfo(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        SimpleNodeDTO iceP_node;
        QueryNodeInfoDTO iceP_request;
        iceP_node = SimpleNodeDTO.ice_read(istr);
        iceP_request = QueryNodeInfoDTO.ice_read(istr);
        inS.endReadParams();
        FullNodeDTO ret = obj.getNodeInfo(iceP_node, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        FullNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_updateNode(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        SimpleNodeDTO iceP_src;
        SimpleNodeDTO iceP_parent;
        UpdateNodeDTO iceP_request;
        iceP_src = SimpleNodeDTO.ice_read(istr);
        iceP_parent = SimpleNodeDTO.ice_read(istr);
        iceP_request = UpdateNodeDTO.ice_read(istr);
        inS.endReadParams();
        SimpleNodeDTO ret = obj.updateNode(iceP_src, iceP_parent, iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    final static String[] _iceOps =
    {
        "createAnnotate",
        "createEmbedElement",
        "createMirror",
        "createNode",
        "createNodeFile",
        "createNodeWithRequestOnly",
        "createSuggestion",
        "deleteNode",
        "deleteNodeById",
        "deleteNodeByIdList",
        "deleteNodeList",
        "getNodeByFuzzyPath",
        "getNodeById",
        "getNodeByPath",
        "getNodeInfo",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "listChild",
        "listChildren",
        "listNode",
        "listNodeFile",
        "listOldNode",
        "listRoot",
        "summaryNodeLength",
        "updateNode",
        "updateNodeFile",
        "updateNodeSimple"
    };

    @SuppressWarnings("deprecation")
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_createAnnotate(this, in, current);
            }
            case 1:
            {
                return _iceD_createEmbedElement(this, in, current);
            }
            case 2:
            {
                return _iceD_createMirror(this, in, current);
            }
            case 3:
            {
                return _iceD_createNode(this, in, current);
            }
            case 4:
            {
                return _iceD_createNodeFile(this, in, current);
            }
            case 5:
            {
                return _iceD_createNodeWithRequestOnly(this, in, current);
            }
            case 6:
            {
                return _iceD_createSuggestion(this, in, current);
            }
            case 7:
            {
                return _iceD_deleteNode(this, in, current);
            }
            case 8:
            {
                return _iceD_deleteNodeById(this, in, current);
            }
            case 9:
            {
                return _iceD_deleteNodeByIdList(this, in, current);
            }
            case 10:
            {
                return _iceD_deleteNodeList(this, in, current);
            }
            case 11:
            {
                return _iceD_getNodeByFuzzyPath(this, in, current);
            }
            case 12:
            {
                return _iceD_getNodeById(this, in, current);
            }
            case 13:
            {
                return _iceD_getNodeByPath(this, in, current);
            }
            case 14:
            {
                return _iceD_getNodeInfo(this, in, current);
            }
            case 15:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 16:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 17:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 18:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 19:
            {
                return _iceD_listChild(this, in, current);
            }
            case 20:
            {
                return _iceD_listChildren(this, in, current);
            }
            case 21:
            {
                return _iceD_listNode(this, in, current);
            }
            case 22:
            {
                return _iceD_listNodeFile(this, in, current);
            }
            case 23:
            {
                return _iceD_listOldNode(this, in, current);
            }
            case 24:
            {
                return _iceD_listRoot(this, in, current);
            }
            case 25:
            {
                return _iceD_summaryNodeLength(this, in, current);
            }
            case 26:
            {
                return _iceD_updateNode(this, in, current);
            }
            case 27:
            {
                return _iceD_updateNodeFile(this, in, current);
            }
            case 28:
            {
                return _iceD_updateNodeSimple(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
