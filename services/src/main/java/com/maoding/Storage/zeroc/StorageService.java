// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Storage.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.Storage.zeroc;

public interface StorageService extends com.zeroc.Ice.Object
{
    java.util.List<SimpleNodeDTO> listAllNodeForAccount(com.maoding.User.zeroc.AccountDTO account, com.zeroc.Ice.Current current);

    boolean isDirectoryEmpty(String path, com.zeroc.Ice.Current current);

    boolean closeFileForCurrent(String path, com.zeroc.Ice.Current current);

    boolean closeFileForAccount(com.maoding.User.zeroc.AccountDTO account, String path, com.zeroc.Ice.Current current);

    java.util.List<SimpleNodeDTO> listRootNodeForAccount(com.maoding.User.zeroc.AccountDTO account, com.zeroc.Ice.Current current);

    java.util.List<SimpleNodeDTO> listRootNodeForCurrent(com.zeroc.Ice.Current current);

    SimpleNodeDTO getNodeByPathForAccount(com.maoding.User.zeroc.AccountDTO account, String path, com.zeroc.Ice.Current current);

    SimpleNodeDTO getNodeByPathForCurrent(String path, com.zeroc.Ice.Current current);

    SimpleNodeDTO getNodeByIdForAccount(com.maoding.User.zeroc.AccountDTO account, String id, com.zeroc.Ice.Current current);

    SimpleNodeDTO getNodeByIdForCurrent(String id, com.zeroc.Ice.Current current);

    java.util.List<SimpleNodeDTO> listSubNodeByPathForAccount(com.maoding.User.zeroc.AccountDTO account, String path, com.zeroc.Ice.Current current);

    java.util.List<SimpleNodeDTO> listSubNodeByPathForCurrent(String path, com.zeroc.Ice.Current current);

    java.util.List<SimpleNodeDTO> listSubNodeByPNodeIdForAccount(com.maoding.User.zeroc.AccountDTO account, String pid, com.zeroc.Ice.Current current);

    java.util.List<SimpleNodeDTO> listSubNodeByPNodeIdForCurrent(String pid, com.zeroc.Ice.Current current);

    String createNode(CreateNodeRequestDTO request, com.zeroc.Ice.Current current);

    com.maoding.FileServer.zeroc.FileRequestDTO openFileForCurrent(String path, com.zeroc.Ice.Current current);

    com.maoding.FileServer.zeroc.FileRequestDTO openFileForAccount(com.maoding.User.zeroc.AccountDTO account, String path, com.zeroc.Ice.Current current);

    boolean setFileLength(String path, long fileLength, com.zeroc.Ice.Current current);

    boolean canBeDeleted(String path, com.zeroc.Ice.Current current);

    long getUsage(StorageQueryDTO query, com.zeroc.Ice.Current current);

    boolean lockNode(String path, String userId, com.zeroc.Ice.Current current);

    boolean unlockNode(String path, String userId, com.zeroc.Ice.Current current);

    boolean isLocking(String path, com.zeroc.Ice.Current current);

    CooperateDirNodeDTO getDirNodeInfo(String path, com.zeroc.Ice.Current current);

    FileNodeDTO getFileNodeInfo(String path, com.zeroc.Ice.Current current);

    boolean moveNode(String oldPath, String newPath, com.zeroc.Ice.Current current);

    boolean deleteNode(String path, boolean force, com.zeroc.Ice.Current current);

    com.maoding.FileServer.zeroc.FileRequestDTO requestUploadByPath(String path, String userId, com.zeroc.Ice.Current current);

    com.maoding.FileServer.zeroc.FileRequestDTO requestDownloadByPath(String path, String userId, com.zeroc.Ice.Current current);

    void finishUploadById(String nodeId, String userId, com.zeroc.Ice.Current current);

    java.util.List<SimpleNodeDTO> listSubNode(String path, com.zeroc.Ice.Current current);

    SimpleNodeDTO getSimpleNodeInfo(String path, com.zeroc.Ice.Current current);

    CooperateDirDTO getCooperateDirInfo(CooperationQueryDTO query, com.zeroc.Ice.Current current);

    boolean lockFile(String fileId, String address, com.zeroc.Ice.Current current);

    NodeDTO getNodeInfo(CooperationQueryDTO query, com.zeroc.Ice.Current current);

    boolean changeNodeInfo(NodeModifyRequestDTO request, String nodeId, com.zeroc.Ice.Current current);

    boolean initNodeInfo(CreateNodeRequestDTO request, com.zeroc.Ice.Current current);

    boolean modifyFileInfo(CooperateFileDTO fileInfo, com.zeroc.Ice.Current current);

    com.maoding.FileServer.zeroc.FileRequestDTO requestUpload(CooperateFileDTO fileInfo, int mode, com.zeroc.Ice.Current current);

    com.maoding.FileServer.zeroc.FileRequestDTO requestDownload(CooperateFileDTO fileInfo, int mode, com.zeroc.Ice.Current current);

    com.maoding.FileServer.zeroc.FileRequestDTO requestDownloadFromLast(CooperateFileDTO fileInfo, int mode, com.zeroc.Ice.Current current);

    CooperateFileDTO uploadCallback(java.util.Map<java.lang.String, java.lang.String> params, com.zeroc.Ice.Current current);

    void downloadCallback(java.util.Map<java.lang.String, java.lang.String> params, com.zeroc.Ice.Current current);

    void finishUpload(com.maoding.FileServer.zeroc.FileRequestDTO request, boolean succeeded, com.zeroc.Ice.Current current);

    void finishDownload(com.maoding.FileServer.zeroc.FileRequestDTO request, boolean succeeded, com.zeroc.Ice.Current current);

    boolean replaceFile(CooperateFileDTO fileInfo, com.maoding.FileServer.zeroc.FileDTO fileDTO, com.zeroc.Ice.Current current);

    boolean deleteFile(CooperateFileDTO fileInfo, com.zeroc.Ice.Current current);

    String createDirectory(CreateNodeRequestDTO request, com.zeroc.Ice.Current current);

    boolean deleteDirectory(String nodeId, boolean force, com.zeroc.Ice.Current current);

    String createFile(CreateNodeRequestDTO request, com.zeroc.Ice.Current current);

    CooperateFileDTO duplicateFile(CooperateFileDTO fileInfo, String path, com.zeroc.Ice.Current current);

    CooperateFileDTO createFileLink(CooperateFileDTO fileInfo, String path, com.zeroc.Ice.Current current);

    boolean duplicateDirectory(String path, String parent, com.zeroc.Ice.Current current);

    java.util.List<CooperateFileDTO> listFileLink(com.maoding.FileServer.zeroc.FileDTO fileDTO, com.zeroc.Ice.Current current);

    boolean restoreFile(CooperateFileDTO fileInfo, com.zeroc.Ice.Current current);

    boolean restoreDirectory(String path, com.zeroc.Ice.Current current);

    boolean unlockFile(String fileId, com.zeroc.Ice.Current current);

    boolean isFileLocking(String fileId, com.zeroc.Ice.Current current);

    CooperateFileDTO getFileInfo(String nodeId, com.zeroc.Ice.Current current);

    int getLinkCount(com.maoding.FileServer.zeroc.FileDTO fileDTO, com.zeroc.Ice.Current current);

    String createVersion(CooperateFileDTO fileInfo, String version, com.zeroc.Ice.Current current);

    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::zeroc::StorageService"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::zeroc::StorageService";
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listAllNodeForAccount(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.User.zeroc.AccountDTO iceP_account;
        iceP_account = com.maoding.User.zeroc.AccountDTO.ice_read(istr);
        inS.endReadParams();
        java.util.List<SimpleNodeDTO> ret = obj.listAllNodeForAccount(iceP_account, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SimpleNodeListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_isDirectoryEmpty(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_path;
        iceP_path = istr.readString();
        inS.endReadParams();
        boolean ret = obj.isDirectoryEmpty(iceP_path, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_closeFileForCurrent(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_path;
        iceP_path = istr.readString();
        inS.endReadParams();
        boolean ret = obj.closeFileForCurrent(iceP_path, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_closeFileForAccount(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.User.zeroc.AccountDTO iceP_account;
        String iceP_path;
        iceP_account = com.maoding.User.zeroc.AccountDTO.ice_read(istr);
        iceP_path = istr.readString();
        inS.endReadParams();
        boolean ret = obj.closeFileForAccount(iceP_account, iceP_path, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listRootNodeForAccount(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.User.zeroc.AccountDTO iceP_account;
        iceP_account = com.maoding.User.zeroc.AccountDTO.ice_read(istr);
        inS.endReadParams();
        java.util.List<SimpleNodeDTO> ret = obj.listRootNodeForAccount(iceP_account, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SimpleNodeListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listRootNodeForCurrent(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        java.util.List<SimpleNodeDTO> ret = obj.listRootNodeForCurrent(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SimpleNodeListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getNodeByPathForAccount(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.User.zeroc.AccountDTO iceP_account;
        String iceP_path;
        iceP_account = com.maoding.User.zeroc.AccountDTO.ice_read(istr);
        iceP_path = istr.readString();
        inS.endReadParams();
        SimpleNodeDTO ret = obj.getNodeByPathForAccount(iceP_account, iceP_path, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getNodeByPathForCurrent(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_path;
        iceP_path = istr.readString();
        inS.endReadParams();
        SimpleNodeDTO ret = obj.getNodeByPathForCurrent(iceP_path, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getNodeByIdForAccount(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.User.zeroc.AccountDTO iceP_account;
        String iceP_id;
        iceP_account = com.maoding.User.zeroc.AccountDTO.ice_read(istr);
        iceP_id = istr.readString();
        inS.endReadParams();
        SimpleNodeDTO ret = obj.getNodeByIdForAccount(iceP_account, iceP_id, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getNodeByIdForCurrent(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_id;
        iceP_id = istr.readString();
        inS.endReadParams();
        SimpleNodeDTO ret = obj.getNodeByIdForCurrent(iceP_id, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listSubNodeByPathForAccount(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.User.zeroc.AccountDTO iceP_account;
        String iceP_path;
        iceP_account = com.maoding.User.zeroc.AccountDTO.ice_read(istr);
        iceP_path = istr.readString();
        inS.endReadParams();
        java.util.List<SimpleNodeDTO> ret = obj.listSubNodeByPathForAccount(iceP_account, iceP_path, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SimpleNodeListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listSubNodeByPathForCurrent(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_path;
        iceP_path = istr.readString();
        inS.endReadParams();
        java.util.List<SimpleNodeDTO> ret = obj.listSubNodeByPathForCurrent(iceP_path, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SimpleNodeListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listSubNodeByPNodeIdForAccount(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.User.zeroc.AccountDTO iceP_account;
        String iceP_pid;
        iceP_account = com.maoding.User.zeroc.AccountDTO.ice_read(istr);
        iceP_pid = istr.readString();
        inS.endReadParams();
        java.util.List<SimpleNodeDTO> ret = obj.listSubNodeByPNodeIdForAccount(iceP_account, iceP_pid, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SimpleNodeListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listSubNodeByPNodeIdForCurrent(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_pid;
        iceP_pid = istr.readString();
        inS.endReadParams();
        java.util.List<SimpleNodeDTO> ret = obj.listSubNodeByPNodeIdForCurrent(iceP_pid, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SimpleNodeListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_createNode(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        CreateNodeRequestDTO iceP_request;
        iceP_request = CreateNodeRequestDTO.ice_read(istr);
        inS.endReadParams();
        String ret = obj.createNode(iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_openFileForCurrent(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_path;
        iceP_path = istr.readString();
        inS.endReadParams();
        com.maoding.FileServer.zeroc.FileRequestDTO ret = obj.openFileForCurrent(iceP_path, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.FileServer.zeroc.FileRequestDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_openFileForAccount(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.User.zeroc.AccountDTO iceP_account;
        String iceP_path;
        iceP_account = com.maoding.User.zeroc.AccountDTO.ice_read(istr);
        iceP_path = istr.readString();
        inS.endReadParams();
        com.maoding.FileServer.zeroc.FileRequestDTO ret = obj.openFileForAccount(iceP_account, iceP_path, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.FileServer.zeroc.FileRequestDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setFileLength(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_path;
        long iceP_fileLength;
        iceP_path = istr.readString();
        iceP_fileLength = istr.readLong();
        inS.endReadParams();
        boolean ret = obj.setFileLength(iceP_path, iceP_fileLength, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_canBeDeleted(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_path;
        iceP_path = istr.readString();
        inS.endReadParams();
        boolean ret = obj.canBeDeleted(iceP_path, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getUsage(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        StorageQueryDTO iceP_query;
        iceP_query = StorageQueryDTO.ice_read(istr);
        inS.endReadParams();
        long ret = obj.getUsage(iceP_query, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeLong(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_lockNode(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_path;
        String iceP_userId;
        iceP_path = istr.readString();
        iceP_userId = istr.readString();
        inS.endReadParams();
        boolean ret = obj.lockNode(iceP_path, iceP_userId, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_unlockNode(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_path;
        String iceP_userId;
        iceP_path = istr.readString();
        iceP_userId = istr.readString();
        inS.endReadParams();
        boolean ret = obj.unlockNode(iceP_path, iceP_userId, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_isLocking(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_path;
        iceP_path = istr.readString();
        inS.endReadParams();
        boolean ret = obj.isLocking(iceP_path, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getDirNodeInfo(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_path;
        iceP_path = istr.readString();
        inS.endReadParams();
        CooperateDirNodeDTO ret = obj.getDirNodeInfo(iceP_path, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        CooperateDirNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getFileNodeInfo(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_path;
        iceP_path = istr.readString();
        inS.endReadParams();
        FileNodeDTO ret = obj.getFileNodeInfo(iceP_path, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        FileNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_moveNode(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_oldPath;
        String iceP_newPath;
        iceP_oldPath = istr.readString();
        iceP_newPath = istr.readString();
        inS.endReadParams();
        boolean ret = obj.moveNode(iceP_oldPath, iceP_newPath, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_deleteNode(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_path;
        boolean iceP_force;
        iceP_path = istr.readString();
        iceP_force = istr.readBool();
        inS.endReadParams();
        boolean ret = obj.deleteNode(iceP_path, iceP_force, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_requestUploadByPath(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_path;
        String iceP_userId;
        iceP_path = istr.readString();
        iceP_userId = istr.readString();
        inS.endReadParams();
        com.maoding.FileServer.zeroc.FileRequestDTO ret = obj.requestUploadByPath(iceP_path, iceP_userId, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.FileServer.zeroc.FileRequestDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_requestDownloadByPath(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_path;
        String iceP_userId;
        iceP_path = istr.readString();
        iceP_userId = istr.readString();
        inS.endReadParams();
        com.maoding.FileServer.zeroc.FileRequestDTO ret = obj.requestDownloadByPath(iceP_path, iceP_userId, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.FileServer.zeroc.FileRequestDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_finishUploadById(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_nodeId;
        String iceP_userId;
        iceP_nodeId = istr.readString();
        iceP_userId = istr.readString();
        inS.endReadParams();
        obj.finishUploadById(iceP_nodeId, iceP_userId, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listSubNode(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_path;
        iceP_path = istr.readString();
        inS.endReadParams();
        java.util.List<SimpleNodeDTO> ret = obj.listSubNode(iceP_path, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SimpleNodeListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getSimpleNodeInfo(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_path;
        iceP_path = istr.readString();
        inS.endReadParams();
        SimpleNodeDTO ret = obj.getSimpleNodeInfo(iceP_path, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SimpleNodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getCooperateDirInfo(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        CooperationQueryDTO iceP_query;
        iceP_query = CooperationQueryDTO.ice_read(istr);
        inS.endReadParams();
        CooperateDirDTO ret = obj.getCooperateDirInfo(iceP_query, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        CooperateDirDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_lockFile(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_fileId;
        String iceP_address;
        iceP_fileId = istr.readString();
        iceP_address = istr.readString();
        inS.endReadParams();
        boolean ret = obj.lockFile(iceP_fileId, iceP_address, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getNodeInfo(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        CooperationQueryDTO iceP_query;
        iceP_query = CooperationQueryDTO.ice_read(istr);
        inS.endReadParams();
        NodeDTO ret = obj.getNodeInfo(iceP_query, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        NodeDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_changeNodeInfo(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        NodeModifyRequestDTO iceP_request;
        String iceP_nodeId;
        iceP_request = NodeModifyRequestDTO.ice_read(istr);
        iceP_nodeId = istr.readString();
        inS.endReadParams();
        boolean ret = obj.changeNodeInfo(iceP_request, iceP_nodeId, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_initNodeInfo(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        CreateNodeRequestDTO iceP_request;
        iceP_request = CreateNodeRequestDTO.ice_read(istr);
        inS.endReadParams();
        boolean ret = obj.initNodeInfo(iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_modifyFileInfo(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        CooperateFileDTO iceP_fileInfo;
        iceP_fileInfo = CooperateFileDTO.ice_read(istr);
        inS.endReadParams();
        boolean ret = obj.modifyFileInfo(iceP_fileInfo, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_requestUpload(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        CooperateFileDTO iceP_fileInfo;
        int iceP_mode;
        iceP_fileInfo = CooperateFileDTO.ice_read(istr);
        iceP_mode = istr.readInt();
        inS.endReadParams();
        com.maoding.FileServer.zeroc.FileRequestDTO ret = obj.requestUpload(iceP_fileInfo, iceP_mode, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.FileServer.zeroc.FileRequestDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_requestDownload(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        CooperateFileDTO iceP_fileInfo;
        int iceP_mode;
        iceP_fileInfo = CooperateFileDTO.ice_read(istr);
        iceP_mode = istr.readInt();
        inS.endReadParams();
        com.maoding.FileServer.zeroc.FileRequestDTO ret = obj.requestDownload(iceP_fileInfo, iceP_mode, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.FileServer.zeroc.FileRequestDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_requestDownloadFromLast(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        CooperateFileDTO iceP_fileInfo;
        int iceP_mode;
        iceP_fileInfo = CooperateFileDTO.ice_read(istr);
        iceP_mode = istr.readInt();
        inS.endReadParams();
        com.maoding.FileServer.zeroc.FileRequestDTO ret = obj.requestDownloadFromLast(iceP_fileInfo, iceP_mode, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        com.maoding.FileServer.zeroc.FileRequestDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_uploadCallback(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.String, java.lang.String> iceP_params;
        iceP_params = com.maoding.Common.zeroc.MapHelper.read(istr);
        inS.endReadParams();
        CooperateFileDTO ret = obj.uploadCallback(iceP_params, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        CooperateFileDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_downloadCallback(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.util.Map<java.lang.String, java.lang.String> iceP_params;
        iceP_params = com.maoding.Common.zeroc.MapHelper.read(istr);
        inS.endReadParams();
        obj.downloadCallback(iceP_params, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_finishUpload(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.FileServer.zeroc.FileRequestDTO iceP_request;
        boolean iceP_succeeded;
        iceP_request = com.maoding.FileServer.zeroc.FileRequestDTO.ice_read(istr);
        iceP_succeeded = istr.readBool();
        inS.endReadParams();
        obj.finishUpload(iceP_request, iceP_succeeded, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_finishDownload(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.FileServer.zeroc.FileRequestDTO iceP_request;
        boolean iceP_succeeded;
        iceP_request = com.maoding.FileServer.zeroc.FileRequestDTO.ice_read(istr);
        iceP_succeeded = istr.readBool();
        inS.endReadParams();
        obj.finishDownload(iceP_request, iceP_succeeded, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_replaceFile(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        CooperateFileDTO iceP_fileInfo;
        com.maoding.FileServer.zeroc.FileDTO iceP_fileDTO;
        iceP_fileInfo = CooperateFileDTO.ice_read(istr);
        iceP_fileDTO = com.maoding.FileServer.zeroc.FileDTO.ice_read(istr);
        inS.endReadParams();
        boolean ret = obj.replaceFile(iceP_fileInfo, iceP_fileDTO, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_deleteFile(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        CooperateFileDTO iceP_fileInfo;
        iceP_fileInfo = CooperateFileDTO.ice_read(istr);
        inS.endReadParams();
        boolean ret = obj.deleteFile(iceP_fileInfo, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_createDirectory(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        CreateNodeRequestDTO iceP_request;
        iceP_request = CreateNodeRequestDTO.ice_read(istr);
        inS.endReadParams();
        String ret = obj.createDirectory(iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_deleteDirectory(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_nodeId;
        boolean iceP_force;
        iceP_nodeId = istr.readString();
        iceP_force = istr.readBool();
        inS.endReadParams();
        boolean ret = obj.deleteDirectory(iceP_nodeId, iceP_force, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_createFile(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        CreateNodeRequestDTO iceP_request;
        iceP_request = CreateNodeRequestDTO.ice_read(istr);
        inS.endReadParams();
        String ret = obj.createFile(iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_duplicateFile(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        CooperateFileDTO iceP_fileInfo;
        String iceP_path;
        iceP_fileInfo = CooperateFileDTO.ice_read(istr);
        iceP_path = istr.readString();
        inS.endReadParams();
        CooperateFileDTO ret = obj.duplicateFile(iceP_fileInfo, iceP_path, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        CooperateFileDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_createFileLink(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        CooperateFileDTO iceP_fileInfo;
        String iceP_path;
        iceP_fileInfo = CooperateFileDTO.ice_read(istr);
        iceP_path = istr.readString();
        inS.endReadParams();
        CooperateFileDTO ret = obj.createFileLink(iceP_fileInfo, iceP_path, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        CooperateFileDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_duplicateDirectory(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_path;
        String iceP_parent;
        iceP_path = istr.readString();
        iceP_parent = istr.readString();
        inS.endReadParams();
        boolean ret = obj.duplicateDirectory(iceP_path, iceP_parent, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listFileLink(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.FileServer.zeroc.FileDTO iceP_fileDTO;
        iceP_fileDTO = com.maoding.FileServer.zeroc.FileDTO.ice_read(istr);
        inS.endReadParams();
        java.util.List<CooperateFileDTO> ret = obj.listFileLink(iceP_fileDTO, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        CooperateFileListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_restoreFile(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        CooperateFileDTO iceP_fileInfo;
        iceP_fileInfo = CooperateFileDTO.ice_read(istr);
        inS.endReadParams();
        boolean ret = obj.restoreFile(iceP_fileInfo, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_restoreDirectory(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_path;
        iceP_path = istr.readString();
        inS.endReadParams();
        boolean ret = obj.restoreDirectory(iceP_path, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_unlockFile(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_fileId;
        iceP_fileId = istr.readString();
        inS.endReadParams();
        boolean ret = obj.unlockFile(iceP_fileId, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_isFileLocking(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_fileId;
        iceP_fileId = istr.readString();
        inS.endReadParams();
        boolean ret = obj.isFileLocking(iceP_fileId, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getFileInfo(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_nodeId;
        iceP_nodeId = istr.readString();
        inS.endReadParams();
        CooperateFileDTO ret = obj.getFileInfo(iceP_nodeId, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        CooperateFileDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getLinkCount(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        com.maoding.FileServer.zeroc.FileDTO iceP_fileDTO;
        iceP_fileDTO = com.maoding.FileServer.zeroc.FileDTO.ice_read(istr);
        inS.endReadParams();
        int ret = obj.getLinkCount(iceP_fileDTO, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeInt(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_createVersion(StorageService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        CooperateFileDTO iceP_fileInfo;
        String iceP_version;
        iceP_fileInfo = CooperateFileDTO.ice_read(istr);
        iceP_version = istr.readString();
        inS.endReadParams();
        String ret = obj.createVersion(iceP_fileInfo, iceP_version, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    final static String[] _iceOps =
    {
        "canBeDeleted",
        "changeNodeInfo",
        "closeFileForAccount",
        "closeFileForCurrent",
        "createDirectory",
        "createFile",
        "createFileLink",
        "createNode",
        "createVersion",
        "deleteDirectory",
        "deleteFile",
        "deleteNode",
        "downloadCallback",
        "duplicateDirectory",
        "duplicateFile",
        "finishDownload",
        "finishUpload",
        "finishUploadById",
        "getCooperateDirInfo",
        "getDirNodeInfo",
        "getFileInfo",
        "getFileNodeInfo",
        "getLinkCount",
        "getNodeByIdForAccount",
        "getNodeByIdForCurrent",
        "getNodeByPathForAccount",
        "getNodeByPathForCurrent",
        "getNodeInfo",
        "getSimpleNodeInfo",
        "getUsage",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "initNodeInfo",
        "isDirectoryEmpty",
        "isFileLocking",
        "isLocking",
        "listAllNodeForAccount",
        "listFileLink",
        "listRootNodeForAccount",
        "listRootNodeForCurrent",
        "listSubNode",
        "listSubNodeByPNodeIdForAccount",
        "listSubNodeByPNodeIdForCurrent",
        "listSubNodeByPathForAccount",
        "listSubNodeByPathForCurrent",
        "lockFile",
        "lockNode",
        "modifyFileInfo",
        "moveNode",
        "openFileForAccount",
        "openFileForCurrent",
        "replaceFile",
        "requestDownload",
        "requestDownloadByPath",
        "requestDownloadFromLast",
        "requestUpload",
        "requestUploadByPath",
        "restoreDirectory",
        "restoreFile",
        "setFileLength",
        "unlockFile",
        "unlockNode",
        "uploadCallback"
    };

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_canBeDeleted(this, in, current);
            }
            case 1:
            {
                return _iceD_changeNodeInfo(this, in, current);
            }
            case 2:
            {
                return _iceD_closeFileForAccount(this, in, current);
            }
            case 3:
            {
                return _iceD_closeFileForCurrent(this, in, current);
            }
            case 4:
            {
                return _iceD_createDirectory(this, in, current);
            }
            case 5:
            {
                return _iceD_createFile(this, in, current);
            }
            case 6:
            {
                return _iceD_createFileLink(this, in, current);
            }
            case 7:
            {
                return _iceD_createNode(this, in, current);
            }
            case 8:
            {
                return _iceD_createVersion(this, in, current);
            }
            case 9:
            {
                return _iceD_deleteDirectory(this, in, current);
            }
            case 10:
            {
                return _iceD_deleteFile(this, in, current);
            }
            case 11:
            {
                return _iceD_deleteNode(this, in, current);
            }
            case 12:
            {
                return _iceD_downloadCallback(this, in, current);
            }
            case 13:
            {
                return _iceD_duplicateDirectory(this, in, current);
            }
            case 14:
            {
                return _iceD_duplicateFile(this, in, current);
            }
            case 15:
            {
                return _iceD_finishDownload(this, in, current);
            }
            case 16:
            {
                return _iceD_finishUpload(this, in, current);
            }
            case 17:
            {
                return _iceD_finishUploadById(this, in, current);
            }
            case 18:
            {
                return _iceD_getCooperateDirInfo(this, in, current);
            }
            case 19:
            {
                return _iceD_getDirNodeInfo(this, in, current);
            }
            case 20:
            {
                return _iceD_getFileInfo(this, in, current);
            }
            case 21:
            {
                return _iceD_getFileNodeInfo(this, in, current);
            }
            case 22:
            {
                return _iceD_getLinkCount(this, in, current);
            }
            case 23:
            {
                return _iceD_getNodeByIdForAccount(this, in, current);
            }
            case 24:
            {
                return _iceD_getNodeByIdForCurrent(this, in, current);
            }
            case 25:
            {
                return _iceD_getNodeByPathForAccount(this, in, current);
            }
            case 26:
            {
                return _iceD_getNodeByPathForCurrent(this, in, current);
            }
            case 27:
            {
                return _iceD_getNodeInfo(this, in, current);
            }
            case 28:
            {
                return _iceD_getSimpleNodeInfo(this, in, current);
            }
            case 29:
            {
                return _iceD_getUsage(this, in, current);
            }
            case 30:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 31:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 32:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 33:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 34:
            {
                return _iceD_initNodeInfo(this, in, current);
            }
            case 35:
            {
                return _iceD_isDirectoryEmpty(this, in, current);
            }
            case 36:
            {
                return _iceD_isFileLocking(this, in, current);
            }
            case 37:
            {
                return _iceD_isLocking(this, in, current);
            }
            case 38:
            {
                return _iceD_listAllNodeForAccount(this, in, current);
            }
            case 39:
            {
                return _iceD_listFileLink(this, in, current);
            }
            case 40:
            {
                return _iceD_listRootNodeForAccount(this, in, current);
            }
            case 41:
            {
                return _iceD_listRootNodeForCurrent(this, in, current);
            }
            case 42:
            {
                return _iceD_listSubNode(this, in, current);
            }
            case 43:
            {
                return _iceD_listSubNodeByPNodeIdForAccount(this, in, current);
            }
            case 44:
            {
                return _iceD_listSubNodeByPNodeIdForCurrent(this, in, current);
            }
            case 45:
            {
                return _iceD_listSubNodeByPathForAccount(this, in, current);
            }
            case 46:
            {
                return _iceD_listSubNodeByPathForCurrent(this, in, current);
            }
            case 47:
            {
                return _iceD_lockFile(this, in, current);
            }
            case 48:
            {
                return _iceD_lockNode(this, in, current);
            }
            case 49:
            {
                return _iceD_modifyFileInfo(this, in, current);
            }
            case 50:
            {
                return _iceD_moveNode(this, in, current);
            }
            case 51:
            {
                return _iceD_openFileForAccount(this, in, current);
            }
            case 52:
            {
                return _iceD_openFileForCurrent(this, in, current);
            }
            case 53:
            {
                return _iceD_replaceFile(this, in, current);
            }
            case 54:
            {
                return _iceD_requestDownload(this, in, current);
            }
            case 55:
            {
                return _iceD_requestDownloadByPath(this, in, current);
            }
            case 56:
            {
                return _iceD_requestDownloadFromLast(this, in, current);
            }
            case 57:
            {
                return _iceD_requestUpload(this, in, current);
            }
            case 58:
            {
                return _iceD_requestUploadByPath(this, in, current);
            }
            case 59:
            {
                return _iceD_restoreDirectory(this, in, current);
            }
            case 60:
            {
                return _iceD_restoreFile(this, in, current);
            }
            case 61:
            {
                return _iceD_setFileLength(this, in, current);
            }
            case 62:
            {
                return _iceD_unlockFile(this, in, current);
            }
            case 63:
            {
                return _iceD_unlockNode(this, in, current);
            }
            case 64:
            {
                return _iceD_uploadCallback(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
