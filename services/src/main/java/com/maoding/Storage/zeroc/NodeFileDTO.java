// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `StorageData.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.Storage.zeroc;

public class NodeFileDTO implements java.lang.Cloneable,
                                    java.io.Serializable
{
    public short fileTypeId;

    public short getFileTypeId()
    {
        return fileTypeId;
    }

    public void setFileTypeId(short fileTypeId)
    {
        this.fileTypeId = fileTypeId;
    }

    public String fileVersion;

    public String getFileVersion()
    {
        return fileVersion;
    }

    public void setFileVersion(String fileVersion)
    {
        this.fileVersion = fileVersion;
    }

    public String fileChecksum;

    public String getFileChecksum()
    {
        return fileChecksum;
    }

    public void setFileChecksum(String fileChecksum)
    {
        this.fileChecksum = fileChecksum;
    }

    public String majorId;

    public String getMajorId()
    {
        return majorId;
    }

    public void setMajorId(String majorId)
    {
        this.majorId = majorId;
    }

    public String mainFileId;

    public String getMainFileId()
    {
        return mainFileId;
    }

    public void setMainFileId(String mainFileId)
    {
        this.mainFileId = mainFileId;
    }

    public String serverTypeId;

    public String getServerTypeId()
    {
        return serverTypeId;
    }

    public void setServerTypeId(String serverTypeId)
    {
        this.serverTypeId = serverTypeId;
    }

    public String serverAddress;

    public String getServerAddress()
    {
        return serverAddress;
    }

    public void setServerAddress(String serverAddress)
    {
        this.serverAddress = serverAddress;
    }

    public String readOnlyScope;

    public String getReadOnlyScope()
    {
        return readOnlyScope;
    }

    public void setReadOnlyScope(String readOnlyScope)
    {
        this.readOnlyScope = readOnlyScope;
    }

    public String readOnlyKey;

    public String getReadOnlyKey()
    {
        return readOnlyKey;
    }

    public void setReadOnlyKey(String readOnlyKey)
    {
        this.readOnlyKey = readOnlyKey;
    }

    public String writableScope;

    public String getWritableScope()
    {
        return writableScope;
    }

    public void setWritableScope(String writableScope)
    {
        this.writableScope = writableScope;
    }

    public String writableKey;

    public String getWritableKey()
    {
        return writableKey;
    }

    public void setWritableKey(String writableKey)
    {
        this.writableKey = writableKey;
    }

    public String readonlyMirrorPath;

    public String getReadonlyMirrorPath()
    {
        return readonlyMirrorPath;
    }

    public void setReadonlyMirrorPath(String readonlyMirrorPath)
    {
        this.readonlyMirrorPath = readonlyMirrorPath;
    }

    public String writableMirrorPath;

    public String getWritableMirrorPath()
    {
        return writableMirrorPath;
    }

    public void setWritableMirrorPath(String writableMirrorPath)
    {
        this.writableMirrorPath = writableMirrorPath;
    }

    public NodeFileDTO()
    {
        this.fileVersion = "";
        this.fileChecksum = "";
        this.majorId = "";
        this.mainFileId = "";
        this.serverTypeId = "";
        this.serverAddress = "";
        this.readOnlyScope = "";
        this.readOnlyKey = "";
        this.writableScope = "";
        this.writableKey = "";
        this.readonlyMirrorPath = "";
        this.writableMirrorPath = "";
    }

    public NodeFileDTO(short fileTypeId, String fileVersion, String fileChecksum, String majorId, String mainFileId, String serverTypeId, String serverAddress, String readOnlyScope, String readOnlyKey, String writableScope, String writableKey, String readonlyMirrorPath, String writableMirrorPath)
    {
        this.fileTypeId = fileTypeId;
        this.fileVersion = fileVersion;
        this.fileChecksum = fileChecksum;
        this.majorId = majorId;
        this.mainFileId = mainFileId;
        this.serverTypeId = serverTypeId;
        this.serverAddress = serverAddress;
        this.readOnlyScope = readOnlyScope;
        this.readOnlyKey = readOnlyKey;
        this.writableScope = writableScope;
        this.writableKey = writableKey;
        this.readonlyMirrorPath = readonlyMirrorPath;
        this.writableMirrorPath = writableMirrorPath;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        NodeFileDTO r = null;
        if(rhs instanceof NodeFileDTO)
        {
            r = (NodeFileDTO)rhs;
        }

        if(r != null)
        {
            if(this.fileTypeId != r.fileTypeId)
            {
                return false;
            }
            if(this.fileVersion != r.fileVersion)
            {
                if(this.fileVersion == null || r.fileVersion == null || !this.fileVersion.equals(r.fileVersion))
                {
                    return false;
                }
            }
            if(this.fileChecksum != r.fileChecksum)
            {
                if(this.fileChecksum == null || r.fileChecksum == null || !this.fileChecksum.equals(r.fileChecksum))
                {
                    return false;
                }
            }
            if(this.majorId != r.majorId)
            {
                if(this.majorId == null || r.majorId == null || !this.majorId.equals(r.majorId))
                {
                    return false;
                }
            }
            if(this.mainFileId != r.mainFileId)
            {
                if(this.mainFileId == null || r.mainFileId == null || !this.mainFileId.equals(r.mainFileId))
                {
                    return false;
                }
            }
            if(this.serverTypeId != r.serverTypeId)
            {
                if(this.serverTypeId == null || r.serverTypeId == null || !this.serverTypeId.equals(r.serverTypeId))
                {
                    return false;
                }
            }
            if(this.serverAddress != r.serverAddress)
            {
                if(this.serverAddress == null || r.serverAddress == null || !this.serverAddress.equals(r.serverAddress))
                {
                    return false;
                }
            }
            if(this.readOnlyScope != r.readOnlyScope)
            {
                if(this.readOnlyScope == null || r.readOnlyScope == null || !this.readOnlyScope.equals(r.readOnlyScope))
                {
                    return false;
                }
            }
            if(this.readOnlyKey != r.readOnlyKey)
            {
                if(this.readOnlyKey == null || r.readOnlyKey == null || !this.readOnlyKey.equals(r.readOnlyKey))
                {
                    return false;
                }
            }
            if(this.writableScope != r.writableScope)
            {
                if(this.writableScope == null || r.writableScope == null || !this.writableScope.equals(r.writableScope))
                {
                    return false;
                }
            }
            if(this.writableKey != r.writableKey)
            {
                if(this.writableKey == null || r.writableKey == null || !this.writableKey.equals(r.writableKey))
                {
                    return false;
                }
            }
            if(this.readonlyMirrorPath != r.readonlyMirrorPath)
            {
                if(this.readonlyMirrorPath == null || r.readonlyMirrorPath == null || !this.readonlyMirrorPath.equals(r.readonlyMirrorPath))
                {
                    return false;
                }
            }
            if(this.writableMirrorPath != r.writableMirrorPath)
            {
                if(this.writableMirrorPath == null || r.writableMirrorPath == null || !this.writableMirrorPath.equals(r.writableMirrorPath))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::zeroc::NodeFileDTO");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileVersion);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileChecksum);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, majorId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, mainFileId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, serverTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, serverAddress);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, readOnlyScope);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, readOnlyKey);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, writableScope);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, writableKey);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, readonlyMirrorPath);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, writableMirrorPath);
        return h_;
    }

    public NodeFileDTO clone()
    {
        NodeFileDTO c = null;
        try
        {
            c = (NodeFileDTO)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeShort(this.fileTypeId);
        ostr.writeString(this.fileVersion);
        ostr.writeString(this.fileChecksum);
        ostr.writeString(this.majorId);
        ostr.writeString(this.mainFileId);
        ostr.writeString(this.serverTypeId);
        ostr.writeString(this.serverAddress);
        ostr.writeString(this.readOnlyScope);
        ostr.writeString(this.readOnlyKey);
        ostr.writeString(this.writableScope);
        ostr.writeString(this.writableKey);
        ostr.writeString(this.readonlyMirrorPath);
        ostr.writeString(this.writableMirrorPath);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.fileTypeId = istr.readShort();
        this.fileVersion = istr.readString();
        this.fileChecksum = istr.readString();
        this.majorId = istr.readString();
        this.mainFileId = istr.readString();
        this.serverTypeId = istr.readString();
        this.serverAddress = istr.readString();
        this.readOnlyScope = istr.readString();
        this.readOnlyKey = istr.readString();
        this.writableScope = istr.readString();
        this.writableKey = istr.readString();
        this.readonlyMirrorPath = istr.readString();
        this.writableMirrorPath = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, NodeFileDTO v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public NodeFileDTO ice_read(com.zeroc.Ice.InputStream istr)
    {
        NodeFileDTO v = new NodeFileDTO();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<NodeFileDTO> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, NodeFileDTO v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<NodeFileDTO> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(NodeFileDTO.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final NodeFileDTO _nullMarshalValue = new NodeFileDTO();

    public static final long serialVersionUID = -747435279L;
}
