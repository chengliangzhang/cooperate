// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `StorageData.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.Storage.zeroc;

public class NodeFileDTO implements java.lang.Cloneable,
                                    java.io.Serializable
{
    public String id;

    public String getId()
    {
        return id;
    }

    public void setId(String id)
    {
        this.id = id;
    }

    public String fileTypeId;

    public String getFileTypeId()
    {
        return fileTypeId;
    }

    public void setFileTypeId(String fileTypeId)
    {
        this.fileTypeId = fileTypeId;
    }

    public String fileVersion;

    public String getFileVersion()
    {
        return fileVersion;
    }

    public void setFileVersion(String fileVersion)
    {
        this.fileVersion = fileVersion;
    }

    public String fileChecksum;

    public String getFileChecksum()
    {
        return fileChecksum;
    }

    public void setFileChecksum(String fileChecksum)
    {
        this.fileChecksum = fileChecksum;
    }

    public String majorTypeId;

    public String getMajorTypeId()
    {
        return majorTypeId;
    }

    public void setMajorTypeId(String majorTypeId)
    {
        this.majorTypeId = majorTypeId;
    }

    public String mainFileId;

    public String getMainFileId()
    {
        return mainFileId;
    }

    public void setMainFileId(String mainFileId)
    {
        this.mainFileId = mainFileId;
    }

    public boolean isPassCheck;

    public boolean getIsPassCheck()
    {
        return isPassCheck;
    }

    public void setIsPassCheck(boolean isPassCheck)
    {
        this.isPassCheck = isPassCheck;
    }

    public boolean isIsPassCheck()
    {
        return isPassCheck;
    }

    public boolean isPassAudit;

    public boolean getIsPassAudit()
    {
        return isPassAudit;
    }

    public void setIsPassAudit(boolean isPassAudit)
    {
        this.isPassAudit = isPassAudit;
    }

    public boolean isIsPassAudit()
    {
        return isPassAudit;
    }

    public String serverTypeId;

    public String getServerTypeId()
    {
        return serverTypeId;
    }

    public void setServerTypeId(String serverTypeId)
    {
        this.serverTypeId = serverTypeId;
    }

    public String serverAddress;

    public String getServerAddress()
    {
        return serverAddress;
    }

    public void setServerAddress(String serverAddress)
    {
        this.serverAddress = serverAddress;
    }

    public String baseDir;

    public String getBaseDir()
    {
        return baseDir;
    }

    public void setBaseDir(String baseDir)
    {
        this.baseDir = baseDir;
    }

    public String readOnlyKey;

    public String getReadOnlyKey()
    {
        return readOnlyKey;
    }

    public void setReadOnlyKey(String readOnlyKey)
    {
        this.readOnlyKey = readOnlyKey;
    }

    public String writableKey;

    public String getWritableKey()
    {
        return writableKey;
    }

    public void setWritableKey(String writableKey)
    {
        this.writableKey = writableKey;
    }

    public String readOnlyMirrorKey;

    public String getReadOnlyMirrorKey()
    {
        return readOnlyMirrorKey;
    }

    public void setReadOnlyMirrorKey(String readOnlyMirrorKey)
    {
        this.readOnlyMirrorKey = readOnlyMirrorKey;
    }

    public String writableMirrorKey;

    public String getWritableMirrorKey()
    {
        return writableMirrorKey;
    }

    public void setWritableMirrorKey(String writableMirrorKey)
    {
        this.writableMirrorKey = writableMirrorKey;
    }

    public NodeFileDTO()
    {
        this.id = "";
        this.fileTypeId = "";
        this.fileVersion = "";
        this.fileChecksum = "";
        this.majorTypeId = "";
        this.mainFileId = "";
        this.serverTypeId = "";
        this.serverAddress = "";
        this.baseDir = "";
        this.readOnlyKey = "";
        this.writableKey = "";
        this.readOnlyMirrorKey = "";
        this.writableMirrorKey = "";
    }

    public NodeFileDTO(String id, String fileTypeId, String fileVersion, String fileChecksum, String majorTypeId, String mainFileId, boolean isPassCheck, boolean isPassAudit, String serverTypeId, String serverAddress, String baseDir, String readOnlyKey, String writableKey, String readOnlyMirrorKey, String writableMirrorKey)
    {
        this.id = id;
        this.fileTypeId = fileTypeId;
        this.fileVersion = fileVersion;
        this.fileChecksum = fileChecksum;
        this.majorTypeId = majorTypeId;
        this.mainFileId = mainFileId;
        this.isPassCheck = isPassCheck;
        this.isPassAudit = isPassAudit;
        this.serverTypeId = serverTypeId;
        this.serverAddress = serverAddress;
        this.baseDir = baseDir;
        this.readOnlyKey = readOnlyKey;
        this.writableKey = writableKey;
        this.readOnlyMirrorKey = readOnlyMirrorKey;
        this.writableMirrorKey = writableMirrorKey;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        NodeFileDTO r = null;
        if(rhs instanceof NodeFileDTO)
        {
            r = (NodeFileDTO)rhs;
        }

        if(r != null)
        {
            if(this.id != r.id)
            {
                if(this.id == null || r.id == null || !this.id.equals(r.id))
                {
                    return false;
                }
            }
            if(this.fileTypeId != r.fileTypeId)
            {
                if(this.fileTypeId == null || r.fileTypeId == null || !this.fileTypeId.equals(r.fileTypeId))
                {
                    return false;
                }
            }
            if(this.fileVersion != r.fileVersion)
            {
                if(this.fileVersion == null || r.fileVersion == null || !this.fileVersion.equals(r.fileVersion))
                {
                    return false;
                }
            }
            if(this.fileChecksum != r.fileChecksum)
            {
                if(this.fileChecksum == null || r.fileChecksum == null || !this.fileChecksum.equals(r.fileChecksum))
                {
                    return false;
                }
            }
            if(this.majorTypeId != r.majorTypeId)
            {
                if(this.majorTypeId == null || r.majorTypeId == null || !this.majorTypeId.equals(r.majorTypeId))
                {
                    return false;
                }
            }
            if(this.mainFileId != r.mainFileId)
            {
                if(this.mainFileId == null || r.mainFileId == null || !this.mainFileId.equals(r.mainFileId))
                {
                    return false;
                }
            }
            if(this.isPassCheck != r.isPassCheck)
            {
                return false;
            }
            if(this.isPassAudit != r.isPassAudit)
            {
                return false;
            }
            if(this.serverTypeId != r.serverTypeId)
            {
                if(this.serverTypeId == null || r.serverTypeId == null || !this.serverTypeId.equals(r.serverTypeId))
                {
                    return false;
                }
            }
            if(this.serverAddress != r.serverAddress)
            {
                if(this.serverAddress == null || r.serverAddress == null || !this.serverAddress.equals(r.serverAddress))
                {
                    return false;
                }
            }
            if(this.baseDir != r.baseDir)
            {
                if(this.baseDir == null || r.baseDir == null || !this.baseDir.equals(r.baseDir))
                {
                    return false;
                }
            }
            if(this.readOnlyKey != r.readOnlyKey)
            {
                if(this.readOnlyKey == null || r.readOnlyKey == null || !this.readOnlyKey.equals(r.readOnlyKey))
                {
                    return false;
                }
            }
            if(this.writableKey != r.writableKey)
            {
                if(this.writableKey == null || r.writableKey == null || !this.writableKey.equals(r.writableKey))
                {
                    return false;
                }
            }
            if(this.readOnlyMirrorKey != r.readOnlyMirrorKey)
            {
                if(this.readOnlyMirrorKey == null || r.readOnlyMirrorKey == null || !this.readOnlyMirrorKey.equals(r.readOnlyMirrorKey))
                {
                    return false;
                }
            }
            if(this.writableMirrorKey != r.writableMirrorKey)
            {
                if(this.writableMirrorKey == null || r.writableMirrorKey == null || !this.writableMirrorKey.equals(r.writableMirrorKey))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::zeroc::NodeFileDTO");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, id);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileVersion);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileChecksum);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, majorTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, mainFileId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isPassCheck);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isPassAudit);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, serverTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, serverAddress);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, baseDir);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, readOnlyKey);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, writableKey);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, readOnlyMirrorKey);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, writableMirrorKey);
        return h_;
    }

    public NodeFileDTO clone()
    {
        NodeFileDTO c = null;
        try
        {
            c = (NodeFileDTO)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.id);
        ostr.writeString(this.fileTypeId);
        ostr.writeString(this.fileVersion);
        ostr.writeString(this.fileChecksum);
        ostr.writeString(this.majorTypeId);
        ostr.writeString(this.mainFileId);
        ostr.writeBool(this.isPassCheck);
        ostr.writeBool(this.isPassAudit);
        ostr.writeString(this.serverTypeId);
        ostr.writeString(this.serverAddress);
        ostr.writeString(this.baseDir);
        ostr.writeString(this.readOnlyKey);
        ostr.writeString(this.writableKey);
        ostr.writeString(this.readOnlyMirrorKey);
        ostr.writeString(this.writableMirrorKey);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.id = istr.readString();
        this.fileTypeId = istr.readString();
        this.fileVersion = istr.readString();
        this.fileChecksum = istr.readString();
        this.majorTypeId = istr.readString();
        this.mainFileId = istr.readString();
        this.isPassCheck = istr.readBool();
        this.isPassAudit = istr.readBool();
        this.serverTypeId = istr.readString();
        this.serverAddress = istr.readString();
        this.baseDir = istr.readString();
        this.readOnlyKey = istr.readString();
        this.writableKey = istr.readString();
        this.readOnlyMirrorKey = istr.readString();
        this.writableMirrorKey = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, NodeFileDTO v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public NodeFileDTO ice_read(com.zeroc.Ice.InputStream istr)
    {
        NodeFileDTO v = new NodeFileDTO();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<NodeFileDTO> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, NodeFileDTO v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<NodeFileDTO> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(NodeFileDTO.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final NodeFileDTO _nullMarshalValue = new NodeFileDTO();

    public static final long serialVersionUID = 537888817L;
}
