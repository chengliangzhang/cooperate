// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `StorageData.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.Storage.zeroc;

public class UpdateNodeDTO implements java.lang.Cloneable,
                                      java.io.Serializable
{
    public short typeId;

    public short getTypeId()
    {
        return typeId;
    }

    public void setTypeId(short typeId)
    {
        this.typeId = typeId;
    }

    public String path;

    public String getPath()
    {
        return path;
    }

    public void setPath(String path)
    {
        this.path = path;
    }

    public String ownerUserId;

    public String getOwnerUserId()
    {
        return ownerUserId;
    }

    public void setOwnerUserId(String ownerUserId)
    {
        this.ownerUserId = ownerUserId;
    }

    public String taskId;

    public String getTaskId()
    {
        return taskId;
    }

    public void setTaskId(String taskId)
    {
        this.taskId = taskId;
    }

    public String mainFileId;

    public String getMainFileId()
    {
        return mainFileId;
    }

    public void setMainFileId(String mainFileId)
    {
        this.mainFileId = mainFileId;
    }

    public short serverTypeId;

    public short getServerTypeId()
    {
        return serverTypeId;
    }

    public void setServerTypeId(short serverTypeId)
    {
        this.serverTypeId = serverTypeId;
    }

    public String serverAddress;

    public String getServerAddress()
    {
        return serverAddress;
    }

    public void setServerAddress(String serverAddress)
    {
        this.serverAddress = serverAddress;
    }

    public String baseDir;

    public String getBaseDir()
    {
        return baseDir;
    }

    public void setBaseDir(String baseDir)
    {
        this.baseDir = baseDir;
    }

    public short fileTypeId;

    public short getFileTypeId()
    {
        return fileTypeId;
    }

    public void setFileTypeId(short fileTypeId)
    {
        this.fileTypeId = fileTypeId;
    }

    public long fileLength;

    public long getFileLength()
    {
        return fileLength;
    }

    public void setFileLength(long fileLength)
    {
        this.fileLength = fileLength;
    }

    public String fileVersion;

    public String getFileVersion()
    {
        return fileVersion;
    }

    public void setFileVersion(String fileVersion)
    {
        this.fileVersion = fileVersion;
    }

    public String fileChecksum;

    public String getFileChecksum()
    {
        return fileChecksum;
    }

    public void setFileChecksum(String fileChecksum)
    {
        this.fileChecksum = fileChecksum;
    }

    public String majorTypeId;

    public String getMajorTypeId()
    {
        return majorTypeId;
    }

    public void setMajorTypeId(String majorTypeId)
    {
        this.majorTypeId = majorTypeId;
    }

    public String readOnlyKey;

    public String getReadOnlyKey()
    {
        return readOnlyKey;
    }

    public void setReadOnlyKey(String readOnlyKey)
    {
        this.readOnlyKey = readOnlyKey;
    }

    public String writableKey;

    public String getWritableKey()
    {
        return writableKey;
    }

    public void setWritableKey(String writableKey)
    {
        this.writableKey = writableKey;
    }

    public short mirrorTypeId;

    public short getMirrorTypeId()
    {
        return mirrorTypeId;
    }

    public void setMirrorTypeId(short mirrorTypeId)
    {
        this.mirrorTypeId = mirrorTypeId;
    }

    public String mirrorAddress;

    public String getMirrorAddress()
    {
        return mirrorAddress;
    }

    public void setMirrorAddress(String mirrorAddress)
    {
        this.mirrorAddress = mirrorAddress;
    }

    public String mirrorBaseDir;

    public String getMirrorBaseDir()
    {
        return mirrorBaseDir;
    }

    public void setMirrorBaseDir(String mirrorBaseDir)
    {
        this.mirrorBaseDir = mirrorBaseDir;
    }

    public String readOnlyMirrorKey;

    public String getReadOnlyMirrorKey()
    {
        return readOnlyMirrorKey;
    }

    public void setReadOnlyMirrorKey(String readOnlyMirrorKey)
    {
        this.readOnlyMirrorKey = readOnlyMirrorKey;
    }

    public String writableMirrorKey;

    public String getWritableMirrorKey()
    {
        return writableMirrorKey;
    }

    public void setWritableMirrorKey(String writableMirrorKey)
    {
        this.writableMirrorKey = writableMirrorKey;
    }

    public short actionTypeId;

    public short getActionTypeId()
    {
        return actionTypeId;
    }

    public void setActionTypeId(short actionTypeId)
    {
        this.actionTypeId = actionTypeId;
    }

    public String remark;

    public String getRemark()
    {
        return remark;
    }

    public void setRemark(String remark)
    {
        this.remark = remark;
    }

    public String lastModifyUserId;

    public String getLastModifyUserId()
    {
        return lastModifyUserId;
    }

    public void setLastModifyUserId(String lastModifyUserId)
    {
        this.lastModifyUserId = lastModifyUserId;
    }

    public String lastModifyRoleId;

    public String getLastModifyRoleId()
    {
        return lastModifyRoleId;
    }

    public void setLastModifyRoleId(String lastModifyRoleId)
    {
        this.lastModifyRoleId = lastModifyRoleId;
    }

    /**
     **/
    @Deprecated
    public String pid;

    /**
     **/
    @Deprecated
    public String getPid()
    {
        return pid;
    }

    /**
     **/
    @Deprecated
    public void setPid(String pid)
    {
        this.pid = pid;
    }

    /**
     **/
    @Deprecated
    public String readFileScope;

    /**
     **/
    @Deprecated
    public String getReadFileScope()
    {
        return readFileScope;
    }

    /**
     **/
    @Deprecated
    public void setReadFileScope(String readFileScope)
    {
        this.readFileScope = readFileScope;
    }

    /**
     * @deprecated 使用readOnlyKey代替
     **/
    @Deprecated
    public String readFileKey;

    /**
     * @deprecated 使用readOnlyKey代替
     **/
    @Deprecated
    public String getReadFileKey()
    {
        return readFileKey;
    }

    /**
     * @deprecated 使用readOnlyKey代替
     **/
    @Deprecated
    public void setReadFileKey(String readFileKey)
    {
        this.readFileKey = readFileKey;
    }

    /**
     * @deprecated 使用writableScope代替
     **/
    @Deprecated
    public String writeFileScope;

    /**
     * @deprecated 使用writableScope代替
     **/
    @Deprecated
    public String getWriteFileScope()
    {
        return writeFileScope;
    }

    /**
     * @deprecated 使用writableScope代替
     **/
    @Deprecated
    public void setWriteFileScope(String writeFileScope)
    {
        this.writeFileScope = writeFileScope;
    }

    /**
     * @deprecated 使用writableKey代替
     **/
    @Deprecated
    public String writeFileKey;

    /**
     * @deprecated 使用writableKey代替
     **/
    @Deprecated
    public String getWriteFileKey()
    {
        return writeFileKey;
    }

    /**
     * @deprecated 使用writableKey代替
     **/
    @Deprecated
    public void setWriteFileKey(String writeFileKey)
    {
        this.writeFileKey = writeFileKey;
    }

    /**
     * @deprecated 使用path代替
     **/
    @Deprecated
    public String fullName;

    /**
     * @deprecated 使用path代替
     **/
    @Deprecated
    public String getFullName()
    {
        return fullName;
    }

    /**
     * @deprecated 使用path代替
     **/
    @Deprecated
    public void setFullName(String fullName)
    {
        this.fullName = fullName;
    }

    /**
     **/
    @Deprecated
    public String parentPath;

    /**
     **/
    @Deprecated
    public String getParentPath()
    {
        return parentPath;
    }

    /**
     **/
    @Deprecated
    public void setParentPath(String parentPath)
    {
        this.parentPath = parentPath;
    }

    /**
     **/
    @Deprecated
    public short parentTypeId;

    /**
     **/
    @Deprecated
    public short getParentTypeId()
    {
        return parentTypeId;
    }

    /**
     **/
    @Deprecated
    public void setParentTypeId(short parentTypeId)
    {
        this.parentTypeId = parentTypeId;
    }

    /**
     **/
    @Deprecated
    public String parentStoragePath;

    /**
     **/
    @Deprecated
    public String getParentStoragePath()
    {
        return parentStoragePath;
    }

    /**
     **/
    @Deprecated
    public void setParentStoragePath(String parentStoragePath)
    {
        this.parentStoragePath = parentStoragePath;
    }

    public UpdateNodeDTO()
    {
        this.path = "";
        this.ownerUserId = "";
        this.taskId = "";
        this.mainFileId = "";
        this.serverAddress = "";
        this.baseDir = "";
        this.fileVersion = "";
        this.fileChecksum = "";
        this.majorTypeId = "";
        this.readOnlyKey = "";
        this.writableKey = "";
        this.mirrorAddress = "";
        this.mirrorBaseDir = "";
        this.readOnlyMirrorKey = "";
        this.writableMirrorKey = "";
        this.remark = "";
        this.lastModifyUserId = "";
        this.lastModifyRoleId = "";
        this.pid = "";
        this.readFileScope = "";
        this.readFileKey = "";
        this.writeFileScope = "";
        this.writeFileKey = "";
        this.fullName = "";
        this.parentPath = "";
        this.parentStoragePath = "";
    }

    public UpdateNodeDTO(short typeId, String path, String ownerUserId, String taskId, String mainFileId, short serverTypeId, String serverAddress, String baseDir, short fileTypeId, long fileLength, String fileVersion, String fileChecksum, String majorTypeId, String readOnlyKey, String writableKey, short mirrorTypeId, String mirrorAddress, String mirrorBaseDir, String readOnlyMirrorKey, String writableMirrorKey, short actionTypeId, String remark, String lastModifyUserId, String lastModifyRoleId, String pid, String readFileScope, String readFileKey, String writeFileScope, String writeFileKey, String fullName, String parentPath, short parentTypeId, String parentStoragePath)
    {
        this.typeId = typeId;
        this.path = path;
        this.ownerUserId = ownerUserId;
        this.taskId = taskId;
        this.mainFileId = mainFileId;
        this.serverTypeId = serverTypeId;
        this.serverAddress = serverAddress;
        this.baseDir = baseDir;
        this.fileTypeId = fileTypeId;
        this.fileLength = fileLength;
        this.fileVersion = fileVersion;
        this.fileChecksum = fileChecksum;
        this.majorTypeId = majorTypeId;
        this.readOnlyKey = readOnlyKey;
        this.writableKey = writableKey;
        this.mirrorTypeId = mirrorTypeId;
        this.mirrorAddress = mirrorAddress;
        this.mirrorBaseDir = mirrorBaseDir;
        this.readOnlyMirrorKey = readOnlyMirrorKey;
        this.writableMirrorKey = writableMirrorKey;
        this.actionTypeId = actionTypeId;
        this.remark = remark;
        this.lastModifyUserId = lastModifyUserId;
        this.lastModifyRoleId = lastModifyRoleId;
        this.pid = pid;
        this.readFileScope = readFileScope;
        this.readFileKey = readFileKey;
        this.writeFileScope = writeFileScope;
        this.writeFileKey = writeFileKey;
        this.fullName = fullName;
        this.parentPath = parentPath;
        this.parentTypeId = parentTypeId;
        this.parentStoragePath = parentStoragePath;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        UpdateNodeDTO r = null;
        if(rhs instanceof UpdateNodeDTO)
        {
            r = (UpdateNodeDTO)rhs;
        }

        if(r != null)
        {
            if(this.typeId != r.typeId)
            {
                return false;
            }
            if(this.path != r.path)
            {
                if(this.path == null || r.path == null || !this.path.equals(r.path))
                {
                    return false;
                }
            }
            if(this.ownerUserId != r.ownerUserId)
            {
                if(this.ownerUserId == null || r.ownerUserId == null || !this.ownerUserId.equals(r.ownerUserId))
                {
                    return false;
                }
            }
            if(this.taskId != r.taskId)
            {
                if(this.taskId == null || r.taskId == null || !this.taskId.equals(r.taskId))
                {
                    return false;
                }
            }
            if(this.mainFileId != r.mainFileId)
            {
                if(this.mainFileId == null || r.mainFileId == null || !this.mainFileId.equals(r.mainFileId))
                {
                    return false;
                }
            }
            if(this.serverTypeId != r.serverTypeId)
            {
                return false;
            }
            if(this.serverAddress != r.serverAddress)
            {
                if(this.serverAddress == null || r.serverAddress == null || !this.serverAddress.equals(r.serverAddress))
                {
                    return false;
                }
            }
            if(this.baseDir != r.baseDir)
            {
                if(this.baseDir == null || r.baseDir == null || !this.baseDir.equals(r.baseDir))
                {
                    return false;
                }
            }
            if(this.fileTypeId != r.fileTypeId)
            {
                return false;
            }
            if(this.fileLength != r.fileLength)
            {
                return false;
            }
            if(this.fileVersion != r.fileVersion)
            {
                if(this.fileVersion == null || r.fileVersion == null || !this.fileVersion.equals(r.fileVersion))
                {
                    return false;
                }
            }
            if(this.fileChecksum != r.fileChecksum)
            {
                if(this.fileChecksum == null || r.fileChecksum == null || !this.fileChecksum.equals(r.fileChecksum))
                {
                    return false;
                }
            }
            if(this.majorTypeId != r.majorTypeId)
            {
                if(this.majorTypeId == null || r.majorTypeId == null || !this.majorTypeId.equals(r.majorTypeId))
                {
                    return false;
                }
            }
            if(this.readOnlyKey != r.readOnlyKey)
            {
                if(this.readOnlyKey == null || r.readOnlyKey == null || !this.readOnlyKey.equals(r.readOnlyKey))
                {
                    return false;
                }
            }
            if(this.writableKey != r.writableKey)
            {
                if(this.writableKey == null || r.writableKey == null || !this.writableKey.equals(r.writableKey))
                {
                    return false;
                }
            }
            if(this.mirrorTypeId != r.mirrorTypeId)
            {
                return false;
            }
            if(this.mirrorAddress != r.mirrorAddress)
            {
                if(this.mirrorAddress == null || r.mirrorAddress == null || !this.mirrorAddress.equals(r.mirrorAddress))
                {
                    return false;
                }
            }
            if(this.mirrorBaseDir != r.mirrorBaseDir)
            {
                if(this.mirrorBaseDir == null || r.mirrorBaseDir == null || !this.mirrorBaseDir.equals(r.mirrorBaseDir))
                {
                    return false;
                }
            }
            if(this.readOnlyMirrorKey != r.readOnlyMirrorKey)
            {
                if(this.readOnlyMirrorKey == null || r.readOnlyMirrorKey == null || !this.readOnlyMirrorKey.equals(r.readOnlyMirrorKey))
                {
                    return false;
                }
            }
            if(this.writableMirrorKey != r.writableMirrorKey)
            {
                if(this.writableMirrorKey == null || r.writableMirrorKey == null || !this.writableMirrorKey.equals(r.writableMirrorKey))
                {
                    return false;
                }
            }
            if(this.actionTypeId != r.actionTypeId)
            {
                return false;
            }
            if(this.remark != r.remark)
            {
                if(this.remark == null || r.remark == null || !this.remark.equals(r.remark))
                {
                    return false;
                }
            }
            if(this.lastModifyUserId != r.lastModifyUserId)
            {
                if(this.lastModifyUserId == null || r.lastModifyUserId == null || !this.lastModifyUserId.equals(r.lastModifyUserId))
                {
                    return false;
                }
            }
            if(this.lastModifyRoleId != r.lastModifyRoleId)
            {
                if(this.lastModifyRoleId == null || r.lastModifyRoleId == null || !this.lastModifyRoleId.equals(r.lastModifyRoleId))
                {
                    return false;
                }
            }
            if(this.pid != r.pid)
            {
                if(this.pid == null || r.pid == null || !this.pid.equals(r.pid))
                {
                    return false;
                }
            }
            if(this.readFileScope != r.readFileScope)
            {
                if(this.readFileScope == null || r.readFileScope == null || !this.readFileScope.equals(r.readFileScope))
                {
                    return false;
                }
            }
            if(this.readFileKey != r.readFileKey)
            {
                if(this.readFileKey == null || r.readFileKey == null || !this.readFileKey.equals(r.readFileKey))
                {
                    return false;
                }
            }
            if(this.writeFileScope != r.writeFileScope)
            {
                if(this.writeFileScope == null || r.writeFileScope == null || !this.writeFileScope.equals(r.writeFileScope))
                {
                    return false;
                }
            }
            if(this.writeFileKey != r.writeFileKey)
            {
                if(this.writeFileKey == null || r.writeFileKey == null || !this.writeFileKey.equals(r.writeFileKey))
                {
                    return false;
                }
            }
            if(this.fullName != r.fullName)
            {
                if(this.fullName == null || r.fullName == null || !this.fullName.equals(r.fullName))
                {
                    return false;
                }
            }
            if(this.parentPath != r.parentPath)
            {
                if(this.parentPath == null || r.parentPath == null || !this.parentPath.equals(r.parentPath))
                {
                    return false;
                }
            }
            if(this.parentTypeId != r.parentTypeId)
            {
                return false;
            }
            if(this.parentStoragePath != r.parentStoragePath)
            {
                if(this.parentStoragePath == null || r.parentStoragePath == null || !this.parentStoragePath.equals(r.parentStoragePath))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::zeroc::UpdateNodeDTO");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, typeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, path);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, ownerUserId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, taskId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, mainFileId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, serverTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, serverAddress);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, baseDir);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileLength);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileVersion);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileChecksum);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, majorTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, readOnlyKey);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, writableKey);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, mirrorTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, mirrorAddress);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, mirrorBaseDir);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, readOnlyMirrorKey);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, writableMirrorKey);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, actionTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, remark);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, lastModifyUserId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, lastModifyRoleId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, pid);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, readFileScope);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, readFileKey);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, writeFileScope);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, writeFileKey);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fullName);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, parentPath);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, parentTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, parentStoragePath);
        return h_;
    }

    public UpdateNodeDTO clone()
    {
        UpdateNodeDTO c = null;
        try
        {
            c = (UpdateNodeDTO)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeShort(this.typeId);
        ostr.writeString(this.path);
        ostr.writeString(this.ownerUserId);
        ostr.writeString(this.taskId);
        ostr.writeString(this.mainFileId);
        ostr.writeShort(this.serverTypeId);
        ostr.writeString(this.serverAddress);
        ostr.writeString(this.baseDir);
        ostr.writeShort(this.fileTypeId);
        ostr.writeLong(this.fileLength);
        ostr.writeString(this.fileVersion);
        ostr.writeString(this.fileChecksum);
        ostr.writeString(this.majorTypeId);
        ostr.writeString(this.readOnlyKey);
        ostr.writeString(this.writableKey);
        ostr.writeShort(this.mirrorTypeId);
        ostr.writeString(this.mirrorAddress);
        ostr.writeString(this.mirrorBaseDir);
        ostr.writeString(this.readOnlyMirrorKey);
        ostr.writeString(this.writableMirrorKey);
        ostr.writeShort(this.actionTypeId);
        ostr.writeString(this.remark);
        ostr.writeString(this.lastModifyUserId);
        ostr.writeString(this.lastModifyRoleId);
        ostr.writeString(this.pid);
        ostr.writeString(this.readFileScope);
        ostr.writeString(this.readFileKey);
        ostr.writeString(this.writeFileScope);
        ostr.writeString(this.writeFileKey);
        ostr.writeString(this.fullName);
        ostr.writeString(this.parentPath);
        ostr.writeShort(this.parentTypeId);
        ostr.writeString(this.parentStoragePath);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.typeId = istr.readShort();
        this.path = istr.readString();
        this.ownerUserId = istr.readString();
        this.taskId = istr.readString();
        this.mainFileId = istr.readString();
        this.serverTypeId = istr.readShort();
        this.serverAddress = istr.readString();
        this.baseDir = istr.readString();
        this.fileTypeId = istr.readShort();
        this.fileLength = istr.readLong();
        this.fileVersion = istr.readString();
        this.fileChecksum = istr.readString();
        this.majorTypeId = istr.readString();
        this.readOnlyKey = istr.readString();
        this.writableKey = istr.readString();
        this.mirrorTypeId = istr.readShort();
        this.mirrorAddress = istr.readString();
        this.mirrorBaseDir = istr.readString();
        this.readOnlyMirrorKey = istr.readString();
        this.writableMirrorKey = istr.readString();
        this.actionTypeId = istr.readShort();
        this.remark = istr.readString();
        this.lastModifyUserId = istr.readString();
        this.lastModifyRoleId = istr.readString();
        this.pid = istr.readString();
        this.readFileScope = istr.readString();
        this.readFileKey = istr.readString();
        this.writeFileScope = istr.readString();
        this.writeFileKey = istr.readString();
        this.fullName = istr.readString();
        this.parentPath = istr.readString();
        this.parentTypeId = istr.readShort();
        this.parentStoragePath = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, UpdateNodeDTO v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public UpdateNodeDTO ice_read(com.zeroc.Ice.InputStream istr)
    {
        UpdateNodeDTO v = new UpdateNodeDTO();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<UpdateNodeDTO> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, UpdateNodeDTO v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<UpdateNodeDTO> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(UpdateNodeDTO.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final UpdateNodeDTO _nullMarshalValue = new UpdateNodeDTO();

    public static final long serialVersionUID = -1309810214L;
}
