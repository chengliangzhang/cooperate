// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `StorageData.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.Storage.zeroc;

public class UpdateNodeDTO implements java.lang.Cloneable,
                                      java.io.Serializable
{
    public String typeId;

    public String getTypeId()
    {
        return typeId;
    }

    public void setTypeId(String typeId)
    {
        this.typeId = typeId;
    }

    public String path;

    public String getPath()
    {
        return path;
    }

    public void setPath(String path)
    {
        this.path = path;
    }

    public String ownerUserId;

    public String getOwnerUserId()
    {
        return ownerUserId;
    }

    public void setOwnerUserId(String ownerUserId)
    {
        this.ownerUserId = ownerUserId;
    }

    public String taskId;

    public String getTaskId()
    {
        return taskId;
    }

    public void setTaskId(String taskId)
    {
        this.taskId = taskId;
    }

    public String projectId;

    public String getProjectId()
    {
        return projectId;
    }

    public void setProjectId(String projectId)
    {
        this.projectId = projectId;
    }

    public String mainFileId;

    public String getMainFileId()
    {
        return mainFileId;
    }

    public void setMainFileId(String mainFileId)
    {
        this.mainFileId = mainFileId;
    }

    public short serverTypeId;

    public short getServerTypeId()
    {
        return serverTypeId;
    }

    public void setServerTypeId(short serverTypeId)
    {
        this.serverTypeId = serverTypeId;
    }

    public String serverAddress;

    public String getServerAddress()
    {
        return serverAddress;
    }

    public void setServerAddress(String serverAddress)
    {
        this.serverAddress = serverAddress;
    }

    public String baseDir;

    public String getBaseDir()
    {
        return baseDir;
    }

    public void setBaseDir(String baseDir)
    {
        this.baseDir = baseDir;
    }

    public short fileTypeId;

    public short getFileTypeId()
    {
        return fileTypeId;
    }

    public void setFileTypeId(short fileTypeId)
    {
        this.fileTypeId = fileTypeId;
    }

    public long fileLength;

    public long getFileLength()
    {
        return fileLength;
    }

    public void setFileLength(long fileLength)
    {
        this.fileLength = fileLength;
    }

    public String fileVersion;

    public String getFileVersion()
    {
        return fileVersion;
    }

    public void setFileVersion(String fileVersion)
    {
        this.fileVersion = fileVersion;
    }

    public String fileMd5;

    public String getFileMd5()
    {
        return fileMd5;
    }

    public void setFileMd5(String fileMd5)
    {
        this.fileMd5 = fileMd5;
    }

    public String majorTypeId;

    public String getMajorTypeId()
    {
        return majorTypeId;
    }

    public void setMajorTypeId(String majorTypeId)
    {
        this.majorTypeId = majorTypeId;
    }

    public String readOnlyKey;

    public String getReadOnlyKey()
    {
        return readOnlyKey;
    }

    public void setReadOnlyKey(String readOnlyKey)
    {
        this.readOnlyKey = readOnlyKey;
    }

    /**
     **/
    @Deprecated
    public long readOnlyFileLength;

    /**
     **/
    @Deprecated
    public long getReadOnlyFileLength()
    {
        return readOnlyFileLength;
    }

    /**
     **/
    @Deprecated
    public void setReadOnlyFileLength(long readOnlyFileLength)
    {
        this.readOnlyFileLength = readOnlyFileLength;
    }

    /**
     **/
    @Deprecated
    public String readOnlyFileMd5;

    /**
     **/
    @Deprecated
    public String getReadOnlyFileMd5()
    {
        return readOnlyFileMd5;
    }

    /**
     **/
    @Deprecated
    public void setReadOnlyFileMd5(String readOnlyFileMd5)
    {
        this.readOnlyFileMd5 = readOnlyFileMd5;
    }

    public String writableKey;

    public String getWritableKey()
    {
        return writableKey;
    }

    public void setWritableKey(String writableKey)
    {
        this.writableKey = writableKey;
    }

    /**
     **/
    @Deprecated
    public long writableFileLength;

    /**
     **/
    @Deprecated
    public long getWritableFileLength()
    {
        return writableFileLength;
    }

    /**
     **/
    @Deprecated
    public void setWritableFileLength(long writableFileLength)
    {
        this.writableFileLength = writableFileLength;
    }

    /**
     **/
    @Deprecated
    public String writableFileMd5;

    /**
     **/
    @Deprecated
    public String getWritableFileMd5()
    {
        return writableFileMd5;
    }

    /**
     **/
    @Deprecated
    public void setWritableFileMd5(String writableFileMd5)
    {
        this.writableFileMd5 = writableFileMd5;
    }

    public boolean isPassDesign;

    public boolean getIsPassDesign()
    {
        return isPassDesign;
    }

    public void setIsPassDesign(boolean isPassDesign)
    {
        this.isPassDesign = isPassDesign;
    }

    public boolean isIsPassDesign()
    {
        return isPassDesign;
    }

    public boolean isPassCheck;

    public boolean getIsPassCheck()
    {
        return isPassCheck;
    }

    public void setIsPassCheck(boolean isPassCheck)
    {
        this.isPassCheck = isPassCheck;
    }

    public boolean isIsPassCheck()
    {
        return isPassCheck;
    }

    public boolean isPassAudit;

    public boolean getIsPassAudit()
    {
        return isPassAudit;
    }

    public void setIsPassAudit(boolean isPassAudit)
    {
        this.isPassAudit = isPassAudit;
    }

    public boolean isIsPassAudit()
    {
        return isPassAudit;
    }

    public short mirrorTypeId;

    public short getMirrorTypeId()
    {
        return mirrorTypeId;
    }

    public void setMirrorTypeId(short mirrorTypeId)
    {
        this.mirrorTypeId = mirrorTypeId;
    }

    public String mirrorAddress;

    public String getMirrorAddress()
    {
        return mirrorAddress;
    }

    public void setMirrorAddress(String mirrorAddress)
    {
        this.mirrorAddress = mirrorAddress;
    }

    public String mirrorBaseDir;

    public String getMirrorBaseDir()
    {
        return mirrorBaseDir;
    }

    public void setMirrorBaseDir(String mirrorBaseDir)
    {
        this.mirrorBaseDir = mirrorBaseDir;
    }

    public String readOnlyMirrorKey;

    public String getReadOnlyMirrorKey()
    {
        return readOnlyMirrorKey;
    }

    public void setReadOnlyMirrorKey(String readOnlyMirrorKey)
    {
        this.readOnlyMirrorKey = readOnlyMirrorKey;
    }

    public String writableMirrorKey;

    public String getWritableMirrorKey()
    {
        return writableMirrorKey;
    }

    public void setWritableMirrorKey(String writableMirrorKey)
    {
        this.writableMirrorKey = writableMirrorKey;
    }

    public short actionTypeId;

    public short getActionTypeId()
    {
        return actionTypeId;
    }

    public void setActionTypeId(short actionTypeId)
    {
        this.actionTypeId = actionTypeId;
    }

    public String remark;

    public String getRemark()
    {
        return remark;
    }

    public void setRemark(String remark)
    {
        this.remark = remark;
    }

    public String lastModifyUserId;

    public String getLastModifyUserId()
    {
        return lastModifyUserId;
    }

    public void setLastModifyUserId(String lastModifyUserId)
    {
        this.lastModifyUserId = lastModifyUserId;
    }

    public String lastModifyRoleId;

    public String getLastModifyRoleId()
    {
        return lastModifyRoleId;
    }

    public void setLastModifyRoleId(String lastModifyRoleId)
    {
        this.lastModifyRoleId = lastModifyRoleId;
    }

    public UpdateNodeDTO()
    {
        this.typeId = "";
        this.path = "";
        this.ownerUserId = "";
        this.taskId = "";
        this.projectId = "";
        this.mainFileId = "";
        this.serverAddress = "";
        this.baseDir = "";
        this.fileVersion = "";
        this.fileMd5 = "";
        this.majorTypeId = "";
        this.readOnlyKey = "";
        this.readOnlyFileMd5 = "";
        this.writableKey = "";
        this.writableFileMd5 = "";
        this.mirrorAddress = "";
        this.mirrorBaseDir = "";
        this.readOnlyMirrorKey = "";
        this.writableMirrorKey = "";
        this.remark = "";
        this.lastModifyUserId = "";
        this.lastModifyRoleId = "";
    }

    public UpdateNodeDTO(String typeId, String path, String ownerUserId, String taskId, String projectId, String mainFileId, short serverTypeId, String serverAddress, String baseDir, short fileTypeId, long fileLength, String fileVersion, String fileMd5, String majorTypeId, String readOnlyKey, long readOnlyFileLength, String readOnlyFileMd5, String writableKey, long writableFileLength, String writableFileMd5, boolean isPassDesign, boolean isPassCheck, boolean isPassAudit, short mirrorTypeId, String mirrorAddress, String mirrorBaseDir, String readOnlyMirrorKey, String writableMirrorKey, short actionTypeId, String remark, String lastModifyUserId, String lastModifyRoleId)
    {
        this.typeId = typeId;
        this.path = path;
        this.ownerUserId = ownerUserId;
        this.taskId = taskId;
        this.projectId = projectId;
        this.mainFileId = mainFileId;
        this.serverTypeId = serverTypeId;
        this.serverAddress = serverAddress;
        this.baseDir = baseDir;
        this.fileTypeId = fileTypeId;
        this.fileLength = fileLength;
        this.fileVersion = fileVersion;
        this.fileMd5 = fileMd5;
        this.majorTypeId = majorTypeId;
        this.readOnlyKey = readOnlyKey;
        this.readOnlyFileLength = readOnlyFileLength;
        this.readOnlyFileMd5 = readOnlyFileMd5;
        this.writableKey = writableKey;
        this.writableFileLength = writableFileLength;
        this.writableFileMd5 = writableFileMd5;
        this.isPassDesign = isPassDesign;
        this.isPassCheck = isPassCheck;
        this.isPassAudit = isPassAudit;
        this.mirrorTypeId = mirrorTypeId;
        this.mirrorAddress = mirrorAddress;
        this.mirrorBaseDir = mirrorBaseDir;
        this.readOnlyMirrorKey = readOnlyMirrorKey;
        this.writableMirrorKey = writableMirrorKey;
        this.actionTypeId = actionTypeId;
        this.remark = remark;
        this.lastModifyUserId = lastModifyUserId;
        this.lastModifyRoleId = lastModifyRoleId;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        UpdateNodeDTO r = null;
        if(rhs instanceof UpdateNodeDTO)
        {
            r = (UpdateNodeDTO)rhs;
        }

        if(r != null)
        {
            if(this.typeId != r.typeId)
            {
                if(this.typeId == null || r.typeId == null || !this.typeId.equals(r.typeId))
                {
                    return false;
                }
            }
            if(this.path != r.path)
            {
                if(this.path == null || r.path == null || !this.path.equals(r.path))
                {
                    return false;
                }
            }
            if(this.ownerUserId != r.ownerUserId)
            {
                if(this.ownerUserId == null || r.ownerUserId == null || !this.ownerUserId.equals(r.ownerUserId))
                {
                    return false;
                }
            }
            if(this.taskId != r.taskId)
            {
                if(this.taskId == null || r.taskId == null || !this.taskId.equals(r.taskId))
                {
                    return false;
                }
            }
            if(this.projectId != r.projectId)
            {
                if(this.projectId == null || r.projectId == null || !this.projectId.equals(r.projectId))
                {
                    return false;
                }
            }
            if(this.mainFileId != r.mainFileId)
            {
                if(this.mainFileId == null || r.mainFileId == null || !this.mainFileId.equals(r.mainFileId))
                {
                    return false;
                }
            }
            if(this.serverTypeId != r.serverTypeId)
            {
                return false;
            }
            if(this.serverAddress != r.serverAddress)
            {
                if(this.serverAddress == null || r.serverAddress == null || !this.serverAddress.equals(r.serverAddress))
                {
                    return false;
                }
            }
            if(this.baseDir != r.baseDir)
            {
                if(this.baseDir == null || r.baseDir == null || !this.baseDir.equals(r.baseDir))
                {
                    return false;
                }
            }
            if(this.fileTypeId != r.fileTypeId)
            {
                return false;
            }
            if(this.fileLength != r.fileLength)
            {
                return false;
            }
            if(this.fileVersion != r.fileVersion)
            {
                if(this.fileVersion == null || r.fileVersion == null || !this.fileVersion.equals(r.fileVersion))
                {
                    return false;
                }
            }
            if(this.fileMd5 != r.fileMd5)
            {
                if(this.fileMd5 == null || r.fileMd5 == null || !this.fileMd5.equals(r.fileMd5))
                {
                    return false;
                }
            }
            if(this.majorTypeId != r.majorTypeId)
            {
                if(this.majorTypeId == null || r.majorTypeId == null || !this.majorTypeId.equals(r.majorTypeId))
                {
                    return false;
                }
            }
            if(this.readOnlyKey != r.readOnlyKey)
            {
                if(this.readOnlyKey == null || r.readOnlyKey == null || !this.readOnlyKey.equals(r.readOnlyKey))
                {
                    return false;
                }
            }
            if(this.readOnlyFileLength != r.readOnlyFileLength)
            {
                return false;
            }
            if(this.readOnlyFileMd5 != r.readOnlyFileMd5)
            {
                if(this.readOnlyFileMd5 == null || r.readOnlyFileMd5 == null || !this.readOnlyFileMd5.equals(r.readOnlyFileMd5))
                {
                    return false;
                }
            }
            if(this.writableKey != r.writableKey)
            {
                if(this.writableKey == null || r.writableKey == null || !this.writableKey.equals(r.writableKey))
                {
                    return false;
                }
            }
            if(this.writableFileLength != r.writableFileLength)
            {
                return false;
            }
            if(this.writableFileMd5 != r.writableFileMd5)
            {
                if(this.writableFileMd5 == null || r.writableFileMd5 == null || !this.writableFileMd5.equals(r.writableFileMd5))
                {
                    return false;
                }
            }
            if(this.isPassDesign != r.isPassDesign)
            {
                return false;
            }
            if(this.isPassCheck != r.isPassCheck)
            {
                return false;
            }
            if(this.isPassAudit != r.isPassAudit)
            {
                return false;
            }
            if(this.mirrorTypeId != r.mirrorTypeId)
            {
                return false;
            }
            if(this.mirrorAddress != r.mirrorAddress)
            {
                if(this.mirrorAddress == null || r.mirrorAddress == null || !this.mirrorAddress.equals(r.mirrorAddress))
                {
                    return false;
                }
            }
            if(this.mirrorBaseDir != r.mirrorBaseDir)
            {
                if(this.mirrorBaseDir == null || r.mirrorBaseDir == null || !this.mirrorBaseDir.equals(r.mirrorBaseDir))
                {
                    return false;
                }
            }
            if(this.readOnlyMirrorKey != r.readOnlyMirrorKey)
            {
                if(this.readOnlyMirrorKey == null || r.readOnlyMirrorKey == null || !this.readOnlyMirrorKey.equals(r.readOnlyMirrorKey))
                {
                    return false;
                }
            }
            if(this.writableMirrorKey != r.writableMirrorKey)
            {
                if(this.writableMirrorKey == null || r.writableMirrorKey == null || !this.writableMirrorKey.equals(r.writableMirrorKey))
                {
                    return false;
                }
            }
            if(this.actionTypeId != r.actionTypeId)
            {
                return false;
            }
            if(this.remark != r.remark)
            {
                if(this.remark == null || r.remark == null || !this.remark.equals(r.remark))
                {
                    return false;
                }
            }
            if(this.lastModifyUserId != r.lastModifyUserId)
            {
                if(this.lastModifyUserId == null || r.lastModifyUserId == null || !this.lastModifyUserId.equals(r.lastModifyUserId))
                {
                    return false;
                }
            }
            if(this.lastModifyRoleId != r.lastModifyRoleId)
            {
                if(this.lastModifyRoleId == null || r.lastModifyRoleId == null || !this.lastModifyRoleId.equals(r.lastModifyRoleId))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::zeroc::UpdateNodeDTO");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, typeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, path);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, ownerUserId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, taskId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, projectId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, mainFileId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, serverTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, serverAddress);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, baseDir);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileLength);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileVersion);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileMd5);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, majorTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, readOnlyKey);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, readOnlyFileLength);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, readOnlyFileMd5);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, writableKey);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, writableFileLength);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, writableFileMd5);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isPassDesign);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isPassCheck);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isPassAudit);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, mirrorTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, mirrorAddress);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, mirrorBaseDir);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, readOnlyMirrorKey);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, writableMirrorKey);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, actionTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, remark);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, lastModifyUserId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, lastModifyRoleId);
        return h_;
    }

    public UpdateNodeDTO clone()
    {
        UpdateNodeDTO c = null;
        try
        {
            c = (UpdateNodeDTO)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.typeId);
        ostr.writeString(this.path);
        ostr.writeString(this.ownerUserId);
        ostr.writeString(this.taskId);
        ostr.writeString(this.projectId);
        ostr.writeString(this.mainFileId);
        ostr.writeShort(this.serverTypeId);
        ostr.writeString(this.serverAddress);
        ostr.writeString(this.baseDir);
        ostr.writeShort(this.fileTypeId);
        ostr.writeLong(this.fileLength);
        ostr.writeString(this.fileVersion);
        ostr.writeString(this.fileMd5);
        ostr.writeString(this.majorTypeId);
        ostr.writeString(this.readOnlyKey);
        ostr.writeLong(this.readOnlyFileLength);
        ostr.writeString(this.readOnlyFileMd5);
        ostr.writeString(this.writableKey);
        ostr.writeLong(this.writableFileLength);
        ostr.writeString(this.writableFileMd5);
        ostr.writeBool(this.isPassDesign);
        ostr.writeBool(this.isPassCheck);
        ostr.writeBool(this.isPassAudit);
        ostr.writeShort(this.mirrorTypeId);
        ostr.writeString(this.mirrorAddress);
        ostr.writeString(this.mirrorBaseDir);
        ostr.writeString(this.readOnlyMirrorKey);
        ostr.writeString(this.writableMirrorKey);
        ostr.writeShort(this.actionTypeId);
        ostr.writeString(this.remark);
        ostr.writeString(this.lastModifyUserId);
        ostr.writeString(this.lastModifyRoleId);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.typeId = istr.readString();
        this.path = istr.readString();
        this.ownerUserId = istr.readString();
        this.taskId = istr.readString();
        this.projectId = istr.readString();
        this.mainFileId = istr.readString();
        this.serverTypeId = istr.readShort();
        this.serverAddress = istr.readString();
        this.baseDir = istr.readString();
        this.fileTypeId = istr.readShort();
        this.fileLength = istr.readLong();
        this.fileVersion = istr.readString();
        this.fileMd5 = istr.readString();
        this.majorTypeId = istr.readString();
        this.readOnlyKey = istr.readString();
        this.readOnlyFileLength = istr.readLong();
        this.readOnlyFileMd5 = istr.readString();
        this.writableKey = istr.readString();
        this.writableFileLength = istr.readLong();
        this.writableFileMd5 = istr.readString();
        this.isPassDesign = istr.readBool();
        this.isPassCheck = istr.readBool();
        this.isPassAudit = istr.readBool();
        this.mirrorTypeId = istr.readShort();
        this.mirrorAddress = istr.readString();
        this.mirrorBaseDir = istr.readString();
        this.readOnlyMirrorKey = istr.readString();
        this.writableMirrorKey = istr.readString();
        this.actionTypeId = istr.readShort();
        this.remark = istr.readString();
        this.lastModifyUserId = istr.readString();
        this.lastModifyRoleId = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, UpdateNodeDTO v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public UpdateNodeDTO ice_read(com.zeroc.Ice.InputStream istr)
    {
        UpdateNodeDTO v = new UpdateNodeDTO();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<UpdateNodeDTO> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, UpdateNodeDTO v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<UpdateNodeDTO> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(UpdateNodeDTO.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final UpdateNodeDTO _nullMarshalValue = new UpdateNodeDTO();

    public static final long serialVersionUID = -1361736609L;
}
