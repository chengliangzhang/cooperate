// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `StorageData.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.Storage.zeroc;

public class UpdateNodeDTO implements java.lang.Cloneable,
                                      java.io.Serializable
{
    public short typeId;

    public short getTypeId()
    {
        return typeId;
    }

    public void setTypeId(short typeId)
    {
        this.typeId = typeId;
    }

    public String pid;

    public String getPid()
    {
        return pid;
    }

    public void setPid(String pid)
    {
        this.pid = pid;
    }

    public String fullName;

    public String getFullName()
    {
        return fullName;
    }

    public void setFullName(String fullName)
    {
        this.fullName = fullName;
    }

    public long fileLength;

    public long getFileLength()
    {
        return fileLength;
    }

    public void setFileLength(long fileLength)
    {
        this.fileLength = fileLength;
    }

    public String ownerUserId;

    public String getOwnerUserId()
    {
        return ownerUserId;
    }

    public void setOwnerUserId(String ownerUserId)
    {
        this.ownerUserId = ownerUserId;
    }

    public String taskId;

    public String getTaskId()
    {
        return taskId;
    }

    public void setTaskId(String taskId)
    {
        this.taskId = taskId;
    }

    public String parentPath;

    public String getParentPath()
    {
        return parentPath;
    }

    public void setParentPath(String parentPath)
    {
        this.parentPath = parentPath;
    }

    public short parentTypeId;

    public short getParentTypeId()
    {
        return parentTypeId;
    }

    public void setParentTypeId(short parentTypeId)
    {
        this.parentTypeId = parentTypeId;
    }

    public String parentStoragePath;

    public String getParentStoragePath()
    {
        return parentStoragePath;
    }

    public void setParentStoragePath(String parentStoragePath)
    {
        this.parentStoragePath = parentStoragePath;
    }

    public String mainFileId;

    public String getMainFileId()
    {
        return mainFileId;
    }

    public void setMainFileId(String mainFileId)
    {
        this.mainFileId = mainFileId;
    }

    public short fileTypeId;

    public short getFileTypeId()
    {
        return fileTypeId;
    }

    public void setFileTypeId(short fileTypeId)
    {
        this.fileTypeId = fileTypeId;
    }

    public String fileVersion;

    public String getFileVersion()
    {
        return fileVersion;
    }

    public void setFileVersion(String fileVersion)
    {
        this.fileVersion = fileVersion;
    }

    public String fileChecksum;

    public String getFileChecksum()
    {
        return fileChecksum;
    }

    public void setFileChecksum(String fileChecksum)
    {
        this.fileChecksum = fileChecksum;
    }

    public String majorId;

    public String getMajorId()
    {
        return majorId;
    }

    public void setMajorId(String majorId)
    {
        this.majorId = majorId;
    }

    public String readFileScope;

    public String getReadFileScope()
    {
        return readFileScope;
    }

    public void setReadFileScope(String readFileScope)
    {
        this.readFileScope = readFileScope;
    }

    public String readFileKey;

    public String getReadFileKey()
    {
        return readFileKey;
    }

    public void setReadFileKey(String readFileKey)
    {
        this.readFileKey = readFileKey;
    }

    public String writeFileScope;

    public String getWriteFileScope()
    {
        return writeFileScope;
    }

    public void setWriteFileScope(String writeFileScope)
    {
        this.writeFileScope = writeFileScope;
    }

    public String writeFileKey;

    public String getWriteFileKey()
    {
        return writeFileKey;
    }

    public void setWriteFileKey(String writeFileKey)
    {
        this.writeFileKey = writeFileKey;
    }

    public short actionTypeId;

    public short getActionTypeId()
    {
        return actionTypeId;
    }

    public void setActionTypeId(short actionTypeId)
    {
        this.actionTypeId = actionTypeId;
    }

    public String remark;

    public String getRemark()
    {
        return remark;
    }

    public void setRemark(String remark)
    {
        this.remark = remark;
    }

    public short serverTypeId;

    public short getServerTypeId()
    {
        return serverTypeId;
    }

    public void setServerTypeId(short serverTypeId)
    {
        this.serverTypeId = serverTypeId;
    }

    public String serverAddress;

    public String getServerAddress()
    {
        return serverAddress;
    }

    public void setServerAddress(String serverAddress)
    {
        this.serverAddress = serverAddress;
    }

    public UpdateNodeDTO()
    {
        this.pid = "";
        this.fullName = "";
        this.ownerUserId = "";
        this.taskId = "";
        this.parentPath = "";
        this.parentStoragePath = "";
        this.mainFileId = "";
        this.fileVersion = "";
        this.fileChecksum = "";
        this.majorId = "";
        this.readFileScope = "";
        this.readFileKey = "";
        this.writeFileScope = "";
        this.writeFileKey = "";
        this.remark = "";
        this.serverAddress = "";
    }

    public UpdateNodeDTO(short typeId, String pid, String fullName, long fileLength, String ownerUserId, String taskId, String parentPath, short parentTypeId, String parentStoragePath, String mainFileId, short fileTypeId, String fileVersion, String fileChecksum, String majorId, String readFileScope, String readFileKey, String writeFileScope, String writeFileKey, short actionTypeId, String remark, short serverTypeId, String serverAddress)
    {
        this.typeId = typeId;
        this.pid = pid;
        this.fullName = fullName;
        this.fileLength = fileLength;
        this.ownerUserId = ownerUserId;
        this.taskId = taskId;
        this.parentPath = parentPath;
        this.parentTypeId = parentTypeId;
        this.parentStoragePath = parentStoragePath;
        this.mainFileId = mainFileId;
        this.fileTypeId = fileTypeId;
        this.fileVersion = fileVersion;
        this.fileChecksum = fileChecksum;
        this.majorId = majorId;
        this.readFileScope = readFileScope;
        this.readFileKey = readFileKey;
        this.writeFileScope = writeFileScope;
        this.writeFileKey = writeFileKey;
        this.actionTypeId = actionTypeId;
        this.remark = remark;
        this.serverTypeId = serverTypeId;
        this.serverAddress = serverAddress;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        UpdateNodeDTO r = null;
        if(rhs instanceof UpdateNodeDTO)
        {
            r = (UpdateNodeDTO)rhs;
        }

        if(r != null)
        {
            if(this.typeId != r.typeId)
            {
                return false;
            }
            if(this.pid != r.pid)
            {
                if(this.pid == null || r.pid == null || !this.pid.equals(r.pid))
                {
                    return false;
                }
            }
            if(this.fullName != r.fullName)
            {
                if(this.fullName == null || r.fullName == null || !this.fullName.equals(r.fullName))
                {
                    return false;
                }
            }
            if(this.fileLength != r.fileLength)
            {
                return false;
            }
            if(this.ownerUserId != r.ownerUserId)
            {
                if(this.ownerUserId == null || r.ownerUserId == null || !this.ownerUserId.equals(r.ownerUserId))
                {
                    return false;
                }
            }
            if(this.taskId != r.taskId)
            {
                if(this.taskId == null || r.taskId == null || !this.taskId.equals(r.taskId))
                {
                    return false;
                }
            }
            if(this.parentPath != r.parentPath)
            {
                if(this.parentPath == null || r.parentPath == null || !this.parentPath.equals(r.parentPath))
                {
                    return false;
                }
            }
            if(this.parentTypeId != r.parentTypeId)
            {
                return false;
            }
            if(this.parentStoragePath != r.parentStoragePath)
            {
                if(this.parentStoragePath == null || r.parentStoragePath == null || !this.parentStoragePath.equals(r.parentStoragePath))
                {
                    return false;
                }
            }
            if(this.mainFileId != r.mainFileId)
            {
                if(this.mainFileId == null || r.mainFileId == null || !this.mainFileId.equals(r.mainFileId))
                {
                    return false;
                }
            }
            if(this.fileTypeId != r.fileTypeId)
            {
                return false;
            }
            if(this.fileVersion != r.fileVersion)
            {
                if(this.fileVersion == null || r.fileVersion == null || !this.fileVersion.equals(r.fileVersion))
                {
                    return false;
                }
            }
            if(this.fileChecksum != r.fileChecksum)
            {
                if(this.fileChecksum == null || r.fileChecksum == null || !this.fileChecksum.equals(r.fileChecksum))
                {
                    return false;
                }
            }
            if(this.majorId != r.majorId)
            {
                if(this.majorId == null || r.majorId == null || !this.majorId.equals(r.majorId))
                {
                    return false;
                }
            }
            if(this.readFileScope != r.readFileScope)
            {
                if(this.readFileScope == null || r.readFileScope == null || !this.readFileScope.equals(r.readFileScope))
                {
                    return false;
                }
            }
            if(this.readFileKey != r.readFileKey)
            {
                if(this.readFileKey == null || r.readFileKey == null || !this.readFileKey.equals(r.readFileKey))
                {
                    return false;
                }
            }
            if(this.writeFileScope != r.writeFileScope)
            {
                if(this.writeFileScope == null || r.writeFileScope == null || !this.writeFileScope.equals(r.writeFileScope))
                {
                    return false;
                }
            }
            if(this.writeFileKey != r.writeFileKey)
            {
                if(this.writeFileKey == null || r.writeFileKey == null || !this.writeFileKey.equals(r.writeFileKey))
                {
                    return false;
                }
            }
            if(this.actionTypeId != r.actionTypeId)
            {
                return false;
            }
            if(this.remark != r.remark)
            {
                if(this.remark == null || r.remark == null || !this.remark.equals(r.remark))
                {
                    return false;
                }
            }
            if(this.serverTypeId != r.serverTypeId)
            {
                return false;
            }
            if(this.serverAddress != r.serverAddress)
            {
                if(this.serverAddress == null || r.serverAddress == null || !this.serverAddress.equals(r.serverAddress))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::zeroc::UpdateNodeDTO");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, typeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, pid);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fullName);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileLength);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, ownerUserId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, taskId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, parentPath);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, parentTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, parentStoragePath);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, mainFileId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileVersion);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileChecksum);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, majorId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, readFileScope);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, readFileKey);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, writeFileScope);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, writeFileKey);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, actionTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, remark);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, serverTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, serverAddress);
        return h_;
    }

    public UpdateNodeDTO clone()
    {
        UpdateNodeDTO c = null;
        try
        {
            c = (UpdateNodeDTO)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeShort(this.typeId);
        ostr.writeString(this.pid);
        ostr.writeString(this.fullName);
        ostr.writeLong(this.fileLength);
        ostr.writeString(this.ownerUserId);
        ostr.writeString(this.taskId);
        ostr.writeString(this.parentPath);
        ostr.writeShort(this.parentTypeId);
        ostr.writeString(this.parentStoragePath);
        ostr.writeString(this.mainFileId);
        ostr.writeShort(this.fileTypeId);
        ostr.writeString(this.fileVersion);
        ostr.writeString(this.fileChecksum);
        ostr.writeString(this.majorId);
        ostr.writeString(this.readFileScope);
        ostr.writeString(this.readFileKey);
        ostr.writeString(this.writeFileScope);
        ostr.writeString(this.writeFileKey);
        ostr.writeShort(this.actionTypeId);
        ostr.writeString(this.remark);
        ostr.writeShort(this.serverTypeId);
        ostr.writeString(this.serverAddress);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.typeId = istr.readShort();
        this.pid = istr.readString();
        this.fullName = istr.readString();
        this.fileLength = istr.readLong();
        this.ownerUserId = istr.readString();
        this.taskId = istr.readString();
        this.parentPath = istr.readString();
        this.parentTypeId = istr.readShort();
        this.parentStoragePath = istr.readString();
        this.mainFileId = istr.readString();
        this.fileTypeId = istr.readShort();
        this.fileVersion = istr.readString();
        this.fileChecksum = istr.readString();
        this.majorId = istr.readString();
        this.readFileScope = istr.readString();
        this.readFileKey = istr.readString();
        this.writeFileScope = istr.readString();
        this.writeFileKey = istr.readString();
        this.actionTypeId = istr.readShort();
        this.remark = istr.readString();
        this.serverTypeId = istr.readShort();
        this.serverAddress = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, UpdateNodeDTO v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public UpdateNodeDTO ice_read(com.zeroc.Ice.InputStream istr)
    {
        UpdateNodeDTO v = new UpdateNodeDTO();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<UpdateNodeDTO> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, UpdateNodeDTO v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<UpdateNodeDTO> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(UpdateNodeDTO.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final UpdateNodeDTO _nullMarshalValue = new UpdateNodeDTO();

    public static final long serialVersionUID = 781080151L;
}
