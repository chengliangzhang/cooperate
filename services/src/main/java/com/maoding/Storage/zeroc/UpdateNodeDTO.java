// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `StorageData.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.Storage.zeroc;

public class UpdateNodeDTO implements java.lang.Cloneable,
                                      java.io.Serializable
{
    public short typeId;

    public short getTypeId()
    {
        return typeId;
    }

    public void setTypeId(short typeId)
    {
        this.typeId = typeId;
    }

    public String pid;

    public String getPid()
    {
        return pid;
    }

    public void setPid(String pid)
    {
        this.pid = pid;
    }

    /**
     * @deprecated 使用path代替
     **/
    @Deprecated
    public String fullName;

    /**
     * @deprecated 使用path代替
     **/
    @Deprecated
    public String getFullName()
    {
        return fullName;
    }

    /**
     * @deprecated 使用path代替
     **/
    @Deprecated
    public void setFullName(String fullName)
    {
        this.fullName = fullName;
    }

    public String path;

    public String getPath()
    {
        return path;
    }

    public void setPath(String path)
    {
        this.path = path;
    }

    public String ownerUserId;

    public String getOwnerUserId()
    {
        return ownerUserId;
    }

    public void setOwnerUserId(String ownerUserId)
    {
        this.ownerUserId = ownerUserId;
    }

    public String lastModifyRoleId;

    public String getLastModifyRoleId()
    {
        return lastModifyRoleId;
    }

    public void setLastModifyRoleId(String lastModifyRoleId)
    {
        this.lastModifyRoleId = lastModifyRoleId;
    }

    public String taskId;

    public String getTaskId()
    {
        return taskId;
    }

    public void setTaskId(String taskId)
    {
        this.taskId = taskId;
    }

    public String mainFileId;

    public String getMainFileId()
    {
        return mainFileId;
    }

    public void setMainFileId(String mainFileId)
    {
        this.mainFileId = mainFileId;
    }

    /**
     **/
    @Deprecated
    public String parentPath;

    /**
     **/
    @Deprecated
    public String getParentPath()
    {
        return parentPath;
    }

    /**
     **/
    @Deprecated
    public void setParentPath(String parentPath)
    {
        this.parentPath = parentPath;
    }

    /**
     **/
    @Deprecated
    public short parentTypeId;

    /**
     **/
    @Deprecated
    public short getParentTypeId()
    {
        return parentTypeId;
    }

    /**
     **/
    @Deprecated
    public void setParentTypeId(short parentTypeId)
    {
        this.parentTypeId = parentTypeId;
    }

    /**
     **/
    @Deprecated
    public String parentStoragePath;

    /**
     **/
    @Deprecated
    public String getParentStoragePath()
    {
        return parentStoragePath;
    }

    /**
     **/
    @Deprecated
    public void setParentStoragePath(String parentStoragePath)
    {
        this.parentStoragePath = parentStoragePath;
    }

    public short serverTypeId;

    public short getServerTypeId()
    {
        return serverTypeId;
    }

    public void setServerTypeId(short serverTypeId)
    {
        this.serverTypeId = serverTypeId;
    }

    public String serverAddress;

    public String getServerAddress()
    {
        return serverAddress;
    }

    public void setServerAddress(String serverAddress)
    {
        this.serverAddress = serverAddress;
    }

    public String mirrorPath;

    public String getMirrorPath()
    {
        return mirrorPath;
    }

    public void setMirrorPath(String mirrorPath)
    {
        this.mirrorPath = mirrorPath;
    }

    public short fileTypeId;

    public short getFileTypeId()
    {
        return fileTypeId;
    }

    public void setFileTypeId(short fileTypeId)
    {
        this.fileTypeId = fileTypeId;
    }

    public long fileLength;

    public long getFileLength()
    {
        return fileLength;
    }

    public void setFileLength(long fileLength)
    {
        this.fileLength = fileLength;
    }

    public String fileVersion;

    public String getFileVersion()
    {
        return fileVersion;
    }

    public void setFileVersion(String fileVersion)
    {
        this.fileVersion = fileVersion;
    }

    public String fileChecksum;

    public String getFileChecksum()
    {
        return fileChecksum;
    }

    public void setFileChecksum(String fileChecksum)
    {
        this.fileChecksum = fileChecksum;
    }

    public String majorId;

    public String getMajorId()
    {
        return majorId;
    }

    public void setMajorId(String majorId)
    {
        this.majorId = majorId;
    }

    /**
     * @deprecated 使用readonlyScope代替
     **/
    @Deprecated
    public String readFileScope;

    /**
     * @deprecated 使用readonlyScope代替
     **/
    @Deprecated
    public String getReadFileScope()
    {
        return readFileScope;
    }

    /**
     * @deprecated 使用readonlyScope代替
     **/
    @Deprecated
    public void setReadFileScope(String readFileScope)
    {
        this.readFileScope = readFileScope;
    }

    /**
     * @deprecated 使用readonlyKey代替
     **/
    @Deprecated
    public String readFileKey;

    /**
     * @deprecated 使用readonlyKey代替
     **/
    @Deprecated
    public String getReadFileKey()
    {
        return readFileKey;
    }

    /**
     * @deprecated 使用readonlyKey代替
     **/
    @Deprecated
    public void setReadFileKey(String readFileKey)
    {
        this.readFileKey = readFileKey;
    }

    /**
     * @deprecated 使用writableScope代替
     **/
    @Deprecated
    public String writeFileScope;

    /**
     * @deprecated 使用writableScope代替
     **/
    @Deprecated
    public String getWriteFileScope()
    {
        return writeFileScope;
    }

    /**
     * @deprecated 使用writableScope代替
     **/
    @Deprecated
    public void setWriteFileScope(String writeFileScope)
    {
        this.writeFileScope = writeFileScope;
    }

    /**
     * @deprecated 使用writableKey代替
     **/
    @Deprecated
    public String writeFileKey;

    /**
     * @deprecated 使用writableKey代替
     **/
    @Deprecated
    public String getWriteFileKey()
    {
        return writeFileKey;
    }

    /**
     * @deprecated 使用writableKey代替
     **/
    @Deprecated
    public void setWriteFileKey(String writeFileKey)
    {
        this.writeFileKey = writeFileKey;
    }

    public String readonlyScope;

    public String getReadonlyScope()
    {
        return readonlyScope;
    }

    public void setReadonlyScope(String readonlyScope)
    {
        this.readonlyScope = readonlyScope;
    }

    public String readonlyKey;

    public String getReadonlyKey()
    {
        return readonlyKey;
    }

    public void setReadonlyKey(String readonlyKey)
    {
        this.readonlyKey = readonlyKey;
    }

    public String writableScope;

    public String getWritableScope()
    {
        return writableScope;
    }

    public void setWritableScope(String writableScope)
    {
        this.writableScope = writableScope;
    }

    public String writableKey;

    public String getWritableKey()
    {
        return writableKey;
    }

    public void setWritableKey(String writableKey)
    {
        this.writableKey = writableKey;
    }

    public String readonlyMirrorPath;

    public String getReadonlyMirrorPath()
    {
        return readonlyMirrorPath;
    }

    public void setReadonlyMirrorPath(String readonlyMirrorPath)
    {
        this.readonlyMirrorPath = readonlyMirrorPath;
    }

    public String writableMirrorPath;

    public String getWritableMirrorPath()
    {
        return writableMirrorPath;
    }

    public void setWritableMirrorPath(String writableMirrorPath)
    {
        this.writableMirrorPath = writableMirrorPath;
    }

    public short actionTypeId;

    public short getActionTypeId()
    {
        return actionTypeId;
    }

    public void setActionTypeId(short actionTypeId)
    {
        this.actionTypeId = actionTypeId;
    }

    public String remark;

    public String getRemark()
    {
        return remark;
    }

    public void setRemark(String remark)
    {
        this.remark = remark;
    }

    public UpdateNodeDTO()
    {
        this.pid = "";
        this.fullName = "";
        this.path = "";
        this.ownerUserId = "";
        this.lastModifyRoleId = "";
        this.taskId = "";
        this.mainFileId = "";
        this.parentPath = "";
        this.parentStoragePath = "";
        this.serverAddress = "";
        this.mirrorPath = "";
        this.fileVersion = "";
        this.fileChecksum = "";
        this.majorId = "";
        this.readFileScope = "";
        this.readFileKey = "";
        this.writeFileScope = "";
        this.writeFileKey = "";
        this.readonlyScope = "";
        this.readonlyKey = "";
        this.writableScope = "";
        this.writableKey = "";
        this.readonlyMirrorPath = "";
        this.writableMirrorPath = "";
        this.remark = "";
    }

    public UpdateNodeDTO(short typeId, String pid, String fullName, String path, String ownerUserId, String lastModifyRoleId, String taskId, String mainFileId, String parentPath, short parentTypeId, String parentStoragePath, short serverTypeId, String serverAddress, String mirrorPath, short fileTypeId, long fileLength, String fileVersion, String fileChecksum, String majorId, String readFileScope, String readFileKey, String writeFileScope, String writeFileKey, String readonlyScope, String readonlyKey, String writableScope, String writableKey, String readonlyMirrorPath, String writableMirrorPath, short actionTypeId, String remark)
    {
        this.typeId = typeId;
        this.pid = pid;
        this.fullName = fullName;
        this.path = path;
        this.ownerUserId = ownerUserId;
        this.lastModifyRoleId = lastModifyRoleId;
        this.taskId = taskId;
        this.mainFileId = mainFileId;
        this.parentPath = parentPath;
        this.parentTypeId = parentTypeId;
        this.parentStoragePath = parentStoragePath;
        this.serverTypeId = serverTypeId;
        this.serverAddress = serverAddress;
        this.mirrorPath = mirrorPath;
        this.fileTypeId = fileTypeId;
        this.fileLength = fileLength;
        this.fileVersion = fileVersion;
        this.fileChecksum = fileChecksum;
        this.majorId = majorId;
        this.readFileScope = readFileScope;
        this.readFileKey = readFileKey;
        this.writeFileScope = writeFileScope;
        this.writeFileKey = writeFileKey;
        this.readonlyScope = readonlyScope;
        this.readonlyKey = readonlyKey;
        this.writableScope = writableScope;
        this.writableKey = writableKey;
        this.readonlyMirrorPath = readonlyMirrorPath;
        this.writableMirrorPath = writableMirrorPath;
        this.actionTypeId = actionTypeId;
        this.remark = remark;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        UpdateNodeDTO r = null;
        if(rhs instanceof UpdateNodeDTO)
        {
            r = (UpdateNodeDTO)rhs;
        }

        if(r != null)
        {
            if(this.typeId != r.typeId)
            {
                return false;
            }
            if(this.pid != r.pid)
            {
                if(this.pid == null || r.pid == null || !this.pid.equals(r.pid))
                {
                    return false;
                }
            }
            if(this.fullName != r.fullName)
            {
                if(this.fullName == null || r.fullName == null || !this.fullName.equals(r.fullName))
                {
                    return false;
                }
            }
            if(this.path != r.path)
            {
                if(this.path == null || r.path == null || !this.path.equals(r.path))
                {
                    return false;
                }
            }
            if(this.ownerUserId != r.ownerUserId)
            {
                if(this.ownerUserId == null || r.ownerUserId == null || !this.ownerUserId.equals(r.ownerUserId))
                {
                    return false;
                }
            }
            if(this.lastModifyRoleId != r.lastModifyRoleId)
            {
                if(this.lastModifyRoleId == null || r.lastModifyRoleId == null || !this.lastModifyRoleId.equals(r.lastModifyRoleId))
                {
                    return false;
                }
            }
            if(this.taskId != r.taskId)
            {
                if(this.taskId == null || r.taskId == null || !this.taskId.equals(r.taskId))
                {
                    return false;
                }
            }
            if(this.mainFileId != r.mainFileId)
            {
                if(this.mainFileId == null || r.mainFileId == null || !this.mainFileId.equals(r.mainFileId))
                {
                    return false;
                }
            }
            if(this.parentPath != r.parentPath)
            {
                if(this.parentPath == null || r.parentPath == null || !this.parentPath.equals(r.parentPath))
                {
                    return false;
                }
            }
            if(this.parentTypeId != r.parentTypeId)
            {
                return false;
            }
            if(this.parentStoragePath != r.parentStoragePath)
            {
                if(this.parentStoragePath == null || r.parentStoragePath == null || !this.parentStoragePath.equals(r.parentStoragePath))
                {
                    return false;
                }
            }
            if(this.serverTypeId != r.serverTypeId)
            {
                return false;
            }
            if(this.serverAddress != r.serverAddress)
            {
                if(this.serverAddress == null || r.serverAddress == null || !this.serverAddress.equals(r.serverAddress))
                {
                    return false;
                }
            }
            if(this.mirrorPath != r.mirrorPath)
            {
                if(this.mirrorPath == null || r.mirrorPath == null || !this.mirrorPath.equals(r.mirrorPath))
                {
                    return false;
                }
            }
            if(this.fileTypeId != r.fileTypeId)
            {
                return false;
            }
            if(this.fileLength != r.fileLength)
            {
                return false;
            }
            if(this.fileVersion != r.fileVersion)
            {
                if(this.fileVersion == null || r.fileVersion == null || !this.fileVersion.equals(r.fileVersion))
                {
                    return false;
                }
            }
            if(this.fileChecksum != r.fileChecksum)
            {
                if(this.fileChecksum == null || r.fileChecksum == null || !this.fileChecksum.equals(r.fileChecksum))
                {
                    return false;
                }
            }
            if(this.majorId != r.majorId)
            {
                if(this.majorId == null || r.majorId == null || !this.majorId.equals(r.majorId))
                {
                    return false;
                }
            }
            if(this.readFileScope != r.readFileScope)
            {
                if(this.readFileScope == null || r.readFileScope == null || !this.readFileScope.equals(r.readFileScope))
                {
                    return false;
                }
            }
            if(this.readFileKey != r.readFileKey)
            {
                if(this.readFileKey == null || r.readFileKey == null || !this.readFileKey.equals(r.readFileKey))
                {
                    return false;
                }
            }
            if(this.writeFileScope != r.writeFileScope)
            {
                if(this.writeFileScope == null || r.writeFileScope == null || !this.writeFileScope.equals(r.writeFileScope))
                {
                    return false;
                }
            }
            if(this.writeFileKey != r.writeFileKey)
            {
                if(this.writeFileKey == null || r.writeFileKey == null || !this.writeFileKey.equals(r.writeFileKey))
                {
                    return false;
                }
            }
            if(this.readonlyScope != r.readonlyScope)
            {
                if(this.readonlyScope == null || r.readonlyScope == null || !this.readonlyScope.equals(r.readonlyScope))
                {
                    return false;
                }
            }
            if(this.readonlyKey != r.readonlyKey)
            {
                if(this.readonlyKey == null || r.readonlyKey == null || !this.readonlyKey.equals(r.readonlyKey))
                {
                    return false;
                }
            }
            if(this.writableScope != r.writableScope)
            {
                if(this.writableScope == null || r.writableScope == null || !this.writableScope.equals(r.writableScope))
                {
                    return false;
                }
            }
            if(this.writableKey != r.writableKey)
            {
                if(this.writableKey == null || r.writableKey == null || !this.writableKey.equals(r.writableKey))
                {
                    return false;
                }
            }
            if(this.readonlyMirrorPath != r.readonlyMirrorPath)
            {
                if(this.readonlyMirrorPath == null || r.readonlyMirrorPath == null || !this.readonlyMirrorPath.equals(r.readonlyMirrorPath))
                {
                    return false;
                }
            }
            if(this.writableMirrorPath != r.writableMirrorPath)
            {
                if(this.writableMirrorPath == null || r.writableMirrorPath == null || !this.writableMirrorPath.equals(r.writableMirrorPath))
                {
                    return false;
                }
            }
            if(this.actionTypeId != r.actionTypeId)
            {
                return false;
            }
            if(this.remark != r.remark)
            {
                if(this.remark == null || r.remark == null || !this.remark.equals(r.remark))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::zeroc::UpdateNodeDTO");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, typeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, pid);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fullName);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, path);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, ownerUserId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, lastModifyRoleId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, taskId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, mainFileId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, parentPath);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, parentTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, parentStoragePath);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, serverTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, serverAddress);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, mirrorPath);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileLength);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileVersion);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileChecksum);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, majorId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, readFileScope);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, readFileKey);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, writeFileScope);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, writeFileKey);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, readonlyScope);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, readonlyKey);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, writableScope);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, writableKey);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, readonlyMirrorPath);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, writableMirrorPath);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, actionTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, remark);
        return h_;
    }

    public UpdateNodeDTO clone()
    {
        UpdateNodeDTO c = null;
        try
        {
            c = (UpdateNodeDTO)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeShort(this.typeId);
        ostr.writeString(this.pid);
        ostr.writeString(this.fullName);
        ostr.writeString(this.path);
        ostr.writeString(this.ownerUserId);
        ostr.writeString(this.lastModifyRoleId);
        ostr.writeString(this.taskId);
        ostr.writeString(this.mainFileId);
        ostr.writeString(this.parentPath);
        ostr.writeShort(this.parentTypeId);
        ostr.writeString(this.parentStoragePath);
        ostr.writeShort(this.serverTypeId);
        ostr.writeString(this.serverAddress);
        ostr.writeString(this.mirrorPath);
        ostr.writeShort(this.fileTypeId);
        ostr.writeLong(this.fileLength);
        ostr.writeString(this.fileVersion);
        ostr.writeString(this.fileChecksum);
        ostr.writeString(this.majorId);
        ostr.writeString(this.readFileScope);
        ostr.writeString(this.readFileKey);
        ostr.writeString(this.writeFileScope);
        ostr.writeString(this.writeFileKey);
        ostr.writeString(this.readonlyScope);
        ostr.writeString(this.readonlyKey);
        ostr.writeString(this.writableScope);
        ostr.writeString(this.writableKey);
        ostr.writeString(this.readonlyMirrorPath);
        ostr.writeString(this.writableMirrorPath);
        ostr.writeShort(this.actionTypeId);
        ostr.writeString(this.remark);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.typeId = istr.readShort();
        this.pid = istr.readString();
        this.fullName = istr.readString();
        this.path = istr.readString();
        this.ownerUserId = istr.readString();
        this.lastModifyRoleId = istr.readString();
        this.taskId = istr.readString();
        this.mainFileId = istr.readString();
        this.parentPath = istr.readString();
        this.parentTypeId = istr.readShort();
        this.parentStoragePath = istr.readString();
        this.serverTypeId = istr.readShort();
        this.serverAddress = istr.readString();
        this.mirrorPath = istr.readString();
        this.fileTypeId = istr.readShort();
        this.fileLength = istr.readLong();
        this.fileVersion = istr.readString();
        this.fileChecksum = istr.readString();
        this.majorId = istr.readString();
        this.readFileScope = istr.readString();
        this.readFileKey = istr.readString();
        this.writeFileScope = istr.readString();
        this.writeFileKey = istr.readString();
        this.readonlyScope = istr.readString();
        this.readonlyKey = istr.readString();
        this.writableScope = istr.readString();
        this.writableKey = istr.readString();
        this.readonlyMirrorPath = istr.readString();
        this.writableMirrorPath = istr.readString();
        this.actionTypeId = istr.readShort();
        this.remark = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, UpdateNodeDTO v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public UpdateNodeDTO ice_read(com.zeroc.Ice.InputStream istr)
    {
        UpdateNodeDTO v = new UpdateNodeDTO();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<UpdateNodeDTO> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, UpdateNodeDTO v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<UpdateNodeDTO> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(UpdateNodeDTO.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final UpdateNodeDTO _nullMarshalValue = new UpdateNodeDTO();

    public static final long serialVersionUID = -2056257058L;
}
