// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Storage.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.Storage.zeroc;

public interface StorageServicePrx extends com.zeroc.Ice.ObjectPrx
{
    default java.util.List<SimpleNodeDTO> listAllSubNodeByPath(String path)
    {
        return listAllSubNodeByPath(path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<SimpleNodeDTO> listAllSubNodeByPath(String path, java.util.Map<String, String> context)
    {
        return _iceI_listAllSubNodeByPathAsync(path, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listAllSubNodeByPathAsync(String path)
    {
        return _iceI_listAllSubNodeByPathAsync(path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listAllSubNodeByPathAsync(String path, java.util.Map<String, String> context)
    {
        return _iceI_listAllSubNodeByPathAsync(path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> _iceI_listAllSubNodeByPathAsync(String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listAllSubNodeByPath", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_path);
                 }, istr -> {
                     java.util.List<SimpleNodeDTO> ret;
                     ret = SimpleNodeListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.List<SimpleNodeDTO> listAllSubNodeByPathForAccount(com.maoding.User.zeroc.AccountDTO account, String path)
    {
        return listAllSubNodeByPathForAccount(account, path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<SimpleNodeDTO> listAllSubNodeByPathForAccount(com.maoding.User.zeroc.AccountDTO account, String path, java.util.Map<String, String> context)
    {
        return _iceI_listAllSubNodeByPathForAccountAsync(account, path, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listAllSubNodeByPathForAccountAsync(com.maoding.User.zeroc.AccountDTO account, String path)
    {
        return _iceI_listAllSubNodeByPathForAccountAsync(account, path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listAllSubNodeByPathForAccountAsync(com.maoding.User.zeroc.AccountDTO account, String path, java.util.Map<String, String> context)
    {
        return _iceI_listAllSubNodeByPathForAccountAsync(account, path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> _iceI_listAllSubNodeByPathForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listAllSubNodeByPathForAccount", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     ostr.writeString(iceP_path);
                 }, istr -> {
                     java.util.List<SimpleNodeDTO> ret;
                     ret = SimpleNodeListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    default SimpleNodeDTO commitFile(CommitRequestDTO request)
    {
        return commitFile(request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default SimpleNodeDTO commitFile(CommitRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_commitFileAsync(request, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> commitFileAsync(CommitRequestDTO request)
    {
        return _iceI_commitFileAsync(request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> commitFileAsync(CommitRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_commitFileAsync(request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> _iceI_commitFileAsync(CommitRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "commitFile", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     CommitRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     SimpleNodeDTO ret;
                     ret = SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    default SimpleNodeDTO commitFileForAccount(com.maoding.User.zeroc.AccountDTO account, CommitRequestDTO request)
    {
        return commitFileForAccount(account, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default SimpleNodeDTO commitFileForAccount(com.maoding.User.zeroc.AccountDTO account, CommitRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_commitFileForAccountAsync(account, request, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> commitFileForAccountAsync(com.maoding.User.zeroc.AccountDTO account, CommitRequestDTO request)
    {
        return _iceI_commitFileForAccountAsync(account, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> commitFileForAccountAsync(com.maoding.User.zeroc.AccountDTO account, CommitRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_commitFileForAccountAsync(account, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> _iceI_commitFileForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, CommitRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "commitFileForAccount", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     CommitRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     SimpleNodeDTO ret;
                     ret = SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.List<java.lang.String> listMajor()
    {
        return listMajor(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<java.lang.String> listMajor(java.util.Map<String, String> context)
    {
        return _iceI_listMajorAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.util.List<java.lang.String>> listMajorAsync()
    {
        return _iceI_listMajorAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<java.lang.String>> listMajorAsync(java.util.Map<String, String> context)
    {
        return _iceI_listMajorAsync(context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<java.lang.String>> _iceI_listMajorAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<java.lang.String>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listMajor", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     java.util.List<java.lang.String> ret;
                     ret = com.maoding.Common.zeroc.StringListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    /**
     * @deprecated 尚未验证
     **/
    @Deprecated
    default com.maoding.Project.zeroc.ProjectDTO getProjectInfoByPath(String path)
    {
        return getProjectInfoByPath(path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * @param context The Context map to send with the invocation.
     * @deprecated 尚未验证
     **/
    @Deprecated
    default com.maoding.Project.zeroc.ProjectDTO getProjectInfoByPath(String path, java.util.Map<String, String> context)
    {
        return _iceI_getProjectInfoByPathAsync(path, context, true).waitForResponse();
    }

    /**
     * @return A future that will be completed with the result.
     * @deprecated 尚未验证
     **/
    @Deprecated
    default java.util.concurrent.CompletableFuture<com.maoding.Project.zeroc.ProjectDTO> getProjectInfoByPathAsync(String path)
    {
        return _iceI_getProjectInfoByPathAsync(path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     * @deprecated 尚未验证
     **/
    @Deprecated
    default java.util.concurrent.CompletableFuture<com.maoding.Project.zeroc.ProjectDTO> getProjectInfoByPathAsync(String path, java.util.Map<String, String> context)
    {
        return _iceI_getProjectInfoByPathAsync(path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Project.zeroc.ProjectDTO> _iceI_getProjectInfoByPathAsync(String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Project.zeroc.ProjectDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getProjectInfoByPath", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_path);
                 }, istr -> {
                     com.maoding.Project.zeroc.ProjectDTO ret;
                     ret = com.maoding.Project.zeroc.ProjectDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    /**
     * @deprecated 尚未验证
     **/
    @Deprecated
    default com.maoding.Project.zeroc.ProjectDTO getProjectInfoByPathForAccount(com.maoding.User.zeroc.AccountDTO account, String path)
    {
        return getProjectInfoByPathForAccount(account, path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * @param context The Context map to send with the invocation.
     * @deprecated 尚未验证
     **/
    @Deprecated
    default com.maoding.Project.zeroc.ProjectDTO getProjectInfoByPathForAccount(com.maoding.User.zeroc.AccountDTO account, String path, java.util.Map<String, String> context)
    {
        return _iceI_getProjectInfoByPathForAccountAsync(account, path, context, true).waitForResponse();
    }

    /**
     * @return A future that will be completed with the result.
     * @deprecated 尚未验证
     **/
    @Deprecated
    default java.util.concurrent.CompletableFuture<com.maoding.Project.zeroc.ProjectDTO> getProjectInfoByPathForAccountAsync(com.maoding.User.zeroc.AccountDTO account, String path)
    {
        return _iceI_getProjectInfoByPathForAccountAsync(account, path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     * @deprecated 尚未验证
     **/
    @Deprecated
    default java.util.concurrent.CompletableFuture<com.maoding.Project.zeroc.ProjectDTO> getProjectInfoByPathForAccountAsync(com.maoding.User.zeroc.AccountDTO account, String path, java.util.Map<String, String> context)
    {
        return _iceI_getProjectInfoByPathForAccountAsync(account, path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Project.zeroc.ProjectDTO> _iceI_getProjectInfoByPathForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Project.zeroc.ProjectDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getProjectInfoByPathForAccount", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     ostr.writeString(iceP_path);
                 }, istr -> {
                     com.maoding.Project.zeroc.ProjectDTO ret;
                     ret = com.maoding.Project.zeroc.ProjectDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    default SimpleNodeDTO createStorageNode(CreateNodeRequestDTO request)
    {
        return createStorageNode(request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default SimpleNodeDTO createStorageNode(CreateNodeRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_createStorageNodeAsync(request, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> createStorageNodeAsync(CreateNodeRequestDTO request)
    {
        return _iceI_createStorageNodeAsync(request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> createStorageNodeAsync(CreateNodeRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_createStorageNodeAsync(request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> _iceI_createStorageNodeAsync(CreateNodeRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createStorageNode", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     CreateNodeRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     SimpleNodeDTO ret;
                     ret = SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    default SimpleNodeDTO createCustomerDir(CreateNodeRequestDTO request)
    {
        return createCustomerDir(request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default SimpleNodeDTO createCustomerDir(CreateNodeRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_createCustomerDirAsync(request, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> createCustomerDirAsync(CreateNodeRequestDTO request)
    {
        return _iceI_createCustomerDirAsync(request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> createCustomerDirAsync(CreateNodeRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_createCustomerDirAsync(request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> _iceI_createCustomerDirAsync(CreateNodeRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createCustomerDir", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     CreateNodeRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     SimpleNodeDTO ret;
                     ret = SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    default SimpleNodeDTO createCustomerFile(CreateNodeRequestDTO request)
    {
        return createCustomerFile(request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default SimpleNodeDTO createCustomerFile(CreateNodeRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_createCustomerFileAsync(request, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> createCustomerFileAsync(CreateNodeRequestDTO request)
    {
        return _iceI_createCustomerFileAsync(request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> createCustomerFileAsync(CreateNodeRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_createCustomerFileAsync(request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> _iceI_createCustomerFileAsync(CreateNodeRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createCustomerFile", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     CreateNodeRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     SimpleNodeDTO ret;
                     ret = SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.List<SimpleNodeDTO> listRootNodeForAccount(com.maoding.User.zeroc.AccountDTO account)
    {
        return listRootNodeForAccount(account, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<SimpleNodeDTO> listRootNodeForAccount(com.maoding.User.zeroc.AccountDTO account, java.util.Map<String, String> context)
    {
        return _iceI_listRootNodeForAccountAsync(account, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listRootNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account)
    {
        return _iceI_listRootNodeForAccountAsync(account, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listRootNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, java.util.Map<String, String> context)
    {
        return _iceI_listRootNodeForAccountAsync(account, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> _iceI_listRootNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listRootNodeForAccount", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                 }, istr -> {
                     java.util.List<SimpleNodeDTO> ret;
                     ret = SimpleNodeListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.List<SimpleNodeDTO> listRootNodeForCurrent()
    {
        return listRootNodeForCurrent(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<SimpleNodeDTO> listRootNodeForCurrent(java.util.Map<String, String> context)
    {
        return _iceI_listRootNodeForCurrentAsync(context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listRootNodeForCurrentAsync()
    {
        return _iceI_listRootNodeForCurrentAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listRootNodeForCurrentAsync(java.util.Map<String, String> context)
    {
        return _iceI_listRootNodeForCurrentAsync(context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> _iceI_listRootNodeForCurrentAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listRootNodeForCurrent", null, sync, null);
        f.invoke(true, context, null, null, istr -> {
                     java.util.List<SimpleNodeDTO> ret;
                     ret = SimpleNodeListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    default SimpleNodeDTO getNodeByPathForAccount(com.maoding.User.zeroc.AccountDTO account, String path)
    {
        return getNodeByPathForAccount(account, path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default SimpleNodeDTO getNodeByPathForAccount(com.maoding.User.zeroc.AccountDTO account, String path, java.util.Map<String, String> context)
    {
        return _iceI_getNodeByPathForAccountAsync(account, path, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> getNodeByPathForAccountAsync(com.maoding.User.zeroc.AccountDTO account, String path)
    {
        return _iceI_getNodeByPathForAccountAsync(account, path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> getNodeByPathForAccountAsync(com.maoding.User.zeroc.AccountDTO account, String path, java.util.Map<String, String> context)
    {
        return _iceI_getNodeByPathForAccountAsync(account, path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> _iceI_getNodeByPathForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getNodeByPathForAccount", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     ostr.writeString(iceP_path);
                 }, istr -> {
                     SimpleNodeDTO ret;
                     ret = SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    default SimpleNodeDTO getNodeByPathForCurrent(String path)
    {
        return getNodeByPathForCurrent(path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default SimpleNodeDTO getNodeByPathForCurrent(String path, java.util.Map<String, String> context)
    {
        return _iceI_getNodeByPathForCurrentAsync(path, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> getNodeByPathForCurrentAsync(String path)
    {
        return _iceI_getNodeByPathForCurrentAsync(path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> getNodeByPathForCurrentAsync(String path, java.util.Map<String, String> context)
    {
        return _iceI_getNodeByPathForCurrentAsync(path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> _iceI_getNodeByPathForCurrentAsync(String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getNodeByPathForCurrent", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_path);
                 }, istr -> {
                     SimpleNodeDTO ret;
                     ret = SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    default SimpleNodeDTO getNodeByIdForAccount(com.maoding.User.zeroc.AccountDTO account, String id)
    {
        return getNodeByIdForAccount(account, id, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default SimpleNodeDTO getNodeByIdForAccount(com.maoding.User.zeroc.AccountDTO account, String id, java.util.Map<String, String> context)
    {
        return _iceI_getNodeByIdForAccountAsync(account, id, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> getNodeByIdForAccountAsync(com.maoding.User.zeroc.AccountDTO account, String id)
    {
        return _iceI_getNodeByIdForAccountAsync(account, id, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> getNodeByIdForAccountAsync(com.maoding.User.zeroc.AccountDTO account, String id, java.util.Map<String, String> context)
    {
        return _iceI_getNodeByIdForAccountAsync(account, id, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> _iceI_getNodeByIdForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, String iceP_id, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getNodeByIdForAccount", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     ostr.writeString(iceP_id);
                 }, istr -> {
                     SimpleNodeDTO ret;
                     ret = SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    default SimpleNodeDTO getNodeByIdForCurrent(String id)
    {
        return getNodeByIdForCurrent(id, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default SimpleNodeDTO getNodeByIdForCurrent(String id, java.util.Map<String, String> context)
    {
        return _iceI_getNodeByIdForCurrentAsync(id, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> getNodeByIdForCurrentAsync(String id)
    {
        return _iceI_getNodeByIdForCurrentAsync(id, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> getNodeByIdForCurrentAsync(String id, java.util.Map<String, String> context)
    {
        return _iceI_getNodeByIdForCurrentAsync(id, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> _iceI_getNodeByIdForCurrentAsync(String iceP_id, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getNodeByIdForCurrent", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_id);
                 }, istr -> {
                     SimpleNodeDTO ret;
                     ret = SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.List<SimpleNodeDTO> listSubNodeByPathForAccount(com.maoding.User.zeroc.AccountDTO account, String path)
    {
        return listSubNodeByPathForAccount(account, path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<SimpleNodeDTO> listSubNodeByPathForAccount(com.maoding.User.zeroc.AccountDTO account, String path, java.util.Map<String, String> context)
    {
        return _iceI_listSubNodeByPathForAccountAsync(account, path, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listSubNodeByPathForAccountAsync(com.maoding.User.zeroc.AccountDTO account, String path)
    {
        return _iceI_listSubNodeByPathForAccountAsync(account, path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listSubNodeByPathForAccountAsync(com.maoding.User.zeroc.AccountDTO account, String path, java.util.Map<String, String> context)
    {
        return _iceI_listSubNodeByPathForAccountAsync(account, path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> _iceI_listSubNodeByPathForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listSubNodeByPathForAccount", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     ostr.writeString(iceP_path);
                 }, istr -> {
                     java.util.List<SimpleNodeDTO> ret;
                     ret = SimpleNodeListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.List<SimpleNodeDTO> listSubNodeByPathForCurrent(String path)
    {
        return listSubNodeByPathForCurrent(path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<SimpleNodeDTO> listSubNodeByPathForCurrent(String path, java.util.Map<String, String> context)
    {
        return _iceI_listSubNodeByPathForCurrentAsync(path, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listSubNodeByPathForCurrentAsync(String path)
    {
        return _iceI_listSubNodeByPathForCurrentAsync(path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listSubNodeByPathForCurrentAsync(String path, java.util.Map<String, String> context)
    {
        return _iceI_listSubNodeByPathForCurrentAsync(path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> _iceI_listSubNodeByPathForCurrentAsync(String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listSubNodeByPathForCurrent", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_path);
                 }, istr -> {
                     java.util.List<SimpleNodeDTO> ret;
                     ret = SimpleNodeListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.List<SimpleNodeDTO> listSubNodeByPNodeIdForAccount(com.maoding.User.zeroc.AccountDTO account, String pid)
    {
        return listSubNodeByPNodeIdForAccount(account, pid, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<SimpleNodeDTO> listSubNodeByPNodeIdForAccount(com.maoding.User.zeroc.AccountDTO account, String pid, java.util.Map<String, String> context)
    {
        return _iceI_listSubNodeByPNodeIdForAccountAsync(account, pid, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listSubNodeByPNodeIdForAccountAsync(com.maoding.User.zeroc.AccountDTO account, String pid)
    {
        return _iceI_listSubNodeByPNodeIdForAccountAsync(account, pid, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listSubNodeByPNodeIdForAccountAsync(com.maoding.User.zeroc.AccountDTO account, String pid, java.util.Map<String, String> context)
    {
        return _iceI_listSubNodeByPNodeIdForAccountAsync(account, pid, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> _iceI_listSubNodeByPNodeIdForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, String iceP_pid, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listSubNodeByPNodeIdForAccount", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     ostr.writeString(iceP_pid);
                 }, istr -> {
                     java.util.List<SimpleNodeDTO> ret;
                     ret = SimpleNodeListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.List<SimpleNodeDTO> listSubNodeByPNodeIdForCurrent(String pid)
    {
        return listSubNodeByPNodeIdForCurrent(pid, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<SimpleNodeDTO> listSubNodeByPNodeIdForCurrent(String pid, java.util.Map<String, String> context)
    {
        return _iceI_listSubNodeByPNodeIdForCurrentAsync(pid, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listSubNodeByPNodeIdForCurrentAsync(String pid)
    {
        return _iceI_listSubNodeByPNodeIdForCurrentAsync(pid, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listSubNodeByPNodeIdForCurrentAsync(String pid, java.util.Map<String, String> context)
    {
        return _iceI_listSubNodeByPNodeIdForCurrentAsync(pid, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> _iceI_listSubNodeByPNodeIdForCurrentAsync(String iceP_pid, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listSubNodeByPNodeIdForCurrent", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_pid);
                 }, istr -> {
                     java.util.List<SimpleNodeDTO> ret;
                     ret = SimpleNodeListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    default String createNode(CreateNodeRequestDTO request)
    {
        return createNode(request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String createNode(CreateNodeRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_createNodeAsync(request, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> createNodeAsync(CreateNodeRequestDTO request)
    {
        return _iceI_createNodeAsync(request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> createNodeAsync(CreateNodeRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_createNodeAsync(request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.String> _iceI_createNodeAsync(CreateNodeRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createNode", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     CreateNodeRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    default com.maoding.FileServer.zeroc.FileRequestDTO openFileForCurrent(String path)
    {
        return openFileForCurrent(path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.FileServer.zeroc.FileRequestDTO openFileForCurrent(String path, java.util.Map<String, String> context)
    {
        return _iceI_openFileForCurrentAsync(path, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<com.maoding.FileServer.zeroc.FileRequestDTO> openFileForCurrentAsync(String path)
    {
        return _iceI_openFileForCurrentAsync(path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.FileServer.zeroc.FileRequestDTO> openFileForCurrentAsync(String path, java.util.Map<String, String> context)
    {
        return _iceI_openFileForCurrentAsync(path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.FileServer.zeroc.FileRequestDTO> _iceI_openFileForCurrentAsync(String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.FileServer.zeroc.FileRequestDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "openFileForCurrent", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_path);
                 }, istr -> {
                     com.maoding.FileServer.zeroc.FileRequestDTO ret;
                     ret = com.maoding.FileServer.zeroc.FileRequestDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    default com.maoding.FileServer.zeroc.FileRequestDTO openFileForAccount(com.maoding.User.zeroc.AccountDTO account, String path)
    {
        return openFileForAccount(account, path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.FileServer.zeroc.FileRequestDTO openFileForAccount(com.maoding.User.zeroc.AccountDTO account, String path, java.util.Map<String, String> context)
    {
        return _iceI_openFileForAccountAsync(account, path, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<com.maoding.FileServer.zeroc.FileRequestDTO> openFileForAccountAsync(com.maoding.User.zeroc.AccountDTO account, String path)
    {
        return _iceI_openFileForAccountAsync(account, path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.FileServer.zeroc.FileRequestDTO> openFileForAccountAsync(com.maoding.User.zeroc.AccountDTO account, String path, java.util.Map<String, String> context)
    {
        return _iceI_openFileForAccountAsync(account, path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.FileServer.zeroc.FileRequestDTO> _iceI_openFileForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.FileServer.zeroc.FileRequestDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "openFileForAccount", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     ostr.writeString(iceP_path);
                 }, istr -> {
                     com.maoding.FileServer.zeroc.FileRequestDTO ret;
                     ret = com.maoding.FileServer.zeroc.FileRequestDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    default java.util.List<SimpleNodeDTO> listAllNodeForAccount(com.maoding.User.zeroc.AccountDTO account)
    {
        return listAllNodeForAccount(account, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<SimpleNodeDTO> listAllNodeForAccount(com.maoding.User.zeroc.AccountDTO account, java.util.Map<String, String> context)
    {
        return _iceI_listAllNodeForAccountAsync(account, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listAllNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account)
    {
        return _iceI_listAllNodeForAccountAsync(account, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listAllNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, java.util.Map<String, String> context)
    {
        return _iceI_listAllNodeForAccountAsync(account, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> _iceI_listAllNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listAllNodeForAccount", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                 }, istr -> {
                     java.util.List<SimpleNodeDTO> ret;
                     ret = SimpleNodeListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    default boolean isDirectoryEmpty(String path)
    {
        return isDirectoryEmpty(path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean isDirectoryEmpty(String path, java.util.Map<String, String> context)
    {
        return _iceI_isDirectoryEmptyAsync(path, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> isDirectoryEmptyAsync(String path)
    {
        return _iceI_isDirectoryEmptyAsync(path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> isDirectoryEmptyAsync(String path, java.util.Map<String, String> context)
    {
        return _iceI_isDirectoryEmptyAsync(path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_isDirectoryEmptyAsync(String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "isDirectoryEmpty", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_path);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default boolean closeFileForCurrent(String path)
    {
        return closeFileForCurrent(path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean closeFileForCurrent(String path, java.util.Map<String, String> context)
    {
        return _iceI_closeFileForCurrentAsync(path, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> closeFileForCurrentAsync(String path)
    {
        return _iceI_closeFileForCurrentAsync(path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> closeFileForCurrentAsync(String path, java.util.Map<String, String> context)
    {
        return _iceI_closeFileForCurrentAsync(path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_closeFileForCurrentAsync(String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "closeFileForCurrent", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_path);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default boolean closeFileForAccount(com.maoding.User.zeroc.AccountDTO account, String path)
    {
        return closeFileForAccount(account, path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean closeFileForAccount(com.maoding.User.zeroc.AccountDTO account, String path, java.util.Map<String, String> context)
    {
        return _iceI_closeFileForAccountAsync(account, path, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> closeFileForAccountAsync(com.maoding.User.zeroc.AccountDTO account, String path)
    {
        return _iceI_closeFileForAccountAsync(account, path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> closeFileForAccountAsync(com.maoding.User.zeroc.AccountDTO account, String path, java.util.Map<String, String> context)
    {
        return _iceI_closeFileForAccountAsync(account, path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_closeFileForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "closeFileForAccount", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     ostr.writeString(iceP_path);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default boolean setFileLength(String path, long fileLength)
    {
        return setFileLength(path, fileLength, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean setFileLength(String path, long fileLength, java.util.Map<String, String> context)
    {
        return _iceI_setFileLengthAsync(path, fileLength, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> setFileLengthAsync(String path, long fileLength)
    {
        return _iceI_setFileLengthAsync(path, fileLength, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> setFileLengthAsync(String path, long fileLength, java.util.Map<String, String> context)
    {
        return _iceI_setFileLengthAsync(path, fileLength, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_setFileLengthAsync(String iceP_path, long iceP_fileLength, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "setFileLength", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_path);
                     ostr.writeLong(iceP_fileLength);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default boolean canBeDeleted(String path)
    {
        return canBeDeleted(path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean canBeDeleted(String path, java.util.Map<String, String> context)
    {
        return _iceI_canBeDeletedAsync(path, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> canBeDeletedAsync(String path)
    {
        return _iceI_canBeDeletedAsync(path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> canBeDeletedAsync(String path, java.util.Map<String, String> context)
    {
        return _iceI_canBeDeletedAsync(path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_canBeDeletedAsync(String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "canBeDeleted", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_path);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default long getUsage(StorageQueryDTO query)
    {
        return getUsage(query, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default long getUsage(StorageQueryDTO query, java.util.Map<String, String> context)
    {
        return _iceI_getUsageAsync(query, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Long> getUsageAsync(StorageQueryDTO query)
    {
        return _iceI_getUsageAsync(query, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Long> getUsageAsync(StorageQueryDTO query, java.util.Map<String, String> context)
    {
        return _iceI_getUsageAsync(query, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Long> _iceI_getUsageAsync(StorageQueryDTO iceP_query, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Long> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getUsage", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     StorageQueryDTO.ice_write(ostr, iceP_query);
                 }, istr -> {
                     long ret;
                     ret = istr.readLong();
                     return ret;
                 });
        return f;
    }

    default boolean lockNode(String path, String userId)
    {
        return lockNode(path, userId, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean lockNode(String path, String userId, java.util.Map<String, String> context)
    {
        return _iceI_lockNodeAsync(path, userId, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> lockNodeAsync(String path, String userId)
    {
        return _iceI_lockNodeAsync(path, userId, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> lockNodeAsync(String path, String userId, java.util.Map<String, String> context)
    {
        return _iceI_lockNodeAsync(path, userId, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_lockNodeAsync(String iceP_path, String iceP_userId, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "lockNode", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_path);
                     ostr.writeString(iceP_userId);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default boolean unlockNode(String path, String userId)
    {
        return unlockNode(path, userId, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean unlockNode(String path, String userId, java.util.Map<String, String> context)
    {
        return _iceI_unlockNodeAsync(path, userId, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> unlockNodeAsync(String path, String userId)
    {
        return _iceI_unlockNodeAsync(path, userId, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> unlockNodeAsync(String path, String userId, java.util.Map<String, String> context)
    {
        return _iceI_unlockNodeAsync(path, userId, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_unlockNodeAsync(String iceP_path, String iceP_userId, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "unlockNode", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_path);
                     ostr.writeString(iceP_userId);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default boolean isLocking(String path)
    {
        return isLocking(path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean isLocking(String path, java.util.Map<String, String> context)
    {
        return _iceI_isLockingAsync(path, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> isLockingAsync(String path)
    {
        return _iceI_isLockingAsync(path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> isLockingAsync(String path, java.util.Map<String, String> context)
    {
        return _iceI_isLockingAsync(path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_isLockingAsync(String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "isLocking", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_path);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default CooperateDirNodeDTO getDirNodeInfo(String path)
    {
        return getDirNodeInfo(path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default CooperateDirNodeDTO getDirNodeInfo(String path, java.util.Map<String, String> context)
    {
        return _iceI_getDirNodeInfoAsync(path, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<CooperateDirNodeDTO> getDirNodeInfoAsync(String path)
    {
        return _iceI_getDirNodeInfoAsync(path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<CooperateDirNodeDTO> getDirNodeInfoAsync(String path, java.util.Map<String, String> context)
    {
        return _iceI_getDirNodeInfoAsync(path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<CooperateDirNodeDTO> _iceI_getDirNodeInfoAsync(String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<CooperateDirNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getDirNodeInfo", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_path);
                 }, istr -> {
                     CooperateDirNodeDTO ret;
                     ret = CooperateDirNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    default FileNodeDTO getFileNodeInfo(String path)
    {
        return getFileNodeInfo(path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default FileNodeDTO getFileNodeInfo(String path, java.util.Map<String, String> context)
    {
        return _iceI_getFileNodeInfoAsync(path, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<FileNodeDTO> getFileNodeInfoAsync(String path)
    {
        return _iceI_getFileNodeInfoAsync(path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<FileNodeDTO> getFileNodeInfoAsync(String path, java.util.Map<String, String> context)
    {
        return _iceI_getFileNodeInfoAsync(path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<FileNodeDTO> _iceI_getFileNodeInfoAsync(String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<FileNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getFileNodeInfo", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_path);
                 }, istr -> {
                     FileNodeDTO ret;
                     ret = FileNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    default boolean moveNode(String oldPath, String newPath)
    {
        return moveNode(oldPath, newPath, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean moveNode(String oldPath, String newPath, java.util.Map<String, String> context)
    {
        return _iceI_moveNodeAsync(oldPath, newPath, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> moveNodeAsync(String oldPath, String newPath)
    {
        return _iceI_moveNodeAsync(oldPath, newPath, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> moveNodeAsync(String oldPath, String newPath, java.util.Map<String, String> context)
    {
        return _iceI_moveNodeAsync(oldPath, newPath, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_moveNodeAsync(String iceP_oldPath, String iceP_newPath, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "moveNode", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_oldPath);
                     ostr.writeString(iceP_newPath);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default boolean deleteNode(String path, boolean force)
    {
        return deleteNode(path, force, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean deleteNode(String path, boolean force, java.util.Map<String, String> context)
    {
        return _iceI_deleteNodeAsync(path, force, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> deleteNodeAsync(String path, boolean force)
    {
        return _iceI_deleteNodeAsync(path, force, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> deleteNodeAsync(String path, boolean force, java.util.Map<String, String> context)
    {
        return _iceI_deleteNodeAsync(path, force, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_deleteNodeAsync(String iceP_path, boolean iceP_force, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "deleteNode", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_path);
                     ostr.writeBool(iceP_force);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default com.maoding.FileServer.zeroc.FileRequestDTO requestUploadByPath(String path, String userId)
    {
        return requestUploadByPath(path, userId, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.FileServer.zeroc.FileRequestDTO requestUploadByPath(String path, String userId, java.util.Map<String, String> context)
    {
        return _iceI_requestUploadByPathAsync(path, userId, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<com.maoding.FileServer.zeroc.FileRequestDTO> requestUploadByPathAsync(String path, String userId)
    {
        return _iceI_requestUploadByPathAsync(path, userId, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.FileServer.zeroc.FileRequestDTO> requestUploadByPathAsync(String path, String userId, java.util.Map<String, String> context)
    {
        return _iceI_requestUploadByPathAsync(path, userId, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.FileServer.zeroc.FileRequestDTO> _iceI_requestUploadByPathAsync(String iceP_path, String iceP_userId, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.FileServer.zeroc.FileRequestDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "requestUploadByPath", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_path);
                     ostr.writeString(iceP_userId);
                 }, istr -> {
                     com.maoding.FileServer.zeroc.FileRequestDTO ret;
                     ret = com.maoding.FileServer.zeroc.FileRequestDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    default com.maoding.FileServer.zeroc.FileRequestDTO requestDownloadByPath(String path, String userId)
    {
        return requestDownloadByPath(path, userId, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.FileServer.zeroc.FileRequestDTO requestDownloadByPath(String path, String userId, java.util.Map<String, String> context)
    {
        return _iceI_requestDownloadByPathAsync(path, userId, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<com.maoding.FileServer.zeroc.FileRequestDTO> requestDownloadByPathAsync(String path, String userId)
    {
        return _iceI_requestDownloadByPathAsync(path, userId, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.FileServer.zeroc.FileRequestDTO> requestDownloadByPathAsync(String path, String userId, java.util.Map<String, String> context)
    {
        return _iceI_requestDownloadByPathAsync(path, userId, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.FileServer.zeroc.FileRequestDTO> _iceI_requestDownloadByPathAsync(String iceP_path, String iceP_userId, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.FileServer.zeroc.FileRequestDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "requestDownloadByPath", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_path);
                     ostr.writeString(iceP_userId);
                 }, istr -> {
                     com.maoding.FileServer.zeroc.FileRequestDTO ret;
                     ret = com.maoding.FileServer.zeroc.FileRequestDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    default void finishUploadById(String nodeId, String userId)
    {
        finishUploadById(nodeId, userId, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void finishUploadById(String nodeId, String userId, java.util.Map<String, String> context)
    {
        _iceI_finishUploadByIdAsync(nodeId, userId, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> finishUploadByIdAsync(String nodeId, String userId)
    {
        return _iceI_finishUploadByIdAsync(nodeId, userId, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> finishUploadByIdAsync(String nodeId, String userId, java.util.Map<String, String> context)
    {
        return _iceI_finishUploadByIdAsync(nodeId, userId, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_finishUploadByIdAsync(String iceP_nodeId, String iceP_userId, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "finishUploadById", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     ostr.writeString(iceP_nodeId);
                     ostr.writeString(iceP_userId);
                 }, null);
        return f;
    }

    /**
     * @deprecated 替换为listRootNodeForAccount
     **/
    @Deprecated
    default java.util.List<SimpleNodeDTO> listSubNode(String path)
    {
        return listSubNode(path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * @param context The Context map to send with the invocation.
     * @deprecated 替换为listRootNodeForAccount
     **/
    @Deprecated
    default java.util.List<SimpleNodeDTO> listSubNode(String path, java.util.Map<String, String> context)
    {
        return _iceI_listSubNodeAsync(path, context, true).waitForResponse();
    }

    /**
     * @return A future that will be completed with the result.
     * @deprecated 替换为listRootNodeForAccount
     **/
    @Deprecated
    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listSubNodeAsync(String path)
    {
        return _iceI_listSubNodeAsync(path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     * @deprecated 替换为listRootNodeForAccount
     **/
    @Deprecated
    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listSubNodeAsync(String path, java.util.Map<String, String> context)
    {
        return _iceI_listSubNodeAsync(path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> _iceI_listSubNodeAsync(String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listSubNode", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_path);
                 }, istr -> {
                     java.util.List<SimpleNodeDTO> ret;
                     ret = SimpleNodeListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    /**
     * @deprecated 替换为getNodeByPathForAccount
     **/
    @Deprecated
    default SimpleNodeDTO getSimpleNodeInfo(String path)
    {
        return getSimpleNodeInfo(path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * @param context The Context map to send with the invocation.
     * @deprecated 替换为getNodeByPathForAccount
     **/
    @Deprecated
    default SimpleNodeDTO getSimpleNodeInfo(String path, java.util.Map<String, String> context)
    {
        return _iceI_getSimpleNodeInfoAsync(path, context, true).waitForResponse();
    }

    /**
     * @return A future that will be completed with the result.
     * @deprecated 替换为getNodeByPathForAccount
     **/
    @Deprecated
    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> getSimpleNodeInfoAsync(String path)
    {
        return _iceI_getSimpleNodeInfoAsync(path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     * @deprecated 替换为getNodeByPathForAccount
     **/
    @Deprecated
    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> getSimpleNodeInfoAsync(String path, java.util.Map<String, String> context)
    {
        return _iceI_getSimpleNodeInfoAsync(path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> _iceI_getSimpleNodeInfoAsync(String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getSimpleNodeInfo", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_path);
                 }, istr -> {
                     SimpleNodeDTO ret;
                     ret = SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    /**
     * @deprecated 替换为getProjectInfoByPathForAccount、getTaskInfoByPathForAccount等
     **/
    @Deprecated
    default CooperateDirDTO getCooperateDirInfo(CooperationQueryDTO query)
    {
        return getCooperateDirInfo(query, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * @param context The Context map to send with the invocation.
     * @deprecated 替换为getProjectInfoByPathForAccount、getTaskInfoByPathForAccount等
     **/
    @Deprecated
    default CooperateDirDTO getCooperateDirInfo(CooperationQueryDTO query, java.util.Map<String, String> context)
    {
        return _iceI_getCooperateDirInfoAsync(query, context, true).waitForResponse();
    }

    /**
     * @return A future that will be completed with the result.
     * @deprecated 替换为getProjectInfoByPathForAccount、getTaskInfoByPathForAccount等
     **/
    @Deprecated
    default java.util.concurrent.CompletableFuture<CooperateDirDTO> getCooperateDirInfoAsync(CooperationQueryDTO query)
    {
        return _iceI_getCooperateDirInfoAsync(query, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     * @deprecated 替换为getProjectInfoByPathForAccount、getTaskInfoByPathForAccount等
     **/
    @Deprecated
    default java.util.concurrent.CompletableFuture<CooperateDirDTO> getCooperateDirInfoAsync(CooperationQueryDTO query, java.util.Map<String, String> context)
    {
        return _iceI_getCooperateDirInfoAsync(query, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<CooperateDirDTO> _iceI_getCooperateDirInfoAsync(CooperationQueryDTO iceP_query, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<CooperateDirDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getCooperateDirInfo", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     CooperationQueryDTO.ice_write(ostr, iceP_query);
                 }, istr -> {
                     CooperateDirDTO ret;
                     ret = CooperateDirDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    default boolean lockFile(String fileId, String address)
    {
        return lockFile(fileId, address, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean lockFile(String fileId, String address, java.util.Map<String, String> context)
    {
        return _iceI_lockFileAsync(fileId, address, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> lockFileAsync(String fileId, String address)
    {
        return _iceI_lockFileAsync(fileId, address, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> lockFileAsync(String fileId, String address, java.util.Map<String, String> context)
    {
        return _iceI_lockFileAsync(fileId, address, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_lockFileAsync(String iceP_fileId, String iceP_address, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "lockFile", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_fileId);
                     ostr.writeString(iceP_address);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default NodeDTO getNodeInfo(CooperationQueryDTO query)
    {
        return getNodeInfo(query, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default NodeDTO getNodeInfo(CooperationQueryDTO query, java.util.Map<String, String> context)
    {
        return _iceI_getNodeInfoAsync(query, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<NodeDTO> getNodeInfoAsync(CooperationQueryDTO query)
    {
        return _iceI_getNodeInfoAsync(query, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<NodeDTO> getNodeInfoAsync(CooperationQueryDTO query, java.util.Map<String, String> context)
    {
        return _iceI_getNodeInfoAsync(query, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<NodeDTO> _iceI_getNodeInfoAsync(CooperationQueryDTO iceP_query, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<NodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getNodeInfo", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     CooperationQueryDTO.ice_write(ostr, iceP_query);
                 }, istr -> {
                     NodeDTO ret;
                     ret = NodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    default boolean changeNodeInfo(NodeModifyRequestDTO request, String nodeId)
    {
        return changeNodeInfo(request, nodeId, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean changeNodeInfo(NodeModifyRequestDTO request, String nodeId, java.util.Map<String, String> context)
    {
        return _iceI_changeNodeInfoAsync(request, nodeId, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> changeNodeInfoAsync(NodeModifyRequestDTO request, String nodeId)
    {
        return _iceI_changeNodeInfoAsync(request, nodeId, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> changeNodeInfoAsync(NodeModifyRequestDTO request, String nodeId, java.util.Map<String, String> context)
    {
        return _iceI_changeNodeInfoAsync(request, nodeId, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_changeNodeInfoAsync(NodeModifyRequestDTO iceP_request, String iceP_nodeId, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "changeNodeInfo", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     NodeModifyRequestDTO.ice_write(ostr, iceP_request);
                     ostr.writeString(iceP_nodeId);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default boolean initNodeInfo(CreateNodeRequestDTO request)
    {
        return initNodeInfo(request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean initNodeInfo(CreateNodeRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_initNodeInfoAsync(request, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> initNodeInfoAsync(CreateNodeRequestDTO request)
    {
        return _iceI_initNodeInfoAsync(request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> initNodeInfoAsync(CreateNodeRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_initNodeInfoAsync(request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_initNodeInfoAsync(CreateNodeRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "initNodeInfo", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     CreateNodeRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default boolean modifyFileInfo(CooperateFileDTO fileInfo)
    {
        return modifyFileInfo(fileInfo, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean modifyFileInfo(CooperateFileDTO fileInfo, java.util.Map<String, String> context)
    {
        return _iceI_modifyFileInfoAsync(fileInfo, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> modifyFileInfoAsync(CooperateFileDTO fileInfo)
    {
        return _iceI_modifyFileInfoAsync(fileInfo, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> modifyFileInfoAsync(CooperateFileDTO fileInfo, java.util.Map<String, String> context)
    {
        return _iceI_modifyFileInfoAsync(fileInfo, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_modifyFileInfoAsync(CooperateFileDTO iceP_fileInfo, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "modifyFileInfo", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     CooperateFileDTO.ice_write(ostr, iceP_fileInfo);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default com.maoding.FileServer.zeroc.FileRequestDTO requestUpload(CooperateFileDTO fileInfo, int mode)
    {
        return requestUpload(fileInfo, mode, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.FileServer.zeroc.FileRequestDTO requestUpload(CooperateFileDTO fileInfo, int mode, java.util.Map<String, String> context)
    {
        return _iceI_requestUploadAsync(fileInfo, mode, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<com.maoding.FileServer.zeroc.FileRequestDTO> requestUploadAsync(CooperateFileDTO fileInfo, int mode)
    {
        return _iceI_requestUploadAsync(fileInfo, mode, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.FileServer.zeroc.FileRequestDTO> requestUploadAsync(CooperateFileDTO fileInfo, int mode, java.util.Map<String, String> context)
    {
        return _iceI_requestUploadAsync(fileInfo, mode, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.FileServer.zeroc.FileRequestDTO> _iceI_requestUploadAsync(CooperateFileDTO iceP_fileInfo, int iceP_mode, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.FileServer.zeroc.FileRequestDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "requestUpload", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     CooperateFileDTO.ice_write(ostr, iceP_fileInfo);
                     ostr.writeInt(iceP_mode);
                 }, istr -> {
                     com.maoding.FileServer.zeroc.FileRequestDTO ret;
                     ret = com.maoding.FileServer.zeroc.FileRequestDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    default com.maoding.FileServer.zeroc.FileRequestDTO requestDownload(CooperateFileDTO fileInfo, int mode)
    {
        return requestDownload(fileInfo, mode, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.FileServer.zeroc.FileRequestDTO requestDownload(CooperateFileDTO fileInfo, int mode, java.util.Map<String, String> context)
    {
        return _iceI_requestDownloadAsync(fileInfo, mode, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<com.maoding.FileServer.zeroc.FileRequestDTO> requestDownloadAsync(CooperateFileDTO fileInfo, int mode)
    {
        return _iceI_requestDownloadAsync(fileInfo, mode, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.FileServer.zeroc.FileRequestDTO> requestDownloadAsync(CooperateFileDTO fileInfo, int mode, java.util.Map<String, String> context)
    {
        return _iceI_requestDownloadAsync(fileInfo, mode, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.FileServer.zeroc.FileRequestDTO> _iceI_requestDownloadAsync(CooperateFileDTO iceP_fileInfo, int iceP_mode, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.FileServer.zeroc.FileRequestDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "requestDownload", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     CooperateFileDTO.ice_write(ostr, iceP_fileInfo);
                     ostr.writeInt(iceP_mode);
                 }, istr -> {
                     com.maoding.FileServer.zeroc.FileRequestDTO ret;
                     ret = com.maoding.FileServer.zeroc.FileRequestDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    default com.maoding.FileServer.zeroc.FileRequestDTO requestDownloadFromLast(CooperateFileDTO fileInfo, int mode)
    {
        return requestDownloadFromLast(fileInfo, mode, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.FileServer.zeroc.FileRequestDTO requestDownloadFromLast(CooperateFileDTO fileInfo, int mode, java.util.Map<String, String> context)
    {
        return _iceI_requestDownloadFromLastAsync(fileInfo, mode, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<com.maoding.FileServer.zeroc.FileRequestDTO> requestDownloadFromLastAsync(CooperateFileDTO fileInfo, int mode)
    {
        return _iceI_requestDownloadFromLastAsync(fileInfo, mode, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.FileServer.zeroc.FileRequestDTO> requestDownloadFromLastAsync(CooperateFileDTO fileInfo, int mode, java.util.Map<String, String> context)
    {
        return _iceI_requestDownloadFromLastAsync(fileInfo, mode, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.FileServer.zeroc.FileRequestDTO> _iceI_requestDownloadFromLastAsync(CooperateFileDTO iceP_fileInfo, int iceP_mode, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.FileServer.zeroc.FileRequestDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "requestDownloadFromLast", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     CooperateFileDTO.ice_write(ostr, iceP_fileInfo);
                     ostr.writeInt(iceP_mode);
                 }, istr -> {
                     com.maoding.FileServer.zeroc.FileRequestDTO ret;
                     ret = com.maoding.FileServer.zeroc.FileRequestDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    default CooperateFileDTO uploadCallback(java.util.Map<java.lang.String, java.lang.String> params)
    {
        return uploadCallback(params, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default CooperateFileDTO uploadCallback(java.util.Map<java.lang.String, java.lang.String> params, java.util.Map<String, String> context)
    {
        return _iceI_uploadCallbackAsync(params, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<CooperateFileDTO> uploadCallbackAsync(java.util.Map<java.lang.String, java.lang.String> params)
    {
        return _iceI_uploadCallbackAsync(params, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<CooperateFileDTO> uploadCallbackAsync(java.util.Map<java.lang.String, java.lang.String> params, java.util.Map<String, String> context)
    {
        return _iceI_uploadCallbackAsync(params, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<CooperateFileDTO> _iceI_uploadCallbackAsync(java.util.Map<java.lang.String, java.lang.String> iceP_params, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<CooperateFileDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "uploadCallback", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Common.zeroc.MapHelper.write(ostr, iceP_params);
                 }, istr -> {
                     CooperateFileDTO ret;
                     ret = CooperateFileDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    default void downloadCallback(java.util.Map<java.lang.String, java.lang.String> params)
    {
        downloadCallback(params, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void downloadCallback(java.util.Map<java.lang.String, java.lang.String> params, java.util.Map<String, String> context)
    {
        _iceI_downloadCallbackAsync(params, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> downloadCallbackAsync(java.util.Map<java.lang.String, java.lang.String> params)
    {
        return _iceI_downloadCallbackAsync(params, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> downloadCallbackAsync(java.util.Map<java.lang.String, java.lang.String> params, java.util.Map<String, String> context)
    {
        return _iceI_downloadCallbackAsync(params, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_downloadCallbackAsync(java.util.Map<java.lang.String, java.lang.String> iceP_params, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "downloadCallback", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     com.maoding.Common.zeroc.MapHelper.write(ostr, iceP_params);
                 }, null);
        return f;
    }

    default void finishUpload(com.maoding.FileServer.zeroc.FileRequestDTO request, boolean succeeded)
    {
        finishUpload(request, succeeded, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void finishUpload(com.maoding.FileServer.zeroc.FileRequestDTO request, boolean succeeded, java.util.Map<String, String> context)
    {
        _iceI_finishUploadAsync(request, succeeded, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> finishUploadAsync(com.maoding.FileServer.zeroc.FileRequestDTO request, boolean succeeded)
    {
        return _iceI_finishUploadAsync(request, succeeded, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> finishUploadAsync(com.maoding.FileServer.zeroc.FileRequestDTO request, boolean succeeded, java.util.Map<String, String> context)
    {
        return _iceI_finishUploadAsync(request, succeeded, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_finishUploadAsync(com.maoding.FileServer.zeroc.FileRequestDTO iceP_request, boolean iceP_succeeded, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "finishUpload", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     com.maoding.FileServer.zeroc.FileRequestDTO.ice_write(ostr, iceP_request);
                     ostr.writeBool(iceP_succeeded);
                 }, null);
        return f;
    }

    default void finishDownload(com.maoding.FileServer.zeroc.FileRequestDTO request, boolean succeeded)
    {
        finishDownload(request, succeeded, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void finishDownload(com.maoding.FileServer.zeroc.FileRequestDTO request, boolean succeeded, java.util.Map<String, String> context)
    {
        _iceI_finishDownloadAsync(request, succeeded, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<Void> finishDownloadAsync(com.maoding.FileServer.zeroc.FileRequestDTO request, boolean succeeded)
    {
        return _iceI_finishDownloadAsync(request, succeeded, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> finishDownloadAsync(com.maoding.FileServer.zeroc.FileRequestDTO request, boolean succeeded, java.util.Map<String, String> context)
    {
        return _iceI_finishDownloadAsync(request, succeeded, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_finishDownloadAsync(com.maoding.FileServer.zeroc.FileRequestDTO iceP_request, boolean iceP_succeeded, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "finishDownload", null, sync, null);
        f.invoke(false, context, null, ostr -> {
                     com.maoding.FileServer.zeroc.FileRequestDTO.ice_write(ostr, iceP_request);
                     ostr.writeBool(iceP_succeeded);
                 }, null);
        return f;
    }

    default boolean replaceFile(CooperateFileDTO fileInfo, com.maoding.FileServer.zeroc.FileDTO fileDTO)
    {
        return replaceFile(fileInfo, fileDTO, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean replaceFile(CooperateFileDTO fileInfo, com.maoding.FileServer.zeroc.FileDTO fileDTO, java.util.Map<String, String> context)
    {
        return _iceI_replaceFileAsync(fileInfo, fileDTO, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> replaceFileAsync(CooperateFileDTO fileInfo, com.maoding.FileServer.zeroc.FileDTO fileDTO)
    {
        return _iceI_replaceFileAsync(fileInfo, fileDTO, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> replaceFileAsync(CooperateFileDTO fileInfo, com.maoding.FileServer.zeroc.FileDTO fileDTO, java.util.Map<String, String> context)
    {
        return _iceI_replaceFileAsync(fileInfo, fileDTO, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_replaceFileAsync(CooperateFileDTO iceP_fileInfo, com.maoding.FileServer.zeroc.FileDTO iceP_fileDTO, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "replaceFile", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     CooperateFileDTO.ice_write(ostr, iceP_fileInfo);
                     com.maoding.FileServer.zeroc.FileDTO.ice_write(ostr, iceP_fileDTO);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default boolean deleteFile(CooperateFileDTO fileInfo)
    {
        return deleteFile(fileInfo, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean deleteFile(CooperateFileDTO fileInfo, java.util.Map<String, String> context)
    {
        return _iceI_deleteFileAsync(fileInfo, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> deleteFileAsync(CooperateFileDTO fileInfo)
    {
        return _iceI_deleteFileAsync(fileInfo, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> deleteFileAsync(CooperateFileDTO fileInfo, java.util.Map<String, String> context)
    {
        return _iceI_deleteFileAsync(fileInfo, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_deleteFileAsync(CooperateFileDTO iceP_fileInfo, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "deleteFile", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     CooperateFileDTO.ice_write(ostr, iceP_fileInfo);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default String createDirectory(CreateNodeRequestDTO request)
    {
        return createDirectory(request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String createDirectory(CreateNodeRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_createDirectoryAsync(request, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> createDirectoryAsync(CreateNodeRequestDTO request)
    {
        return _iceI_createDirectoryAsync(request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> createDirectoryAsync(CreateNodeRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_createDirectoryAsync(request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.String> _iceI_createDirectoryAsync(CreateNodeRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createDirectory", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     CreateNodeRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    default boolean deleteDirectory(String nodeId, boolean force)
    {
        return deleteDirectory(nodeId, force, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean deleteDirectory(String nodeId, boolean force, java.util.Map<String, String> context)
    {
        return _iceI_deleteDirectoryAsync(nodeId, force, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> deleteDirectoryAsync(String nodeId, boolean force)
    {
        return _iceI_deleteDirectoryAsync(nodeId, force, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> deleteDirectoryAsync(String nodeId, boolean force, java.util.Map<String, String> context)
    {
        return _iceI_deleteDirectoryAsync(nodeId, force, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_deleteDirectoryAsync(String iceP_nodeId, boolean iceP_force, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "deleteDirectory", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_nodeId);
                     ostr.writeBool(iceP_force);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default String createFile(CreateNodeRequestDTO request)
    {
        return createFile(request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String createFile(CreateNodeRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_createFileAsync(request, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> createFileAsync(CreateNodeRequestDTO request)
    {
        return _iceI_createFileAsync(request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> createFileAsync(CreateNodeRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_createFileAsync(request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.String> _iceI_createFileAsync(CreateNodeRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createFile", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     CreateNodeRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    default CooperateFileDTO duplicateFile(CooperateFileDTO fileInfo, String path)
    {
        return duplicateFile(fileInfo, path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default CooperateFileDTO duplicateFile(CooperateFileDTO fileInfo, String path, java.util.Map<String, String> context)
    {
        return _iceI_duplicateFileAsync(fileInfo, path, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<CooperateFileDTO> duplicateFileAsync(CooperateFileDTO fileInfo, String path)
    {
        return _iceI_duplicateFileAsync(fileInfo, path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<CooperateFileDTO> duplicateFileAsync(CooperateFileDTO fileInfo, String path, java.util.Map<String, String> context)
    {
        return _iceI_duplicateFileAsync(fileInfo, path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<CooperateFileDTO> _iceI_duplicateFileAsync(CooperateFileDTO iceP_fileInfo, String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<CooperateFileDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "duplicateFile", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     CooperateFileDTO.ice_write(ostr, iceP_fileInfo);
                     ostr.writeString(iceP_path);
                 }, istr -> {
                     CooperateFileDTO ret;
                     ret = CooperateFileDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    default CooperateFileDTO createFileLink(CooperateFileDTO fileInfo, String path)
    {
        return createFileLink(fileInfo, path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default CooperateFileDTO createFileLink(CooperateFileDTO fileInfo, String path, java.util.Map<String, String> context)
    {
        return _iceI_createFileLinkAsync(fileInfo, path, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<CooperateFileDTO> createFileLinkAsync(CooperateFileDTO fileInfo, String path)
    {
        return _iceI_createFileLinkAsync(fileInfo, path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<CooperateFileDTO> createFileLinkAsync(CooperateFileDTO fileInfo, String path, java.util.Map<String, String> context)
    {
        return _iceI_createFileLinkAsync(fileInfo, path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<CooperateFileDTO> _iceI_createFileLinkAsync(CooperateFileDTO iceP_fileInfo, String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<CooperateFileDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createFileLink", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     CooperateFileDTO.ice_write(ostr, iceP_fileInfo);
                     ostr.writeString(iceP_path);
                 }, istr -> {
                     CooperateFileDTO ret;
                     ret = CooperateFileDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    default boolean duplicateDirectory(String path, String parent)
    {
        return duplicateDirectory(path, parent, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean duplicateDirectory(String path, String parent, java.util.Map<String, String> context)
    {
        return _iceI_duplicateDirectoryAsync(path, parent, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> duplicateDirectoryAsync(String path, String parent)
    {
        return _iceI_duplicateDirectoryAsync(path, parent, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> duplicateDirectoryAsync(String path, String parent, java.util.Map<String, String> context)
    {
        return _iceI_duplicateDirectoryAsync(path, parent, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_duplicateDirectoryAsync(String iceP_path, String iceP_parent, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "duplicateDirectory", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_path);
                     ostr.writeString(iceP_parent);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default java.util.List<CooperateFileDTO> listFileLink(com.maoding.FileServer.zeroc.FileDTO fileDTO)
    {
        return listFileLink(fileDTO, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<CooperateFileDTO> listFileLink(com.maoding.FileServer.zeroc.FileDTO fileDTO, java.util.Map<String, String> context)
    {
        return _iceI_listFileLinkAsync(fileDTO, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.util.List<CooperateFileDTO>> listFileLinkAsync(com.maoding.FileServer.zeroc.FileDTO fileDTO)
    {
        return _iceI_listFileLinkAsync(fileDTO, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<CooperateFileDTO>> listFileLinkAsync(com.maoding.FileServer.zeroc.FileDTO fileDTO, java.util.Map<String, String> context)
    {
        return _iceI_listFileLinkAsync(fileDTO, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<CooperateFileDTO>> _iceI_listFileLinkAsync(com.maoding.FileServer.zeroc.FileDTO iceP_fileDTO, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<CooperateFileDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listFileLink", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.FileServer.zeroc.FileDTO.ice_write(ostr, iceP_fileDTO);
                 }, istr -> {
                     java.util.List<CooperateFileDTO> ret;
                     ret = CooperateFileListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    default boolean restoreFile(CooperateFileDTO fileInfo)
    {
        return restoreFile(fileInfo, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean restoreFile(CooperateFileDTO fileInfo, java.util.Map<String, String> context)
    {
        return _iceI_restoreFileAsync(fileInfo, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> restoreFileAsync(CooperateFileDTO fileInfo)
    {
        return _iceI_restoreFileAsync(fileInfo, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> restoreFileAsync(CooperateFileDTO fileInfo, java.util.Map<String, String> context)
    {
        return _iceI_restoreFileAsync(fileInfo, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_restoreFileAsync(CooperateFileDTO iceP_fileInfo, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "restoreFile", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     CooperateFileDTO.ice_write(ostr, iceP_fileInfo);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default boolean restoreDirectory(String path)
    {
        return restoreDirectory(path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean restoreDirectory(String path, java.util.Map<String, String> context)
    {
        return _iceI_restoreDirectoryAsync(path, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> restoreDirectoryAsync(String path)
    {
        return _iceI_restoreDirectoryAsync(path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> restoreDirectoryAsync(String path, java.util.Map<String, String> context)
    {
        return _iceI_restoreDirectoryAsync(path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_restoreDirectoryAsync(String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "restoreDirectory", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_path);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default boolean unlockFile(String fileId)
    {
        return unlockFile(fileId, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean unlockFile(String fileId, java.util.Map<String, String> context)
    {
        return _iceI_unlockFileAsync(fileId, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> unlockFileAsync(String fileId)
    {
        return _iceI_unlockFileAsync(fileId, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> unlockFileAsync(String fileId, java.util.Map<String, String> context)
    {
        return _iceI_unlockFileAsync(fileId, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_unlockFileAsync(String iceP_fileId, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "unlockFile", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_fileId);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default boolean isFileLocking(String fileId)
    {
        return isFileLocking(fileId, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean isFileLocking(String fileId, java.util.Map<String, String> context)
    {
        return _iceI_isFileLockingAsync(fileId, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> isFileLockingAsync(String fileId)
    {
        return _iceI_isFileLockingAsync(fileId, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> isFileLockingAsync(String fileId, java.util.Map<String, String> context)
    {
        return _iceI_isFileLockingAsync(fileId, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_isFileLockingAsync(String iceP_fileId, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "isFileLocking", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_fileId);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    default CooperateFileDTO getFileInfo(String nodeId)
    {
        return getFileInfo(nodeId, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default CooperateFileDTO getFileInfo(String nodeId, java.util.Map<String, String> context)
    {
        return _iceI_getFileInfoAsync(nodeId, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<CooperateFileDTO> getFileInfoAsync(String nodeId)
    {
        return _iceI_getFileInfoAsync(nodeId, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<CooperateFileDTO> getFileInfoAsync(String nodeId, java.util.Map<String, String> context)
    {
        return _iceI_getFileInfoAsync(nodeId, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<CooperateFileDTO> _iceI_getFileInfoAsync(String iceP_nodeId, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<CooperateFileDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getFileInfo", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_nodeId);
                 }, istr -> {
                     CooperateFileDTO ret;
                     ret = CooperateFileDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    default int getLinkCount(com.maoding.FileServer.zeroc.FileDTO fileDTO)
    {
        return getLinkCount(fileDTO, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default int getLinkCount(com.maoding.FileServer.zeroc.FileDTO fileDTO, java.util.Map<String, String> context)
    {
        return _iceI_getLinkCountAsync(fileDTO, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> getLinkCountAsync(com.maoding.FileServer.zeroc.FileDTO fileDTO)
    {
        return _iceI_getLinkCountAsync(fileDTO, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> getLinkCountAsync(com.maoding.FileServer.zeroc.FileDTO fileDTO, java.util.Map<String, String> context)
    {
        return _iceI_getLinkCountAsync(fileDTO, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> _iceI_getLinkCountAsync(com.maoding.FileServer.zeroc.FileDTO iceP_fileDTO, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getLinkCount", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.FileServer.zeroc.FileDTO.ice_write(ostr, iceP_fileDTO);
                 }, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    default String createVersion(CooperateFileDTO fileInfo, String version)
    {
        return createVersion(fileInfo, version, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String createVersion(CooperateFileDTO fileInfo, String version, java.util.Map<String, String> context)
    {
        return _iceI_createVersionAsync(fileInfo, version, context, true).waitForResponse();
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> createVersionAsync(CooperateFileDTO fileInfo, String version)
    {
        return _iceI_createVersionAsync(fileInfo, version, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> createVersionAsync(CooperateFileDTO fileInfo, String version, java.util.Map<String, String> context)
    {
        return _iceI_createVersionAsync(fileInfo, version, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.String> _iceI_createVersionAsync(CooperateFileDTO iceP_fileInfo, String iceP_version, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createVersion", null, sync, null);
        f.invoke(true, context, null, ostr -> {
                     CooperateFileDTO.ice_write(ostr, iceP_fileInfo);
                     ostr.writeString(iceP_version);
                 }, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static StorageServicePrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), StorageServicePrx.class, _StorageServicePrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static StorageServicePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), StorageServicePrx.class, _StorageServicePrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static StorageServicePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), StorageServicePrx.class, _StorageServicePrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static StorageServicePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), StorageServicePrx.class, _StorageServicePrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static StorageServicePrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, StorageServicePrx.class, _StorageServicePrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static StorageServicePrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, StorageServicePrx.class, _StorageServicePrxI.class);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the per-proxy context.
     * @param newContext The context for the new proxy.
     * @return A proxy with the specified per-proxy context.
     **/
    @Override
    default StorageServicePrx ice_context(java.util.Map<String, String> newContext)
    {
        return (StorageServicePrx)_ice_context(newContext);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the adapter ID.
     * @param newAdapterId The adapter ID for the new proxy.
     * @return A proxy with the specified adapter ID.
     **/
    @Override
    default StorageServicePrx ice_adapterId(String newAdapterId)
    {
        return (StorageServicePrx)_ice_adapterId(newAdapterId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoints.
     * @param newEndpoints The endpoints for the new proxy.
     * @return A proxy with the specified endpoints.
     **/
    @Override
    default StorageServicePrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints)
    {
        return (StorageServicePrx)_ice_endpoints(newEndpoints);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator cache timeout.
     * @param newTimeout The new locator cache timeout (in seconds).
     * @return A proxy with the specified locator cache timeout.
     **/
    @Override
    default StorageServicePrx ice_locatorCacheTimeout(int newTimeout)
    {
        return (StorageServicePrx)_ice_locatorCacheTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the invocation timeout.
     * @param newTimeout The new invocation timeout (in seconds).
     * @return A proxy with the specified invocation timeout.
     **/
    @Override
    default StorageServicePrx ice_invocationTimeout(int newTimeout)
    {
        return (StorageServicePrx)_ice_invocationTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for connection caching.
     * @param newCache <code>true</code> if the new proxy should cache connections; <code>false</code> otherwise.
     * @return A proxy with the specified caching policy.
     **/
    @Override
    default StorageServicePrx ice_connectionCached(boolean newCache)
    {
        return (StorageServicePrx)_ice_connectionCached(newCache);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoint selection policy.
     * @param newType The new endpoint selection policy.
     * @return A proxy with the specified endpoint selection policy.
     **/
    @Override
    default StorageServicePrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType)
    {
        return (StorageServicePrx)_ice_endpointSelection(newType);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for how it selects endpoints.
     * @param b If <code>b</code> is <code>true</code>, only endpoints that use a secure transport are
     * used by the new proxy. If <code>b</code> is false, the returned proxy uses both secure and
     * insecure endpoints.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default StorageServicePrx ice_secure(boolean b)
    {
        return (StorageServicePrx)_ice_secure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the encoding used to marshal parameters.
     * @param e The encoding version to use to marshal request parameters.
     * @return A proxy with the specified encoding version.
     **/
    @Override
    default StorageServicePrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e)
    {
        return (StorageServicePrx)_ice_encodingVersion(e);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its endpoint selection policy.
     * @param b If <code>b</code> is <code>true</code>, the new proxy will use secure endpoints for invocations
     * and only use insecure endpoints if an invocation cannot be made via secure endpoints. If <code>b</code> is
     * <code>false</code>, the proxy prefers insecure endpoints to secure ones.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default StorageServicePrx ice_preferSecure(boolean b)
    {
        return (StorageServicePrx)_ice_preferSecure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the router.
     * @param router The router for the new proxy.
     * @return A proxy with the specified router.
     **/
    @Override
    default StorageServicePrx ice_router(com.zeroc.Ice.RouterPrx router)
    {
        return (StorageServicePrx)_ice_router(router);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator.
     * @param locator The locator for the new proxy.
     * @return A proxy with the specified locator.
     **/
    @Override
    default StorageServicePrx ice_locator(com.zeroc.Ice.LocatorPrx locator)
    {
        return (StorageServicePrx)_ice_locator(locator);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for collocation optimization.
     * @param b <code>true</code> if the new proxy enables collocation optimization; <code>false</code> otherwise.
     * @return A proxy with the specified collocation optimization.
     **/
    @Override
    default StorageServicePrx ice_collocationOptimized(boolean b)
    {
        return (StorageServicePrx)_ice_collocationOptimized(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses twoway invocations.
     * @return A proxy that uses twoway invocations.
     **/
    @Override
    default StorageServicePrx ice_twoway()
    {
        return (StorageServicePrx)_ice_twoway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses oneway invocations.
     * @return A proxy that uses oneway invocations.
     **/
    @Override
    default StorageServicePrx ice_oneway()
    {
        return (StorageServicePrx)_ice_oneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch oneway invocations.
     * @return A proxy that uses batch oneway invocations.
     **/
    @Override
    default StorageServicePrx ice_batchOneway()
    {
        return (StorageServicePrx)_ice_batchOneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses datagram invocations.
     * @return A proxy that uses datagram invocations.
     **/
    @Override
    default StorageServicePrx ice_datagram()
    {
        return (StorageServicePrx)_ice_datagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch datagram invocations.
     * @return A proxy that uses batch datagram invocations.
     **/
    @Override
    default StorageServicePrx ice_batchDatagram()
    {
        return (StorageServicePrx)_ice_batchDatagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, except for compression.
     * @param co <code>true</code> enables compression for the new proxy; <code>false</code> disables compression.
     * @return A proxy with the specified compression setting.
     **/
    @Override
    default StorageServicePrx ice_compress(boolean co)
    {
        return (StorageServicePrx)_ice_compress(co);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection timeout setting.
     * @param t The connection timeout for the proxy in milliseconds.
     * @return A proxy with the specified timeout.
     **/
    @Override
    default StorageServicePrx ice_timeout(int t)
    {
        return (StorageServicePrx)_ice_timeout(t);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection ID.
     * @param connectionId The connection ID for the new proxy. An empty string removes the connection ID.
     * @return A proxy with the specified connection ID.
     **/
    @Override
    default StorageServicePrx ice_connectionId(String connectionId)
    {
        return (StorageServicePrx)_ice_connectionId(connectionId);
    }

    static String ice_staticId()
    {
        return "::zeroc::StorageService";
    }
}
