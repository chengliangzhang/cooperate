// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Storage.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.Storage.zeroc;

public interface StorageServicePrx extends com.zeroc.Ice.ObjectPrx
{
    default EmbedElementDTO createEmbedElement(UpdateElementDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return createEmbedElement(request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default EmbedElementDTO createEmbedElement(UpdateElementDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_createEmbedElementAsync(request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<EmbedElementDTO> createEmbedElementAsync(UpdateElementDTO request)
    {
        return _iceI_createEmbedElementAsync(request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<EmbedElementDTO> createEmbedElementAsync(UpdateElementDTO request, java.util.Map<String, String> context)
    {
        return _iceI_createEmbedElementAsync(request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<EmbedElementDTO> _iceI_createEmbedElementAsync(UpdateElementDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<EmbedElementDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createEmbedElement", null, sync, _iceE_createEmbedElement);
        f.invoke(true, context, null, ostr -> {
                     UpdateElementDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     EmbedElementDTO ret;
                     ret = EmbedElementDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_createEmbedElement =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default AnnotateDTO createAnnotate(UpdateAnnotateDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return createAnnotate(request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default AnnotateDTO createAnnotate(UpdateAnnotateDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_createAnnotateAsync(request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<AnnotateDTO> createAnnotateAsync(UpdateAnnotateDTO request)
    {
        return _iceI_createAnnotateAsync(request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<AnnotateDTO> createAnnotateAsync(UpdateAnnotateDTO request, java.util.Map<String, String> context)
    {
        return _iceI_createAnnotateAsync(request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<AnnotateDTO> _iceI_createAnnotateAsync(UpdateAnnotateDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<AnnotateDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createAnnotate", null, sync, _iceE_createAnnotate);
        f.invoke(true, context, null, ostr -> {
                     UpdateAnnotateDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     AnnotateDTO ret;
                     ret = AnnotateDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_createAnnotate =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default NodeFileDTO createNodeFile(UpdateNodeFileDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return createNodeFile(request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default NodeFileDTO createNodeFile(UpdateNodeFileDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_createNodeFileAsync(request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<NodeFileDTO> createNodeFileAsync(UpdateNodeFileDTO request)
    {
        return _iceI_createNodeFileAsync(request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<NodeFileDTO> createNodeFileAsync(UpdateNodeFileDTO request, java.util.Map<String, String> context)
    {
        return _iceI_createNodeFileAsync(request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<NodeFileDTO> _iceI_createNodeFileAsync(UpdateNodeFileDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<NodeFileDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createNodeFile", null, sync, _iceE_createNodeFile);
        f.invoke(true, context, null, ostr -> {
                     UpdateNodeFileDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     NodeFileDTO ret;
                     ret = NodeFileDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_createNodeFile =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default SuggestionDTO createSuggestion(UpdateSuggestionDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return createSuggestion(request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default SuggestionDTO createSuggestion(UpdateSuggestionDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_createSuggestionAsync(request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<SuggestionDTO> createSuggestionAsync(UpdateSuggestionDTO request)
    {
        return _iceI_createSuggestionAsync(request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<SuggestionDTO> createSuggestionAsync(UpdateSuggestionDTO request, java.util.Map<String, String> context)
    {
        return _iceI_createSuggestionAsync(request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<SuggestionDTO> _iceI_createSuggestionAsync(UpdateSuggestionDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<SuggestionDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createSuggestion", null, sync, _iceE_createSuggestion);
        f.invoke(true, context, null, ostr -> {
                     UpdateSuggestionDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     SuggestionDTO ret;
                     ret = SuggestionDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_createSuggestion =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default NodeFileDTO updateNodeFile(NodeFileDTO src, UpdateNodeFileDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return updateNodeFile(src, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default NodeFileDTO updateNodeFile(NodeFileDTO src, UpdateNodeFileDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_updateNodeFileAsync(src, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<NodeFileDTO> updateNodeFileAsync(NodeFileDTO src, UpdateNodeFileDTO request)
    {
        return _iceI_updateNodeFileAsync(src, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<NodeFileDTO> updateNodeFileAsync(NodeFileDTO src, UpdateNodeFileDTO request, java.util.Map<String, String> context)
    {
        return _iceI_updateNodeFileAsync(src, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<NodeFileDTO> _iceI_updateNodeFileAsync(NodeFileDTO iceP_src, UpdateNodeFileDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<NodeFileDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "updateNodeFile", null, sync, _iceE_updateNodeFile);
        f.invoke(true, context, null, ostr -> {
                     NodeFileDTO.ice_write(ostr, iceP_src);
                     UpdateNodeFileDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     NodeFileDTO ret;
                     ret = NodeFileDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_updateNodeFile =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default java.util.List<NodeFileDTO> listNodeFile(QueryNodeFileDTO query)
        throws com.maoding.Common.zeroc.CustomException
    {
        return listNodeFile(query, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<NodeFileDTO> listNodeFile(QueryNodeFileDTO query, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_listNodeFileAsync(query, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<NodeFileDTO>> listNodeFileAsync(QueryNodeFileDTO query)
    {
        return _iceI_listNodeFileAsync(query, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<NodeFileDTO>> listNodeFileAsync(QueryNodeFileDTO query, java.util.Map<String, String> context)
    {
        return _iceI_listNodeFileAsync(query, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<NodeFileDTO>> _iceI_listNodeFileAsync(QueryNodeFileDTO iceP_query, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<NodeFileDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listNodeFile", null, sync, _iceE_listNodeFile);
        f.invoke(true, context, null, ostr -> {
                     QueryNodeFileDTO.ice_write(ostr, iceP_query);
                 }, istr -> {
                     java.util.List<NodeFileDTO> ret;
                     ret = NodeFileListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listNodeFile =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default long summaryNodeLength(QuerySummaryDTO query)
        throws com.maoding.Common.zeroc.CustomException
    {
        return summaryNodeLength(query, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default long summaryNodeLength(QuerySummaryDTO query, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_summaryNodeLengthAsync(query, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.Long> summaryNodeLengthAsync(QuerySummaryDTO query)
    {
        return _iceI_summaryNodeLengthAsync(query, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Long> summaryNodeLengthAsync(QuerySummaryDTO query, java.util.Map<String, String> context)
    {
        return _iceI_summaryNodeLengthAsync(query, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Long> _iceI_summaryNodeLengthAsync(QuerySummaryDTO iceP_query, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Long> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "summaryNodeLength", null, sync, _iceE_summaryNodeLength);
        f.invoke(true, context, null, ostr -> {
                     QuerySummaryDTO.ice_write(ostr, iceP_query);
                 }, istr -> {
                     long ret;
                     ret = istr.readLong();
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_summaryNodeLength =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default void deleteNodeById(com.maoding.User.zeroc.AccountDTO account, String id)
        throws com.maoding.Common.zeroc.CustomException
    {
        deleteNodeById(account, id, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void deleteNodeById(com.maoding.User.zeroc.AccountDTO account, String id, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            _iceI_deleteNodeByIdAsync(account, id, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> deleteNodeByIdAsync(com.maoding.User.zeroc.AccountDTO account, String id)
    {
        return _iceI_deleteNodeByIdAsync(account, id, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> deleteNodeByIdAsync(com.maoding.User.zeroc.AccountDTO account, String id, java.util.Map<String, String> context)
    {
        return _iceI_deleteNodeByIdAsync(account, id, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_deleteNodeByIdAsync(com.maoding.User.zeroc.AccountDTO iceP_account, String iceP_id, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "deleteNodeById", null, sync, _iceE_deleteNodeById);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     ostr.writeString(iceP_id);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_deleteNodeById =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default void deleteNodeByIdList(com.maoding.User.zeroc.AccountDTO account, java.util.List<java.lang.String> idList)
        throws com.maoding.Common.zeroc.CustomException
    {
        deleteNodeByIdList(account, idList, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void deleteNodeByIdList(com.maoding.User.zeroc.AccountDTO account, java.util.List<java.lang.String> idList, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            _iceI_deleteNodeByIdListAsync(account, idList, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> deleteNodeByIdListAsync(com.maoding.User.zeroc.AccountDTO account, java.util.List<java.lang.String> idList)
    {
        return _iceI_deleteNodeByIdListAsync(account, idList, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> deleteNodeByIdListAsync(com.maoding.User.zeroc.AccountDTO account, java.util.List<java.lang.String> idList, java.util.Map<String, String> context)
    {
        return _iceI_deleteNodeByIdListAsync(account, idList, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_deleteNodeByIdListAsync(com.maoding.User.zeroc.AccountDTO iceP_account, java.util.List<java.lang.String> iceP_idList, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "deleteNodeByIdList", null, sync, _iceE_deleteNodeByIdList);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Common.zeroc.StringListHelper.write(ostr, iceP_idList);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_deleteNodeByIdList =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default void deleteNode(com.maoding.User.zeroc.AccountDTO account, SimpleNodeDTO node)
        throws com.maoding.Common.zeroc.CustomException
    {
        deleteNode(account, node, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void deleteNode(com.maoding.User.zeroc.AccountDTO account, SimpleNodeDTO node, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            _iceI_deleteNodeAsync(account, node, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> deleteNodeAsync(com.maoding.User.zeroc.AccountDTO account, SimpleNodeDTO node)
    {
        return _iceI_deleteNodeAsync(account, node, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> deleteNodeAsync(com.maoding.User.zeroc.AccountDTO account, SimpleNodeDTO node, java.util.Map<String, String> context)
    {
        return _iceI_deleteNodeAsync(account, node, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_deleteNodeAsync(com.maoding.User.zeroc.AccountDTO iceP_account, SimpleNodeDTO iceP_node, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "deleteNode", null, sync, _iceE_deleteNode);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     SimpleNodeDTO.ice_write(ostr, iceP_node);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_deleteNode =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default void deleteNodeList(com.maoding.User.zeroc.AccountDTO account, java.util.List<SimpleNodeDTO> node)
        throws com.maoding.Common.zeroc.CustomException
    {
        deleteNodeList(account, node, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void deleteNodeList(com.maoding.User.zeroc.AccountDTO account, java.util.List<SimpleNodeDTO> node, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            _iceI_deleteNodeListAsync(account, node, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> deleteNodeListAsync(com.maoding.User.zeroc.AccountDTO account, java.util.List<SimpleNodeDTO> node)
    {
        return _iceI_deleteNodeListAsync(account, node, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> deleteNodeListAsync(com.maoding.User.zeroc.AccountDTO account, java.util.List<SimpleNodeDTO> node, java.util.Map<String, String> context)
    {
        return _iceI_deleteNodeListAsync(account, node, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_deleteNodeListAsync(com.maoding.User.zeroc.AccountDTO iceP_account, java.util.List<SimpleNodeDTO> iceP_node, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "deleteNodeList", null, sync, _iceE_deleteNodeList);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     SimpleNodeListHelper.write(ostr, iceP_node);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_deleteNodeList =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default SimpleNodeDTO createNode(SimpleNodeDTO parent, UpdateNodeDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return createNode(parent, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default SimpleNodeDTO createNode(SimpleNodeDTO parent, UpdateNodeDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_createNodeAsync(parent, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> createNodeAsync(SimpleNodeDTO parent, UpdateNodeDTO request)
    {
        return _iceI_createNodeAsync(parent, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> createNodeAsync(SimpleNodeDTO parent, UpdateNodeDTO request, java.util.Map<String, String> context)
    {
        return _iceI_createNodeAsync(parent, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> _iceI_createNodeAsync(SimpleNodeDTO iceP_parent, UpdateNodeDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createNode", null, sync, _iceE_createNode);
        f.invoke(true, context, null, ostr -> {
                     SimpleNodeDTO.ice_write(ostr, iceP_parent);
                     UpdateNodeDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     SimpleNodeDTO ret;
                     ret = SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_createNode =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default SimpleNodeDTO createNodeWithRequestOnly(UpdateNodeDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return createNodeWithRequestOnly(request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default SimpleNodeDTO createNodeWithRequestOnly(UpdateNodeDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_createNodeWithRequestOnlyAsync(request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> createNodeWithRequestOnlyAsync(UpdateNodeDTO request)
    {
        return _iceI_createNodeWithRequestOnlyAsync(request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> createNodeWithRequestOnlyAsync(UpdateNodeDTO request, java.util.Map<String, String> context)
    {
        return _iceI_createNodeWithRequestOnlyAsync(request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> _iceI_createNodeWithRequestOnlyAsync(UpdateNodeDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createNodeWithRequestOnly", null, sync, _iceE_createNodeWithRequestOnly);
        f.invoke(true, context, null, ostr -> {
                     UpdateNodeDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     SimpleNodeDTO ret;
                     ret = SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_createNodeWithRequestOnly =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default SimpleNodeDTO updateNodeSimple(SimpleNodeDTO src, UpdateNodeDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return updateNodeSimple(src, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default SimpleNodeDTO updateNodeSimple(SimpleNodeDTO src, UpdateNodeDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_updateNodeSimpleAsync(src, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> updateNodeSimpleAsync(SimpleNodeDTO src, UpdateNodeDTO request)
    {
        return _iceI_updateNodeSimpleAsync(src, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> updateNodeSimpleAsync(SimpleNodeDTO src, UpdateNodeDTO request, java.util.Map<String, String> context)
    {
        return _iceI_updateNodeSimpleAsync(src, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> _iceI_updateNodeSimpleAsync(SimpleNodeDTO iceP_src, UpdateNodeDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "updateNodeSimple", null, sync, _iceE_updateNodeSimple);
        f.invoke(true, context, null, ostr -> {
                     SimpleNodeDTO.ice_write(ostr, iceP_src);
                     UpdateNodeDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     SimpleNodeDTO ret;
                     ret = SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_updateNodeSimple =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    /**
     * @deprecated 使用createNodeFile代替
     **/
    @Deprecated
    default FullNodeDTO createMirror(FullNodeDTO src, UpdateNodeDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return createMirror(src, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * @param context The Context map to send with the invocation.
     * @deprecated 使用createNodeFile代替
     **/
    @Deprecated
    default FullNodeDTO createMirror(FullNodeDTO src, UpdateNodeDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_createMirrorAsync(src, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * @return A future that will be completed with the result.
     * @deprecated 使用createNodeFile代替
     **/
    @Deprecated
    default java.util.concurrent.CompletableFuture<FullNodeDTO> createMirrorAsync(FullNodeDTO src, UpdateNodeDTO request)
    {
        return _iceI_createMirrorAsync(src, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     * @deprecated 使用createNodeFile代替
     **/
    @Deprecated
    default java.util.concurrent.CompletableFuture<FullNodeDTO> createMirrorAsync(FullNodeDTO src, UpdateNodeDTO request, java.util.Map<String, String> context)
    {
        return _iceI_createMirrorAsync(src, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<FullNodeDTO> _iceI_createMirrorAsync(FullNodeDTO iceP_src, UpdateNodeDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<FullNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createMirror", null, sync, _iceE_createMirror);
        f.invoke(true, context, null, ostr -> {
                     FullNodeDTO.ice_write(ostr, iceP_src);
                     UpdateNodeDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     FullNodeDTO ret;
                     ret = FullNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_createMirror =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default java.util.List<SimpleNodeDTO> listNode(QueryNodeDTO query)
        throws com.maoding.Common.zeroc.CustomException
    {
        return listNode(query, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<SimpleNodeDTO> listNode(QueryNodeDTO query, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_listNodeAsync(query, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listNodeAsync(QueryNodeDTO query)
    {
        return _iceI_listNodeAsync(query, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listNodeAsync(QueryNodeDTO query, java.util.Map<String, String> context)
    {
        return _iceI_listNodeAsync(query, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> _iceI_listNodeAsync(QueryNodeDTO iceP_query, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listNode", null, sync, _iceE_listNode);
        f.invoke(true, context, null, ostr -> {
                     QueryNodeDTO.ice_write(ostr, iceP_query);
                 }, istr -> {
                     java.util.List<SimpleNodeDTO> ret;
                     ret = SimpleNodeListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listNode =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default java.util.List<SimpleNodeDTO> listChild(SimpleNodeDTO parent)
        throws com.maoding.Common.zeroc.CustomException
    {
        return listChild(parent, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<SimpleNodeDTO> listChild(SimpleNodeDTO parent, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_listChildAsync(parent, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listChildAsync(SimpleNodeDTO parent)
    {
        return _iceI_listChildAsync(parent, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listChildAsync(SimpleNodeDTO parent, java.util.Map<String, String> context)
    {
        return _iceI_listChildAsync(parent, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> _iceI_listChildAsync(SimpleNodeDTO iceP_parent, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listChild", null, sync, _iceE_listChild);
        f.invoke(true, context, null, ostr -> {
                     SimpleNodeDTO.ice_write(ostr, iceP_parent);
                 }, istr -> {
                     java.util.List<SimpleNodeDTO> ret;
                     ret = SimpleNodeListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listChild =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default java.util.List<SimpleNodeDTO> listChildren(SimpleNodeDTO parent)
        throws com.maoding.Common.zeroc.CustomException
    {
        return listChildren(parent, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<SimpleNodeDTO> listChildren(SimpleNodeDTO parent, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_listChildrenAsync(parent, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listChildrenAsync(SimpleNodeDTO parent)
    {
        return _iceI_listChildrenAsync(parent, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listChildrenAsync(SimpleNodeDTO parent, java.util.Map<String, String> context)
    {
        return _iceI_listChildrenAsync(parent, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> _iceI_listChildrenAsync(SimpleNodeDTO iceP_parent, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listChildren", null, sync, _iceE_listChildren);
        f.invoke(true, context, null, ostr -> {
                     SimpleNodeDTO.ice_write(ostr, iceP_parent);
                 }, istr -> {
                     java.util.List<SimpleNodeDTO> ret;
                     ret = SimpleNodeListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listChildren =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default java.util.List<SimpleNodeDTO> listRoot(String accountId)
        throws com.maoding.Common.zeroc.CustomException
    {
        return listRoot(accountId, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<SimpleNodeDTO> listRoot(String accountId, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_listRootAsync(accountId, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listRootAsync(String accountId)
    {
        return _iceI_listRootAsync(accountId, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listRootAsync(String accountId, java.util.Map<String, String> context)
    {
        return _iceI_listRootAsync(accountId, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> _iceI_listRootAsync(String iceP_accountId, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listRoot", null, sync, _iceE_listRoot);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_accountId);
                 }, istr -> {
                     java.util.List<SimpleNodeDTO> ret;
                     ret = SimpleNodeListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listRoot =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default SimpleNodeDTO getNodeById(java.lang.String id)
        throws com.maoding.Common.zeroc.CustomException
    {
        return getNodeById(id, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default SimpleNodeDTO getNodeById(java.lang.String id, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_getNodeByIdAsync(id, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> getNodeByIdAsync(java.lang.String id)
    {
        return _iceI_getNodeByIdAsync(id, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> getNodeByIdAsync(java.lang.String id, java.util.Map<String, String> context)
    {
        return _iceI_getNodeByIdAsync(id, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> _iceI_getNodeByIdAsync(java.lang.String iceP_id, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getNodeById", null, sync, _iceE_getNodeById);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeSerializable(iceP_id);
                 }, istr -> {
                     SimpleNodeDTO ret;
                     ret = SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_getNodeById =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default SimpleNodeDTO getNodeByPath(java.lang.String path)
        throws com.maoding.Common.zeroc.CustomException
    {
        return getNodeByPath(path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default SimpleNodeDTO getNodeByPath(java.lang.String path, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_getNodeByPathAsync(path, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> getNodeByPathAsync(java.lang.String path)
    {
        return _iceI_getNodeByPathAsync(path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> getNodeByPathAsync(java.lang.String path, java.util.Map<String, String> context)
    {
        return _iceI_getNodeByPathAsync(path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> _iceI_getNodeByPathAsync(java.lang.String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getNodeByPath", null, sync, _iceE_getNodeByPath);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeSerializable(iceP_path);
                 }, istr -> {
                     SimpleNodeDTO ret;
                     ret = SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_getNodeByPath =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default SimpleNodeDTO getNodeByFuzzyPath(java.lang.String fuzzyPath)
        throws com.maoding.Common.zeroc.CustomException
    {
        return getNodeByFuzzyPath(fuzzyPath, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default SimpleNodeDTO getNodeByFuzzyPath(java.lang.String fuzzyPath, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_getNodeByFuzzyPathAsync(fuzzyPath, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> getNodeByFuzzyPathAsync(java.lang.String fuzzyPath)
    {
        return _iceI_getNodeByFuzzyPathAsync(fuzzyPath, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> getNodeByFuzzyPathAsync(java.lang.String fuzzyPath, java.util.Map<String, String> context)
    {
        return _iceI_getNodeByFuzzyPathAsync(fuzzyPath, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> _iceI_getNodeByFuzzyPathAsync(java.lang.String iceP_fuzzyPath, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getNodeByFuzzyPath", null, sync, _iceE_getNodeByFuzzyPath);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeSerializable(iceP_fuzzyPath);
                 }, istr -> {
                     SimpleNodeDTO ret;
                     ret = SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_getNodeByFuzzyPath =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default java.util.List<SimpleNodeDTO> listOldNode(QueryNodeDTO query)
        throws com.maoding.Common.zeroc.CustomException
    {
        return listOldNode(query, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<SimpleNodeDTO> listOldNode(QueryNodeDTO query, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_listOldNodeAsync(query, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listOldNodeAsync(QueryNodeDTO query)
    {
        return _iceI_listOldNodeAsync(query, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<SimpleNodeDTO>> listOldNodeAsync(QueryNodeDTO query, java.util.Map<String, String> context)
    {
        return _iceI_listOldNodeAsync(query, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> _iceI_listOldNodeAsync(QueryNodeDTO iceP_query, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<SimpleNodeDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listOldNode", null, sync, _iceE_listOldNode);
        f.invoke(true, context, null, ostr -> {
                     QueryNodeDTO.ice_write(ostr, iceP_query);
                 }, istr -> {
                     java.util.List<SimpleNodeDTO> ret;
                     ret = SimpleNodeListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listOldNode =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default FullNodeDTO getNodeInfo(SimpleNodeDTO node, QueryNodeInfoDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return getNodeInfo(node, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default FullNodeDTO getNodeInfo(SimpleNodeDTO node, QueryNodeInfoDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_getNodeInfoAsync(node, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<FullNodeDTO> getNodeInfoAsync(SimpleNodeDTO node, QueryNodeInfoDTO request)
    {
        return _iceI_getNodeInfoAsync(node, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<FullNodeDTO> getNodeInfoAsync(SimpleNodeDTO node, QueryNodeInfoDTO request, java.util.Map<String, String> context)
    {
        return _iceI_getNodeInfoAsync(node, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<FullNodeDTO> _iceI_getNodeInfoAsync(SimpleNodeDTO iceP_node, QueryNodeInfoDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<FullNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getNodeInfo", null, sync, _iceE_getNodeInfo);
        f.invoke(true, context, null, ostr -> {
                     SimpleNodeDTO.ice_write(ostr, iceP_node);
                     QueryNodeInfoDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     FullNodeDTO ret;
                     ret = FullNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_getNodeInfo =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default SimpleNodeDTO updateNode(SimpleNodeDTO src, SimpleNodeDTO parent, UpdateNodeDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return updateNode(src, parent, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default SimpleNodeDTO updateNode(SimpleNodeDTO src, SimpleNodeDTO parent, UpdateNodeDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_updateNodeAsync(src, parent, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> updateNodeAsync(SimpleNodeDTO src, SimpleNodeDTO parent, UpdateNodeDTO request)
    {
        return _iceI_updateNodeAsync(src, parent, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<SimpleNodeDTO> updateNodeAsync(SimpleNodeDTO src, SimpleNodeDTO parent, UpdateNodeDTO request, java.util.Map<String, String> context)
    {
        return _iceI_updateNodeAsync(src, parent, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> _iceI_updateNodeAsync(SimpleNodeDTO iceP_src, SimpleNodeDTO iceP_parent, UpdateNodeDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "updateNode", null, sync, _iceE_updateNode);
        f.invoke(true, context, null, ostr -> {
                     SimpleNodeDTO.ice_write(ostr, iceP_src);
                     SimpleNodeDTO.ice_write(ostr, iceP_parent);
                     UpdateNodeDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     SimpleNodeDTO ret;
                     ret = SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_updateNode =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static StorageServicePrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), StorageServicePrx.class, _StorageServicePrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static StorageServicePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), StorageServicePrx.class, _StorageServicePrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static StorageServicePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), StorageServicePrx.class, _StorageServicePrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static StorageServicePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), StorageServicePrx.class, _StorageServicePrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static StorageServicePrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, StorageServicePrx.class, _StorageServicePrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static StorageServicePrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, StorageServicePrx.class, _StorageServicePrxI.class);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the per-proxy context.
     * @param newContext The context for the new proxy.
     * @return A proxy with the specified per-proxy context.
     **/
    @Override
    default StorageServicePrx ice_context(java.util.Map<String, String> newContext)
    {
        return (StorageServicePrx)_ice_context(newContext);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the adapter ID.
     * @param newAdapterId The adapter ID for the new proxy.
     * @return A proxy with the specified adapter ID.
     **/
    @Override
    default StorageServicePrx ice_adapterId(String newAdapterId)
    {
        return (StorageServicePrx)_ice_adapterId(newAdapterId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoints.
     * @param newEndpoints The endpoints for the new proxy.
     * @return A proxy with the specified endpoints.
     **/
    @Override
    default StorageServicePrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints)
    {
        return (StorageServicePrx)_ice_endpoints(newEndpoints);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator cache timeout.
     * @param newTimeout The new locator cache timeout (in seconds).
     * @return A proxy with the specified locator cache timeout.
     **/
    @Override
    default StorageServicePrx ice_locatorCacheTimeout(int newTimeout)
    {
        return (StorageServicePrx)_ice_locatorCacheTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the invocation timeout.
     * @param newTimeout The new invocation timeout (in seconds).
     * @return A proxy with the specified invocation timeout.
     **/
    @Override
    default StorageServicePrx ice_invocationTimeout(int newTimeout)
    {
        return (StorageServicePrx)_ice_invocationTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for connection caching.
     * @param newCache <code>true</code> if the new proxy should cache connections; <code>false</code> otherwise.
     * @return A proxy with the specified caching policy.
     **/
    @Override
    default StorageServicePrx ice_connectionCached(boolean newCache)
    {
        return (StorageServicePrx)_ice_connectionCached(newCache);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoint selection policy.
     * @param newType The new endpoint selection policy.
     * @return A proxy with the specified endpoint selection policy.
     **/
    @Override
    default StorageServicePrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType)
    {
        return (StorageServicePrx)_ice_endpointSelection(newType);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for how it selects endpoints.
     * @param b If <code>b</code> is <code>true</code>, only endpoints that use a secure transport are
     * used by the new proxy. If <code>b</code> is false, the returned proxy uses both secure and
     * insecure endpoints.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default StorageServicePrx ice_secure(boolean b)
    {
        return (StorageServicePrx)_ice_secure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the encoding used to marshal parameters.
     * @param e The encoding version to use to marshal request parameters.
     * @return A proxy with the specified encoding version.
     **/
    @Override
    default StorageServicePrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e)
    {
        return (StorageServicePrx)_ice_encodingVersion(e);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its endpoint selection policy.
     * @param b If <code>b</code> is <code>true</code>, the new proxy will use secure endpoints for invocations
     * and only use insecure endpoints if an invocation cannot be made via secure endpoints. If <code>b</code> is
     * <code>false</code>, the proxy prefers insecure endpoints to secure ones.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default StorageServicePrx ice_preferSecure(boolean b)
    {
        return (StorageServicePrx)_ice_preferSecure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the router.
     * @param router The router for the new proxy.
     * @return A proxy with the specified router.
     **/
    @Override
    default StorageServicePrx ice_router(com.zeroc.Ice.RouterPrx router)
    {
        return (StorageServicePrx)_ice_router(router);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator.
     * @param locator The locator for the new proxy.
     * @return A proxy with the specified locator.
     **/
    @Override
    default StorageServicePrx ice_locator(com.zeroc.Ice.LocatorPrx locator)
    {
        return (StorageServicePrx)_ice_locator(locator);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for collocation optimization.
     * @param b <code>true</code> if the new proxy enables collocation optimization; <code>false</code> otherwise.
     * @return A proxy with the specified collocation optimization.
     **/
    @Override
    default StorageServicePrx ice_collocationOptimized(boolean b)
    {
        return (StorageServicePrx)_ice_collocationOptimized(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses twoway invocations.
     * @return A proxy that uses twoway invocations.
     **/
    @Override
    default StorageServicePrx ice_twoway()
    {
        return (StorageServicePrx)_ice_twoway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses oneway invocations.
     * @return A proxy that uses oneway invocations.
     **/
    @Override
    default StorageServicePrx ice_oneway()
    {
        return (StorageServicePrx)_ice_oneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch oneway invocations.
     * @return A proxy that uses batch oneway invocations.
     **/
    @Override
    default StorageServicePrx ice_batchOneway()
    {
        return (StorageServicePrx)_ice_batchOneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses datagram invocations.
     * @return A proxy that uses datagram invocations.
     **/
    @Override
    default StorageServicePrx ice_datagram()
    {
        return (StorageServicePrx)_ice_datagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch datagram invocations.
     * @return A proxy that uses batch datagram invocations.
     **/
    @Override
    default StorageServicePrx ice_batchDatagram()
    {
        return (StorageServicePrx)_ice_batchDatagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, except for compression.
     * @param co <code>true</code> enables compression for the new proxy; <code>false</code> disables compression.
     * @return A proxy with the specified compression setting.
     **/
    @Override
    default StorageServicePrx ice_compress(boolean co)
    {
        return (StorageServicePrx)_ice_compress(co);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection timeout setting.
     * @param t The connection timeout for the proxy in milliseconds.
     * @return A proxy with the specified timeout.
     **/
    @Override
    default StorageServicePrx ice_timeout(int t)
    {
        return (StorageServicePrx)_ice_timeout(t);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection ID.
     * @param connectionId The connection ID for the new proxy. An empty string removes the connection ID.
     * @return A proxy with the specified connection ID.
     **/
    @Override
    default StorageServicePrx ice_connectionId(String connectionId)
    {
        return (StorageServicePrx)_ice_connectionId(connectionId);
    }

    static String ice_staticId()
    {
        return "::zeroc::StorageService";
    }
}
