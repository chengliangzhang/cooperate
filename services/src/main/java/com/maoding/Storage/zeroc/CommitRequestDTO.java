// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Storage.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.Storage.zeroc;

public class CommitRequestDTO implements java.lang.Cloneable,
                                         java.io.Serializable
{
    public String path;

    public String getPath()
    {
        return path;
    }

    public void setPath(String path)
    {
        this.path = path;
    }

    public String major;

    public String getMajor()
    {
        return major;
    }

    public void setMajor(String major)
    {
        this.major = major;
    }

    public String title;

    public String getTitle()
    {
        return title;
    }

    public void setTitle(String title)
    {
        this.title = title;
    }

    public String remark;

    public String getRemark()
    {
        return remark;
    }

    public void setRemark(String remark)
    {
        this.remark = remark;
    }

    public CommitRequestDTO()
    {
        this.path = "";
        this.major = "";
        this.title = "";
        this.remark = "";
    }

    public CommitRequestDTO(String path, String major, String title, String remark)
    {
        this.path = path;
        this.major = major;
        this.title = title;
        this.remark = remark;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        CommitRequestDTO r = null;
        if(rhs instanceof CommitRequestDTO)
        {
            r = (CommitRequestDTO)rhs;
        }

        if(r != null)
        {
            if(this.path != r.path)
            {
                if(this.path == null || r.path == null || !this.path.equals(r.path))
                {
                    return false;
                }
            }
            if(this.major != r.major)
            {
                if(this.major == null || r.major == null || !this.major.equals(r.major))
                {
                    return false;
                }
            }
            if(this.title != r.title)
            {
                if(this.title == null || r.title == null || !this.title.equals(r.title))
                {
                    return false;
                }
            }
            if(this.remark != r.remark)
            {
                if(this.remark == null || r.remark == null || !this.remark.equals(r.remark))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::zeroc::CommitRequestDTO");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, path);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, major);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, title);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, remark);
        return h_;
    }

    public CommitRequestDTO clone()
    {
        CommitRequestDTO c = null;
        try
        {
            c = (CommitRequestDTO)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.path);
        ostr.writeString(this.major);
        ostr.writeString(this.title);
        ostr.writeString(this.remark);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.path = istr.readString();
        this.major = istr.readString();
        this.title = istr.readString();
        this.remark = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, CommitRequestDTO v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public CommitRequestDTO ice_read(com.zeroc.Ice.InputStream istr)
    {
        CommitRequestDTO v = new CommitRequestDTO();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<CommitRequestDTO> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, CommitRequestDTO v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<CommitRequestDTO> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(CommitRequestDTO.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final CommitRequestDTO _nullMarshalValue = new CommitRequestDTO();

    public static final long serialVersionUID = 2146881473L;
}
