// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `StorageData.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.Storage.zeroc;

public class FileNodeDTO implements java.lang.Cloneable,
                                    java.io.Serializable
{
    public SimpleNodeDTO basic;

    public SimpleNodeDTO getBasic()
    {
        return basic;
    }

    public void setBasic(SimpleNodeDTO basic)
    {
        this.basic = basic;
    }

    public short fileTypeId;

    public short getFileTypeId()
    {
        return fileTypeId;
    }

    public void setFileTypeId(short fileTypeId)
    {
        this.fileTypeId = fileTypeId;
    }

    public String fileTypeName;

    public String getFileTypeName()
    {
        return fileTypeName;
    }

    public void setFileTypeName(String fileTypeName)
    {
        this.fileTypeName = fileTypeName;
    }

    public String fileVersion;

    public String getFileVersion()
    {
        return fileVersion;
    }

    public void setFileVersion(String fileVersion)
    {
        this.fileVersion = fileVersion;
    }

    public String fileChecksum;

    public String getFileChecksum()
    {
        return fileChecksum;
    }

    public void setFileChecksum(String fileChecksum)
    {
        this.fileChecksum = fileChecksum;
    }

    public String majorId;

    public String getMajorId()
    {
        return majorId;
    }

    public void setMajorId(String majorId)
    {
        this.majorId = majorId;
    }

    public String majorName;

    public String getMajorName()
    {
        return majorName;
    }

    public void setMajorName(String majorName)
    {
        this.majorName = majorName;
    }

    public String mainFileId;

    public String getMainFileId()
    {
        return mainFileId;
    }

    public void setMainFileId(String mainFileId)
    {
        this.mainFileId = mainFileId;
    }

    public String fileRemark;

    public String getFileRemark()
    {
        return fileRemark;
    }

    public void setFileRemark(String fileRemark)
    {
        this.fileRemark = fileRemark;
    }

    public String serverTypeId;

    public String getServerTypeId()
    {
        return serverTypeId;
    }

    public void setServerTypeId(String serverTypeId)
    {
        this.serverTypeId = serverTypeId;
    }

    public String serverTypeName;

    public String getServerTypeName()
    {
        return serverTypeName;
    }

    public void setServerTypeName(String serverTypeName)
    {
        this.serverTypeName = serverTypeName;
    }

    public String serverAddress;

    public String getServerAddress()
    {
        return serverAddress;
    }

    public void setServerAddress(String serverAddress)
    {
        this.serverAddress = serverAddress;
    }

    public String readFileScope;

    public String getReadFileScope()
    {
        return readFileScope;
    }

    public void setReadFileScope(String readFileScope)
    {
        this.readFileScope = readFileScope;
    }

    public String readFileKey;

    public String getReadFileKey()
    {
        return readFileKey;
    }

    public void setReadFileKey(String readFileKey)
    {
        this.readFileKey = readFileKey;
    }

    public String writeFileScope;

    public String getWriteFileScope()
    {
        return writeFileScope;
    }

    public void setWriteFileScope(String writeFileScope)
    {
        this.writeFileScope = writeFileScope;
    }

    public String writeFileKey;

    public String getWriteFileKey()
    {
        return writeFileKey;
    }

    public void setWriteFileKey(String writeFileKey)
    {
        this.writeFileKey = writeFileKey;
    }

    public java.util.List<HistoryDTO> historyList;

    public java.util.List<HistoryDTO> getHistoryList()
    {
        return historyList;
    }

    public void setHistoryList(java.util.List<HistoryDTO> historyList)
    {
        this.historyList = historyList;
    }

    public FileNodeDTO()
    {
        this.basic = new SimpleNodeDTO();
        this.fileTypeName = "";
        this.fileVersion = "";
        this.fileChecksum = "";
        this.majorId = "";
        this.majorName = "";
        this.mainFileId = "";
        this.fileRemark = "";
        this.serverTypeId = "";
        this.serverTypeName = "";
        this.serverAddress = "";
        this.readFileScope = "";
        this.readFileKey = "";
        this.writeFileScope = "";
        this.writeFileKey = "";
    }

    public FileNodeDTO(SimpleNodeDTO basic, short fileTypeId, String fileTypeName, String fileVersion, String fileChecksum, String majorId, String majorName, String mainFileId, String fileRemark, String serverTypeId, String serverTypeName, String serverAddress, String readFileScope, String readFileKey, String writeFileScope, String writeFileKey, java.util.List<HistoryDTO> historyList)
    {
        this.basic = basic;
        this.fileTypeId = fileTypeId;
        this.fileTypeName = fileTypeName;
        this.fileVersion = fileVersion;
        this.fileChecksum = fileChecksum;
        this.majorId = majorId;
        this.majorName = majorName;
        this.mainFileId = mainFileId;
        this.fileRemark = fileRemark;
        this.serverTypeId = serverTypeId;
        this.serverTypeName = serverTypeName;
        this.serverAddress = serverAddress;
        this.readFileScope = readFileScope;
        this.readFileKey = readFileKey;
        this.writeFileScope = writeFileScope;
        this.writeFileKey = writeFileKey;
        this.historyList = historyList;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        FileNodeDTO r = null;
        if(rhs instanceof FileNodeDTO)
        {
            r = (FileNodeDTO)rhs;
        }

        if(r != null)
        {
            if(this.basic != r.basic)
            {
                if(this.basic == null || r.basic == null || !this.basic.equals(r.basic))
                {
                    return false;
                }
            }
            if(this.fileTypeId != r.fileTypeId)
            {
                return false;
            }
            if(this.fileTypeName != r.fileTypeName)
            {
                if(this.fileTypeName == null || r.fileTypeName == null || !this.fileTypeName.equals(r.fileTypeName))
                {
                    return false;
                }
            }
            if(this.fileVersion != r.fileVersion)
            {
                if(this.fileVersion == null || r.fileVersion == null || !this.fileVersion.equals(r.fileVersion))
                {
                    return false;
                }
            }
            if(this.fileChecksum != r.fileChecksum)
            {
                if(this.fileChecksum == null || r.fileChecksum == null || !this.fileChecksum.equals(r.fileChecksum))
                {
                    return false;
                }
            }
            if(this.majorId != r.majorId)
            {
                if(this.majorId == null || r.majorId == null || !this.majorId.equals(r.majorId))
                {
                    return false;
                }
            }
            if(this.majorName != r.majorName)
            {
                if(this.majorName == null || r.majorName == null || !this.majorName.equals(r.majorName))
                {
                    return false;
                }
            }
            if(this.mainFileId != r.mainFileId)
            {
                if(this.mainFileId == null || r.mainFileId == null || !this.mainFileId.equals(r.mainFileId))
                {
                    return false;
                }
            }
            if(this.fileRemark != r.fileRemark)
            {
                if(this.fileRemark == null || r.fileRemark == null || !this.fileRemark.equals(r.fileRemark))
                {
                    return false;
                }
            }
            if(this.serverTypeId != r.serverTypeId)
            {
                if(this.serverTypeId == null || r.serverTypeId == null || !this.serverTypeId.equals(r.serverTypeId))
                {
                    return false;
                }
            }
            if(this.serverTypeName != r.serverTypeName)
            {
                if(this.serverTypeName == null || r.serverTypeName == null || !this.serverTypeName.equals(r.serverTypeName))
                {
                    return false;
                }
            }
            if(this.serverAddress != r.serverAddress)
            {
                if(this.serverAddress == null || r.serverAddress == null || !this.serverAddress.equals(r.serverAddress))
                {
                    return false;
                }
            }
            if(this.readFileScope != r.readFileScope)
            {
                if(this.readFileScope == null || r.readFileScope == null || !this.readFileScope.equals(r.readFileScope))
                {
                    return false;
                }
            }
            if(this.readFileKey != r.readFileKey)
            {
                if(this.readFileKey == null || r.readFileKey == null || !this.readFileKey.equals(r.readFileKey))
                {
                    return false;
                }
            }
            if(this.writeFileScope != r.writeFileScope)
            {
                if(this.writeFileScope == null || r.writeFileScope == null || !this.writeFileScope.equals(r.writeFileScope))
                {
                    return false;
                }
            }
            if(this.writeFileKey != r.writeFileKey)
            {
                if(this.writeFileKey == null || r.writeFileKey == null || !this.writeFileKey.equals(r.writeFileKey))
                {
                    return false;
                }
            }
            if(this.historyList != r.historyList)
            {
                if(this.historyList == null || r.historyList == null || !this.historyList.equals(r.historyList))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::zeroc::FileNodeDTO");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, basic);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileTypeName);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileVersion);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileChecksum);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, majorId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, majorName);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, mainFileId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, fileRemark);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, serverTypeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, serverTypeName);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, serverAddress);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, readFileScope);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, readFileKey);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, writeFileScope);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, writeFileKey);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, historyList);
        return h_;
    }

    public FileNodeDTO clone()
    {
        FileNodeDTO c = null;
        try
        {
            c = (FileNodeDTO)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        SimpleNodeDTO.ice_write(ostr, this.basic);
        ostr.writeShort(this.fileTypeId);
        ostr.writeString(this.fileTypeName);
        ostr.writeString(this.fileVersion);
        ostr.writeString(this.fileChecksum);
        ostr.writeString(this.majorId);
        ostr.writeString(this.majorName);
        ostr.writeString(this.mainFileId);
        ostr.writeString(this.fileRemark);
        ostr.writeString(this.serverTypeId);
        ostr.writeString(this.serverTypeName);
        ostr.writeString(this.serverAddress);
        ostr.writeString(this.readFileScope);
        ostr.writeString(this.readFileKey);
        ostr.writeString(this.writeFileScope);
        ostr.writeString(this.writeFileKey);
        HistoryListHelper.write(ostr, this.historyList);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.basic = SimpleNodeDTO.ice_read(istr);
        this.fileTypeId = istr.readShort();
        this.fileTypeName = istr.readString();
        this.fileVersion = istr.readString();
        this.fileChecksum = istr.readString();
        this.majorId = istr.readString();
        this.majorName = istr.readString();
        this.mainFileId = istr.readString();
        this.fileRemark = istr.readString();
        this.serverTypeId = istr.readString();
        this.serverTypeName = istr.readString();
        this.serverAddress = istr.readString();
        this.readFileScope = istr.readString();
        this.readFileKey = istr.readString();
        this.writeFileScope = istr.readString();
        this.writeFileKey = istr.readString();
        this.historyList = HistoryListHelper.read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, FileNodeDTO v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public FileNodeDTO ice_read(com.zeroc.Ice.InputStream istr)
    {
        FileNodeDTO v = new FileNodeDTO();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<FileNodeDTO> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, FileNodeDTO v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<FileNodeDTO> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(FileNodeDTO.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final FileNodeDTO _nullMarshalValue = new FileNodeDTO();

    public static final long serialVersionUID = -14132188L;
}
