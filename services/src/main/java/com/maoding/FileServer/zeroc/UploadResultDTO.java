// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `FileServer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.FileServer.zeroc;

public class UploadResultDTO implements java.lang.Cloneable,
                                        java.io.Serializable
{
    public java.lang.Integer status;

    public java.lang.Integer getStatus()
    {
        return status;
    }

    public void setStatus(java.lang.Integer status)
    {
        this.status = status;
    }

    public String msg;

    public String getMsg()
    {
        return msg;
    }

    public void setMsg(String msg)
    {
        this.msg = msg;
    }

    public FileMultipartDTO data;

    public FileMultipartDTO getData()
    {
        return data;
    }

    public void setData(FileMultipartDTO data)
    {
        this.data = data;
    }

    public java.lang.Integer requestId;

    public java.lang.Integer getRequestId()
    {
        return requestId;
    }

    public void setRequestId(java.lang.Integer requestId)
    {
        this.requestId = requestId;
    }

    public String uploadId;

    public String getUploadId()
    {
        return uploadId;
    }

    public void setUploadId(String uploadId)
    {
        this.uploadId = uploadId;
    }

    public java.lang.Integer chunkId;

    public java.lang.Integer getChunkId()
    {
        return chunkId;
    }

    public void setChunkId(java.lang.Integer chunkId)
    {
        this.chunkId = chunkId;
    }

    public java.lang.Integer chunkSize;

    public java.lang.Integer getChunkSize()
    {
        return chunkSize;
    }

    public void setChunkSize(java.lang.Integer chunkSize)
    {
        this.chunkSize = chunkSize;
    }

    public UploadResultDTO()
    {
        this.msg = "";
        this.data = new FileMultipartDTO();
        this.uploadId = "";
    }

    public UploadResultDTO(java.lang.Integer status, String msg, FileMultipartDTO data, java.lang.Integer requestId, String uploadId, java.lang.Integer chunkId, java.lang.Integer chunkSize)
    {
        this.status = status;
        this.msg = msg;
        this.data = data;
        this.requestId = requestId;
        this.uploadId = uploadId;
        this.chunkId = chunkId;
        this.chunkSize = chunkSize;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        UploadResultDTO r = null;
        if(rhs instanceof UploadResultDTO)
        {
            r = (UploadResultDTO)rhs;
        }

        if(r != null)
        {
            if(this.status != r.status)
            {
                if(this.status == null || r.status == null || !this.status.equals(r.status))
                {
                    return false;
                }
            }
            if(this.msg != r.msg)
            {
                if(this.msg == null || r.msg == null || !this.msg.equals(r.msg))
                {
                    return false;
                }
            }
            if(this.data != r.data)
            {
                if(this.data == null || r.data == null || !this.data.equals(r.data))
                {
                    return false;
                }
            }
            if(this.requestId != r.requestId)
            {
                if(this.requestId == null || r.requestId == null || !this.requestId.equals(r.requestId))
                {
                    return false;
                }
            }
            if(this.uploadId != r.uploadId)
            {
                if(this.uploadId == null || r.uploadId == null || !this.uploadId.equals(r.uploadId))
                {
                    return false;
                }
            }
            if(this.chunkId != r.chunkId)
            {
                if(this.chunkId == null || r.chunkId == null || !this.chunkId.equals(r.chunkId))
                {
                    return false;
                }
            }
            if(this.chunkSize != r.chunkSize)
            {
                if(this.chunkSize == null || r.chunkSize == null || !this.chunkSize.equals(r.chunkSize))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::zeroc::UploadResultDTO");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, status);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, msg);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, data);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, requestId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, uploadId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, chunkId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, chunkSize);
        return h_;
    }

    public UploadResultDTO clone()
    {
        UploadResultDTO c = null;
        try
        {
            c = (UploadResultDTO)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeSerializable(this.status);
        ostr.writeString(this.msg);
        FileMultipartDTO.ice_write(ostr, this.data);
        ostr.writeSerializable(this.requestId);
        ostr.writeString(this.uploadId);
        ostr.writeSerializable(this.chunkId);
        ostr.writeSerializable(this.chunkSize);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.status = istr.readSerializable(java.lang.Integer.class);
        this.msg = istr.readString();
        this.data = FileMultipartDTO.ice_read(istr);
        this.requestId = istr.readSerializable(java.lang.Integer.class);
        this.uploadId = istr.readString();
        this.chunkId = istr.readSerializable(java.lang.Integer.class);
        this.chunkSize = istr.readSerializable(java.lang.Integer.class);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, UploadResultDTO v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public UploadResultDTO ice_read(com.zeroc.Ice.InputStream istr)
    {
        UploadResultDTO v = new UploadResultDTO();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<UploadResultDTO> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, UploadResultDTO v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<UploadResultDTO> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(UploadResultDTO.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final UploadResultDTO _nullMarshalValue = new UploadResultDTO();

    public static final long serialVersionUID = 81541439L;
}
