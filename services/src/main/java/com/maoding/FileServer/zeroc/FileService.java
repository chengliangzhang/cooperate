// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `FileServer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.FileServer.zeroc;

public interface FileService extends com.zeroc.Ice.Object
{
    void setFileServerType(java.lang.Integer type, com.zeroc.Ice.Current current);

    java.lang.Integer getFileServerType(com.zeroc.Ice.Current current);

    FileRequestDTO getUploadRequest(FileDTO src, java.lang.Integer mode, CallbackDTO callback, com.zeroc.Ice.Current current);

    FileRequestDTO getDownloadRequest(FileDTO src, java.lang.Integer mode, CallbackDTO callback, com.zeroc.Ice.Current current);

    UploadResultDTO upload(UploadRequestDTO request, com.zeroc.Ice.Current current);

    DownloadResultDTO download(DownloadRequestDTO request, com.zeroc.Ice.Current current);

    String duplicateFile(FileDTO src, com.zeroc.Ice.Current current);

    void deleteFile(FileDTO src, com.zeroc.Ice.Current current);

    java.lang.Boolean isExist(FileDTO src, com.zeroc.Ice.Current current);

    java.util.List<java.lang.String> listFile(String scope, com.zeroc.Ice.Current current);

    java.util.List<java.lang.String> listScope(com.zeroc.Ice.Current current);

    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::zeroc::FileService"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::zeroc::FileService";
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setFileServerType(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        java.lang.Integer iceP_type;
        iceP_type = istr.readSerializable(java.lang.Integer.class);
        inS.endReadParams();
        obj.setFileServerType(iceP_type, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getFileServerType(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        java.lang.Integer ret = obj.getFileServerType(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeSerializable(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getUploadRequest(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        FileDTO iceP_src;
        java.lang.Integer iceP_mode;
        CallbackDTO iceP_callback;
        iceP_src = FileDTO.ice_read(istr);
        iceP_mode = istr.readSerializable(java.lang.Integer.class);
        iceP_callback = CallbackDTO.ice_read(istr);
        inS.endReadParams();
        FileRequestDTO ret = obj.getUploadRequest(iceP_src, iceP_mode, iceP_callback, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        FileRequestDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getDownloadRequest(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        FileDTO iceP_src;
        java.lang.Integer iceP_mode;
        CallbackDTO iceP_callback;
        iceP_src = FileDTO.ice_read(istr);
        iceP_mode = istr.readSerializable(java.lang.Integer.class);
        iceP_callback = CallbackDTO.ice_read(istr);
        inS.endReadParams();
        FileRequestDTO ret = obj.getDownloadRequest(iceP_src, iceP_mode, iceP_callback, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        FileRequestDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_upload(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        UploadRequestDTO iceP_request;
        iceP_request = UploadRequestDTO.ice_read(istr);
        inS.endReadParams();
        UploadResultDTO ret = obj.upload(iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        UploadResultDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_download(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        DownloadRequestDTO iceP_request;
        iceP_request = DownloadRequestDTO.ice_read(istr);
        inS.endReadParams();
        DownloadResultDTO ret = obj.download(iceP_request, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        DownloadResultDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_duplicateFile(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        FileDTO iceP_src;
        iceP_src = FileDTO.ice_read(istr);
        inS.endReadParams();
        String ret = obj.duplicateFile(iceP_src, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_deleteFile(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        FileDTO iceP_src;
        iceP_src = FileDTO.ice_read(istr);
        inS.endReadParams();
        obj.deleteFile(iceP_src, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_isExist(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        FileDTO iceP_src;
        iceP_src = FileDTO.ice_read(istr);
        inS.endReadParams();
        java.lang.Boolean ret = obj.isExist(iceP_src, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeSerializable(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listFile(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_scope;
        iceP_scope = istr.readString();
        inS.endReadParams();
        java.util.List<java.lang.String> ret = obj.listFile(iceP_scope, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        FileListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listScope(FileService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        java.util.List<java.lang.String> ret = obj.listScope(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ScopeListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    final static String[] _iceOps =
    {
        "deleteFile",
        "download",
        "duplicateFile",
        "getDownloadRequest",
        "getFileServerType",
        "getUploadRequest",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "isExist",
        "listFile",
        "listScope",
        "setFileServerType",
        "upload"
    };

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_deleteFile(this, in, current);
            }
            case 1:
            {
                return _iceD_download(this, in, current);
            }
            case 2:
            {
                return _iceD_duplicateFile(this, in, current);
            }
            case 3:
            {
                return _iceD_getDownloadRequest(this, in, current);
            }
            case 4:
            {
                return _iceD_getFileServerType(this, in, current);
            }
            case 5:
            {
                return _iceD_getUploadRequest(this, in, current);
            }
            case 6:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 7:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 8:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 9:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 10:
            {
                return _iceD_isExist(this, in, current);
            }
            case 11:
            {
                return _iceD_listFile(this, in, current);
            }
            case 12:
            {
                return _iceD_listScope(this, in, current);
            }
            case 13:
            {
                return _iceD_setFileServerType(this, in, current);
            }
            case 14:
            {
                return _iceD_upload(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
