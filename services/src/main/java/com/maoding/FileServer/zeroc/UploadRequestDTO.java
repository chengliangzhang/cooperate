// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `FileServer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.FileServer.zeroc;

public class UploadRequestDTO implements java.lang.Cloneable,
                                         java.io.Serializable
{
    public int requestId;

    public int getRequestId()
    {
        return requestId;
    }

    public void setRequestId(int requestId)
    {
        this.requestId = requestId;
    }

    public String uploadId;

    public String getUploadId()
    {
        return uploadId;
    }

    public void setUploadId(String uploadId)
    {
        this.uploadId = uploadId;
    }

    public int chunkCount;

    public int getChunkCount()
    {
        return chunkCount;
    }

    public void setChunkCount(int chunkCount)
    {
        this.chunkCount = chunkCount;
    }

    public int chunkPerSize;

    public int getChunkPerSize()
    {
        return chunkPerSize;
    }

    public void setChunkPerSize(int chunkPerSize)
    {
        this.chunkPerSize = chunkPerSize;
    }

    public int chunkId;

    public int getChunkId()
    {
        return chunkId;
    }

    public void setChunkId(int chunkId)
    {
        this.chunkId = chunkId;
    }

    public int chunkSize;

    public int getChunkSize()
    {
        return chunkSize;
    }

    public void setChunkSize(int chunkSize)
    {
        this.chunkSize = chunkSize;
    }

    public FileMultipartDTO multipart;

    public FileMultipartDTO getMultipart()
    {
        return multipart;
    }

    public void setMultipart(FileMultipartDTO multipart)
    {
        this.multipart = multipart;
    }

    public java.util.Map<java.lang.String, java.lang.String> params;

    public java.util.Map<java.lang.String, java.lang.String> getParams()
    {
        return params;
    }

    public void setParams(java.util.Map<java.lang.String, java.lang.String> params)
    {
        this.params = params;
    }

    public UploadRequestDTO()
    {
        this.uploadId = "";
        this.multipart = new FileMultipartDTO();
    }

    public UploadRequestDTO(int requestId, String uploadId, int chunkCount, int chunkPerSize, int chunkId, int chunkSize, FileMultipartDTO multipart, java.util.Map<java.lang.String, java.lang.String> params)
    {
        this.requestId = requestId;
        this.uploadId = uploadId;
        this.chunkCount = chunkCount;
        this.chunkPerSize = chunkPerSize;
        this.chunkId = chunkId;
        this.chunkSize = chunkSize;
        this.multipart = multipart;
        this.params = params;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        UploadRequestDTO r = null;
        if(rhs instanceof UploadRequestDTO)
        {
            r = (UploadRequestDTO)rhs;
        }

        if(r != null)
        {
            if(this.requestId != r.requestId)
            {
                return false;
            }
            if(this.uploadId != r.uploadId)
            {
                if(this.uploadId == null || r.uploadId == null || !this.uploadId.equals(r.uploadId))
                {
                    return false;
                }
            }
            if(this.chunkCount != r.chunkCount)
            {
                return false;
            }
            if(this.chunkPerSize != r.chunkPerSize)
            {
                return false;
            }
            if(this.chunkId != r.chunkId)
            {
                return false;
            }
            if(this.chunkSize != r.chunkSize)
            {
                return false;
            }
            if(this.multipart != r.multipart)
            {
                if(this.multipart == null || r.multipart == null || !this.multipart.equals(r.multipart))
                {
                    return false;
                }
            }
            if(this.params != r.params)
            {
                if(this.params == null || r.params == null || !this.params.equals(r.params))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::zeroc::UploadRequestDTO");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, requestId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, uploadId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, chunkCount);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, chunkPerSize);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, chunkId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, chunkSize);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, multipart);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, params);
        return h_;
    }

    public UploadRequestDTO clone()
    {
        UploadRequestDTO c = null;
        try
        {
            c = (UploadRequestDTO)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeInt(this.requestId);
        ostr.writeString(this.uploadId);
        ostr.writeInt(this.chunkCount);
        ostr.writeInt(this.chunkPerSize);
        ostr.writeInt(this.chunkId);
        ostr.writeInt(this.chunkSize);
        FileMultipartDTO.ice_write(ostr, this.multipart);
        com.maoding.Common.zeroc.MapHelper.write(ostr, this.params);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.requestId = istr.readInt();
        this.uploadId = istr.readString();
        this.chunkCount = istr.readInt();
        this.chunkPerSize = istr.readInt();
        this.chunkId = istr.readInt();
        this.chunkSize = istr.readInt();
        this.multipart = FileMultipartDTO.ice_read(istr);
        this.params = com.maoding.Common.zeroc.MapHelper.read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, UploadRequestDTO v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public UploadRequestDTO ice_read(com.zeroc.Ice.InputStream istr)
    {
        UploadRequestDTO v = new UploadRequestDTO();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<UploadRequestDTO> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, UploadRequestDTO v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<UploadRequestDTO> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(UploadRequestDTO.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final UploadRequestDTO _nullMarshalValue = new UploadRequestDTO();

    public static final long serialVersionUID = 1636128318L;
}
