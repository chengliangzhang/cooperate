// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `FileServer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.FileServer.zeroc;

public class FileMultipartDTO implements java.lang.Cloneable,
                                         java.io.Serializable
{
    public String scope;

    public String getScope()
    {
        return scope;
    }

    public void setScope(String scope)
    {
        this.scope = scope;
    }

    public String key;

    public String getKey()
    {
        return key;
    }

    public void setKey(String key)
    {
        this.key = key;
    }

    public long pos;

    public long getPos()
    {
        return pos;
    }

    public void setPos(long pos)
    {
        this.pos = pos;
    }

    public int size;

    public int getSize()
    {
        return size;
    }

    public void setSize(int size)
    {
        this.size = size;
    }

    public byte[] data;

    public byte[] getData()
    {
        return data;
    }

    public void setData(byte[] data)
    {
        this.data = data;
    }

    public byte getData(int index)
    {
        return this.data[index];
    }

    public void setData(int index, byte val)
    {
        this.data[index] = val;
    }

    public FileMultipartDTO()
    {
        this.scope = "";
        this.key = "";
    }

    public FileMultipartDTO(String scope, String key, long pos, int size, byte[] data)
    {
        this.scope = scope;
        this.key = key;
        this.pos = pos;
        this.size = size;
        this.data = data;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        FileMultipartDTO r = null;
        if(rhs instanceof FileMultipartDTO)
        {
            r = (FileMultipartDTO)rhs;
        }

        if(r != null)
        {
            if(this.scope != r.scope)
            {
                if(this.scope == null || r.scope == null || !this.scope.equals(r.scope))
                {
                    return false;
                }
            }
            if(this.key != r.key)
            {
                if(this.key == null || r.key == null || !this.key.equals(r.key))
                {
                    return false;
                }
            }
            if(this.pos != r.pos)
            {
                return false;
            }
            if(this.size != r.size)
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.data, r.data))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::zeroc::FileMultipartDTO");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, scope);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, key);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, pos);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, size);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, data);
        return h_;
    }

    public FileMultipartDTO clone()
    {
        FileMultipartDTO c = null;
        try
        {
            c = (FileMultipartDTO)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.scope);
        ostr.writeString(this.key);
        ostr.writeLong(this.pos);
        ostr.writeInt(this.size);
        ostr.writeByteSeq(this.data);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.scope = istr.readString();
        this.key = istr.readString();
        this.pos = istr.readLong();
        this.size = istr.readInt();
        this.data = istr.readByteSeq();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, FileMultipartDTO v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public FileMultipartDTO ice_read(com.zeroc.Ice.InputStream istr)
    {
        FileMultipartDTO v = new FileMultipartDTO();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<FileMultipartDTO> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, FileMultipartDTO v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<FileMultipartDTO> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(FileMultipartDTO.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final FileMultipartDTO _nullMarshalValue = new FileMultipartDTO();

    public static final long serialVersionUID = -1251157298L;
}
