// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `FileServer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.FileServer.zeroc;

public interface FileServerService extends com.zeroc.Ice.Object
{
    HttpRequestDTO getUploadRequestForHttp(com.zeroc.Ice.Current current);

    HttpRequestDTO getDownloadRequestForHttp(String src, com.zeroc.Ice.Current current);

    String duplicateFile(String src, com.zeroc.Ice.Current current);

    void deleteFile(String src, com.zeroc.Ice.Current current);

    java.lang.Boolean isExist(String src, com.zeroc.Ice.Current current);

    java.util.List<java.lang.String> listFile(String scope, com.zeroc.Ice.Current current);

    java.util.List<java.lang.String> listScope(com.zeroc.Ice.Current current);

    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::zeroc::FileServerService"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::zeroc::FileServerService";
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getUploadRequestForHttp(FileServerService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        HttpRequestDTO ret = obj.getUploadRequestForHttp(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        HttpRequestDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getDownloadRequestForHttp(FileServerService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_src;
        iceP_src = istr.readString();
        inS.endReadParams();
        HttpRequestDTO ret = obj.getDownloadRequestForHttp(iceP_src, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        HttpRequestDTO.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_duplicateFile(FileServerService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_src;
        iceP_src = istr.readString();
        inS.endReadParams();
        String ret = obj.duplicateFile(iceP_src, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_deleteFile(FileServerService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_src;
        iceP_src = istr.readString();
        inS.endReadParams();
        obj.deleteFile(iceP_src, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_isExist(FileServerService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_src;
        iceP_src = istr.readString();
        inS.endReadParams();
        java.lang.Boolean ret = obj.isExist(iceP_src, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeSerializable(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listFile(FileServerService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_scope;
        iceP_scope = istr.readString();
        inS.endReadParams();
        java.util.List<java.lang.String> ret = obj.listFile(iceP_scope, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        FileListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_listScope(FileServerService obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        java.util.List<java.lang.String> ret = obj.listScope(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ScopeListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    final static String[] _iceOps =
    {
        "deleteFile",
        "duplicateFile",
        "getDownloadRequestForHttp",
        "getUploadRequestForHttp",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "isExist",
        "listFile",
        "listScope"
    };

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_deleteFile(this, in, current);
            }
            case 1:
            {
                return _iceD_duplicateFile(this, in, current);
            }
            case 2:
            {
                return _iceD_getDownloadRequestForHttp(this, in, current);
            }
            case 3:
            {
                return _iceD_getUploadRequestForHttp(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 5:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 6:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 7:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 8:
            {
                return _iceD_isExist(this, in, current);
            }
            case 9:
            {
                return _iceD_listFile(this, in, current);
            }
            case 10:
            {
                return _iceD_listScope(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
