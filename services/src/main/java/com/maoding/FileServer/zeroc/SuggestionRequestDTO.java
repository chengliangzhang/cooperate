// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `FileServerData.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.FileServer.zeroc;

public class SuggestionRequestDTO implements java.lang.Cloneable,
                                             java.io.Serializable
{
    public String typeId;

    public String getTypeId()
    {
        return typeId;
    }

    public void setTypeId(String typeId)
    {
        this.typeId = typeId;
    }

    public boolean isPassed;

    public boolean getIsPassed()
    {
        return isPassed;
    }

    public void setIsPassed(boolean isPassed)
    {
        this.isPassed = isPassed;
    }

    public boolean isIsPassed()
    {
        return isPassed;
    }

    public String content;

    public String getContent()
    {
        return content;
    }

    public void setContent(String content)
    {
        this.content = content;
    }

    public byte[] data;

    public byte[] getData()
    {
        return data;
    }

    public void setData(byte[] data)
    {
        this.data = data;
    }

    public byte getData(int index)
    {
        return this.data[index];
    }

    public void setData(int index, byte val)
    {
        this.data[index] = val;
    }

    public java.util.List<com.maoding.Storage.zeroc.NodeFileDTO> accessoryList;

    public java.util.List<com.maoding.Storage.zeroc.NodeFileDTO> getAccessoryList()
    {
        return accessoryList;
    }

    public void setAccessoryList(java.util.List<com.maoding.Storage.zeroc.NodeFileDTO> accessoryList)
    {
        this.accessoryList = accessoryList;
    }

    public SuggestionRequestDTO()
    {
        this.typeId = "";
        this.content = "";
    }

    public SuggestionRequestDTO(String typeId, boolean isPassed, String content, byte[] data, java.util.List<com.maoding.Storage.zeroc.NodeFileDTO> accessoryList)
    {
        this.typeId = typeId;
        this.isPassed = isPassed;
        this.content = content;
        this.data = data;
        this.accessoryList = accessoryList;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        SuggestionRequestDTO r = null;
        if(rhs instanceof SuggestionRequestDTO)
        {
            r = (SuggestionRequestDTO)rhs;
        }

        if(r != null)
        {
            if(this.typeId != r.typeId)
            {
                if(this.typeId == null || r.typeId == null || !this.typeId.equals(r.typeId))
                {
                    return false;
                }
            }
            if(this.isPassed != r.isPassed)
            {
                return false;
            }
            if(this.content != r.content)
            {
                if(this.content == null || r.content == null || !this.content.equals(r.content))
                {
                    return false;
                }
            }
            if(!java.util.Arrays.equals(this.data, r.data))
            {
                return false;
            }
            if(this.accessoryList != r.accessoryList)
            {
                if(this.accessoryList == null || r.accessoryList == null || !this.accessoryList.equals(r.accessoryList))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::zeroc::SuggestionRequestDTO");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, typeId);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, isPassed);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, content);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, data);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, accessoryList);
        return h_;
    }

    public SuggestionRequestDTO clone()
    {
        SuggestionRequestDTO c = null;
        try
        {
            c = (SuggestionRequestDTO)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.typeId);
        ostr.writeBool(this.isPassed);
        ostr.writeString(this.content);
        ostr.writeByteSeq(this.data);
        com.maoding.Storage.zeroc.NodeFileListHelper.write(ostr, this.accessoryList);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.typeId = istr.readString();
        this.isPassed = istr.readBool();
        this.content = istr.readString();
        this.data = istr.readByteSeq();
        this.accessoryList = com.maoding.Storage.zeroc.NodeFileListHelper.read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, SuggestionRequestDTO v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public SuggestionRequestDTO ice_read(com.zeroc.Ice.InputStream istr)
    {
        SuggestionRequestDTO v = new SuggestionRequestDTO();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<SuggestionRequestDTO> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, SuggestionRequestDTO v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<SuggestionRequestDTO> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(SuggestionRequestDTO.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final SuggestionRequestDTO _nullMarshalValue = new SuggestionRequestDTO();

    public static final long serialVersionUID = 1759797547L;
}
