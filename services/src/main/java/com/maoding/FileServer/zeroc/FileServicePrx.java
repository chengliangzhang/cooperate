// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `FileServer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maoding.FileServer.zeroc;

public interface FileServicePrx extends com.zeroc.Ice.ObjectPrx
{
    default com.maoding.Storage.zeroc.SuggestionDTO createSuggestion(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node, SuggestionRequestDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return createSuggestion(account, node, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.SuggestionDTO createSuggestion(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node, SuggestionRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_createSuggestionAsync(account, node, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SuggestionDTO> createSuggestionAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node, SuggestionRequestDTO request)
    {
        return _iceI_createSuggestionAsync(account, node, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SuggestionDTO> createSuggestionAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node, SuggestionRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_createSuggestionAsync(account, node, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SuggestionDTO> _iceI_createSuggestionAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_node, SuggestionRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SuggestionDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createSuggestion", null, sync, _iceE_createSuggestion);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_node);
                     SuggestionRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     com.maoding.Storage.zeroc.SuggestionDTO ret;
                     ret = com.maoding.Storage.zeroc.SuggestionDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_createSuggestion =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.NodeFileDTO createAccessory(com.maoding.User.zeroc.AccountDTO account, AccessoryRequestDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return createAccessory(account, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.NodeFileDTO createAccessory(com.maoding.User.zeroc.AccountDTO account, AccessoryRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_createAccessoryAsync(account, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.NodeFileDTO> createAccessoryAsync(com.maoding.User.zeroc.AccountDTO account, AccessoryRequestDTO request)
    {
        return _iceI_createAccessoryAsync(account, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.NodeFileDTO> createAccessoryAsync(com.maoding.User.zeroc.AccountDTO account, AccessoryRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_createAccessoryAsync(account, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.NodeFileDTO> _iceI_createAccessoryAsync(com.maoding.User.zeroc.AccountDTO iceP_account, AccessoryRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.NodeFileDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createAccessory", null, sync, _iceE_createAccessory);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     AccessoryRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     com.maoding.Storage.zeroc.NodeFileDTO ret;
                     ret = com.maoding.Storage.zeroc.NodeFileDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_createAccessory =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default java.util.List<com.maoding.Storage.zeroc.SuggestionDTO> listSuggestion(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.QuerySuggestionDTO query)
        throws com.maoding.Common.zeroc.CustomException
    {
        return listSuggestion(account, query, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<com.maoding.Storage.zeroc.SuggestionDTO> listSuggestion(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.QuerySuggestionDTO query, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_listSuggestionAsync(account, query, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.SuggestionDTO>> listSuggestionAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.QuerySuggestionDTO query)
    {
        return _iceI_listSuggestionAsync(account, query, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.SuggestionDTO>> listSuggestionAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.QuerySuggestionDTO query, java.util.Map<String, String> context)
    {
        return _iceI_listSuggestionAsync(account, query, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.SuggestionDTO>> _iceI_listSuggestionAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.QuerySuggestionDTO iceP_query, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.SuggestionDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listSuggestion", null, sync, _iceE_listSuggestion);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.QuerySuggestionDTO.ice_write(ostr, iceP_query);
                 }, istr -> {
                     java.util.List<com.maoding.Storage.zeroc.SuggestionDTO> ret;
                     ret = com.maoding.Storage.zeroc.SuggestionListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listSuggestion =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default String getNodePath(com.maoding.Storage.zeroc.SimpleNodeDTO node)
        throws com.maoding.Common.zeroc.CustomException
    {
        return getNodePath(node, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String getNodePath(com.maoding.Storage.zeroc.SimpleNodeDTO node, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_getNodePathAsync(node, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> getNodePathAsync(com.maoding.Storage.zeroc.SimpleNodeDTO node)
    {
        return _iceI_getNodePathAsync(node, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> getNodePathAsync(com.maoding.Storage.zeroc.SimpleNodeDTO node, java.util.Map<String, String> context)
    {
        return _iceI_getNodePathAsync(node, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.String> _iceI_getNodePathAsync(com.maoding.Storage.zeroc.SimpleNodeDTO iceP_node, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getNodePath", null, sync, _iceE_getNodePath);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_node);
                 }, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_getNodePath =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default String getNodePathForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node)
        throws com.maoding.Common.zeroc.CustomException
    {
        return getNodePathForAccount(account, node, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default String getNodePathForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_getNodePathForAccountAsync(account, node, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> getNodePathForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node)
    {
        return _iceI_getNodePathForAccountAsync(account, node, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.String> getNodePathForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node, java.util.Map<String, String> context)
    {
        return _iceI_getNodePathForAccountAsync(account, node, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.String> _iceI_getNodePathForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_node, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.String> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getNodePathForAccount", null, sync, _iceE_getNodePathForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_node);
                 }, istr -> {
                     String ret;
                     ret = istr.readString();
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_getNodePathForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default java.util.List<com.maoding.Storage.zeroc.HistoryDTO> listHistory(com.maoding.Storage.zeroc.SimpleNodeDTO node, long startTime, long endTime)
        throws com.maoding.Common.zeroc.CustomException
    {
        return listHistory(node, startTime, endTime, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<com.maoding.Storage.zeroc.HistoryDTO> listHistory(com.maoding.Storage.zeroc.SimpleNodeDTO node, long startTime, long endTime, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_listHistoryAsync(node, startTime, endTime, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.HistoryDTO>> listHistoryAsync(com.maoding.Storage.zeroc.SimpleNodeDTO node, long startTime, long endTime)
    {
        return _iceI_listHistoryAsync(node, startTime, endTime, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.HistoryDTO>> listHistoryAsync(com.maoding.Storage.zeroc.SimpleNodeDTO node, long startTime, long endTime, java.util.Map<String, String> context)
    {
        return _iceI_listHistoryAsync(node, startTime, endTime, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.HistoryDTO>> _iceI_listHistoryAsync(com.maoding.Storage.zeroc.SimpleNodeDTO iceP_node, long iceP_startTime, long iceP_endTime, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.HistoryDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listHistory", null, sync, _iceE_listHistory);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_node);
                     ostr.writeLong(iceP_startTime);
                     ostr.writeLong(iceP_endTime);
                 }, istr -> {
                     java.util.List<com.maoding.Storage.zeroc.HistoryDTO> ret;
                     ret = com.maoding.Storage.zeroc.HistoryListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listHistory =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default java.util.List<com.maoding.Storage.zeroc.HistoryDTO> listHistoryForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node, long startTime, long endTime)
        throws com.maoding.Common.zeroc.CustomException
    {
        return listHistoryForAccount(account, node, startTime, endTime, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<com.maoding.Storage.zeroc.HistoryDTO> listHistoryForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node, long startTime, long endTime, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_listHistoryForAccountAsync(account, node, startTime, endTime, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.HistoryDTO>> listHistoryForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node, long startTime, long endTime)
    {
        return _iceI_listHistoryForAccountAsync(account, node, startTime, endTime, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.HistoryDTO>> listHistoryForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node, long startTime, long endTime, java.util.Map<String, String> context)
    {
        return _iceI_listHistoryForAccountAsync(account, node, startTime, endTime, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.HistoryDTO>> _iceI_listHistoryForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_node, long iceP_startTime, long iceP_endTime, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.HistoryDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listHistoryForAccount", null, sync, _iceE_listHistoryForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_node);
                     ostr.writeLong(iceP_startTime);
                     ostr.writeLong(iceP_endTime);
                 }, istr -> {
                     java.util.List<com.maoding.Storage.zeroc.HistoryDTO> ret;
                     ret = com.maoding.Storage.zeroc.HistoryListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listHistoryForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.NodeFileDTO getFileInfo(com.maoding.Storage.zeroc.SimpleNodeDTO node)
        throws com.maoding.Common.zeroc.CustomException
    {
        return getFileInfo(node, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.NodeFileDTO getFileInfo(com.maoding.Storage.zeroc.SimpleNodeDTO node, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_getFileInfoAsync(node, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.NodeFileDTO> getFileInfoAsync(com.maoding.Storage.zeroc.SimpleNodeDTO node)
    {
        return _iceI_getFileInfoAsync(node, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.NodeFileDTO> getFileInfoAsync(com.maoding.Storage.zeroc.SimpleNodeDTO node, java.util.Map<String, String> context)
    {
        return _iceI_getFileInfoAsync(node, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.NodeFileDTO> _iceI_getFileInfoAsync(com.maoding.Storage.zeroc.SimpleNodeDTO iceP_node, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.NodeFileDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getFileInfo", null, sync, _iceE_getFileInfo);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_node);
                 }, istr -> {
                     com.maoding.Storage.zeroc.NodeFileDTO ret;
                     ret = com.maoding.Storage.zeroc.NodeFileDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_getFileInfo =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.NodeFileDTO getFileInfoForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node)
        throws com.maoding.Common.zeroc.CustomException
    {
        return getFileInfoForAccount(account, node, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.NodeFileDTO getFileInfoForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_getFileInfoForAccountAsync(account, node, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.NodeFileDTO> getFileInfoForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node)
    {
        return _iceI_getFileInfoForAccountAsync(account, node, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.NodeFileDTO> getFileInfoForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node, java.util.Map<String, String> context)
    {
        return _iceI_getFileInfoForAccountAsync(account, node, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.NodeFileDTO> _iceI_getFileInfoForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_node, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.NodeFileDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getFileInfoForAccount", null, sync, _iceE_getFileInfoForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_node);
                 }, istr -> {
                     com.maoding.Storage.zeroc.NodeFileDTO ret;
                     ret = com.maoding.Storage.zeroc.NodeFileDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_getFileInfoForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.NodeTextDTO getTextInfo(com.maoding.Storage.zeroc.SimpleNodeDTO node)
        throws com.maoding.Common.zeroc.CustomException
    {
        return getTextInfo(node, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.NodeTextDTO getTextInfo(com.maoding.Storage.zeroc.SimpleNodeDTO node, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_getTextInfoAsync(node, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.NodeTextDTO> getTextInfoAsync(com.maoding.Storage.zeroc.SimpleNodeDTO node)
    {
        return _iceI_getTextInfoAsync(node, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.NodeTextDTO> getTextInfoAsync(com.maoding.Storage.zeroc.SimpleNodeDTO node, java.util.Map<String, String> context)
    {
        return _iceI_getTextInfoAsync(node, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.NodeTextDTO> _iceI_getTextInfoAsync(com.maoding.Storage.zeroc.SimpleNodeDTO iceP_node, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.NodeTextDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getTextInfo", null, sync, _iceE_getTextInfo);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_node);
                 }, istr -> {
                     com.maoding.Storage.zeroc.NodeTextDTO ret;
                     ret = com.maoding.Storage.zeroc.NodeTextDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_getTextInfo =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.NodeTextDTO getTextInfoForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node)
        throws com.maoding.Common.zeroc.CustomException
    {
        return getTextInfoForAccount(account, node, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.NodeTextDTO getTextInfoForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_getTextInfoForAccountAsync(account, node, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.NodeTextDTO> getTextInfoForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node)
    {
        return _iceI_getTextInfoForAccountAsync(account, node, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.NodeTextDTO> getTextInfoForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node, java.util.Map<String, String> context)
    {
        return _iceI_getTextInfoForAccountAsync(account, node, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.NodeTextDTO> _iceI_getTextInfoForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_node, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.NodeTextDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getTextInfoForAccount", null, sync, _iceE_getTextInfoForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_node);
                 }, istr -> {
                     com.maoding.Storage.zeroc.NodeTextDTO ret;
                     ret = com.maoding.Storage.zeroc.NodeTextDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_getTextInfoForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.FullNodeDTO getFullNodeWithHis(com.maoding.Storage.zeroc.SimpleNodeDTO node)
        throws com.maoding.Common.zeroc.CustomException
    {
        return getFullNodeWithHis(node, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.FullNodeDTO getFullNodeWithHis(com.maoding.Storage.zeroc.SimpleNodeDTO node, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_getFullNodeWithHisAsync(node, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.FullNodeDTO> getFullNodeWithHisAsync(com.maoding.Storage.zeroc.SimpleNodeDTO node)
    {
        return _iceI_getFullNodeWithHisAsync(node, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.FullNodeDTO> getFullNodeWithHisAsync(com.maoding.Storage.zeroc.SimpleNodeDTO node, java.util.Map<String, String> context)
    {
        return _iceI_getFullNodeWithHisAsync(node, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.FullNodeDTO> _iceI_getFullNodeWithHisAsync(com.maoding.Storage.zeroc.SimpleNodeDTO iceP_node, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.FullNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getFullNodeWithHis", null, sync, _iceE_getFullNodeWithHis);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_node);
                 }, istr -> {
                     com.maoding.Storage.zeroc.FullNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.FullNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_getFullNodeWithHis =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.FullNodeDTO getFullNodeWithHisForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node)
        throws com.maoding.Common.zeroc.CustomException
    {
        return getFullNodeWithHisForAccount(account, node, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.FullNodeDTO getFullNodeWithHisForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_getFullNodeWithHisForAccountAsync(account, node, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.FullNodeDTO> getFullNodeWithHisForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node)
    {
        return _iceI_getFullNodeWithHisForAccountAsync(account, node, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.FullNodeDTO> getFullNodeWithHisForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node, java.util.Map<String, String> context)
    {
        return _iceI_getFullNodeWithHisForAccountAsync(account, node, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.FullNodeDTO> _iceI_getFullNodeWithHisForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_node, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.FullNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getFullNodeWithHisForAccount", null, sync, _iceE_getFullNodeWithHisForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_node);
                 }, istr -> {
                     com.maoding.Storage.zeroc.FullNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.FullNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_getFullNodeWithHisForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.FullNodeDTO getFullNode(com.maoding.Storage.zeroc.SimpleNodeDTO node)
        throws com.maoding.Common.zeroc.CustomException
    {
        return getFullNode(node, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.FullNodeDTO getFullNode(com.maoding.Storage.zeroc.SimpleNodeDTO node, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_getFullNodeAsync(node, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.FullNodeDTO> getFullNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO node)
    {
        return _iceI_getFullNodeAsync(node, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.FullNodeDTO> getFullNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO node, java.util.Map<String, String> context)
    {
        return _iceI_getFullNodeAsync(node, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.FullNodeDTO> _iceI_getFullNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO iceP_node, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.FullNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getFullNode", null, sync, _iceE_getFullNode);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_node);
                 }, istr -> {
                     com.maoding.Storage.zeroc.FullNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.FullNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_getFullNode =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.FullNodeDTO getFullNodeForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node)
        throws com.maoding.Common.zeroc.CustomException
    {
        return getFullNodeForAccount(account, node, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.FullNodeDTO getFullNodeForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_getFullNodeForAccountAsync(account, node, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.FullNodeDTO> getFullNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node)
    {
        return _iceI_getFullNodeForAccountAsync(account, node, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.FullNodeDTO> getFullNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node, java.util.Map<String, String> context)
    {
        return _iceI_getFullNodeForAccountAsync(account, node, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.FullNodeDTO> _iceI_getFullNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_node, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.FullNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getFullNodeForAccount", null, sync, _iceE_getFullNodeForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_node);
                 }, istr -> {
                     com.maoding.Storage.zeroc.FullNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.FullNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_getFullNodeForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.FullNodeDTO getNodeInfo(com.maoding.Storage.zeroc.SimpleNodeDTO node, com.maoding.Storage.zeroc.QueryNodeInfoDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return getNodeInfo(node, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.FullNodeDTO getNodeInfo(com.maoding.Storage.zeroc.SimpleNodeDTO node, com.maoding.Storage.zeroc.QueryNodeInfoDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_getNodeInfoAsync(node, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.FullNodeDTO> getNodeInfoAsync(com.maoding.Storage.zeroc.SimpleNodeDTO node, com.maoding.Storage.zeroc.QueryNodeInfoDTO request)
    {
        return _iceI_getNodeInfoAsync(node, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.FullNodeDTO> getNodeInfoAsync(com.maoding.Storage.zeroc.SimpleNodeDTO node, com.maoding.Storage.zeroc.QueryNodeInfoDTO request, java.util.Map<String, String> context)
    {
        return _iceI_getNodeInfoAsync(node, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.FullNodeDTO> _iceI_getNodeInfoAsync(com.maoding.Storage.zeroc.SimpleNodeDTO iceP_node, com.maoding.Storage.zeroc.QueryNodeInfoDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.FullNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getNodeInfo", null, sync, _iceE_getNodeInfo);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_node);
                     com.maoding.Storage.zeroc.QueryNodeInfoDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     com.maoding.Storage.zeroc.FullNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.FullNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_getNodeInfo =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.FullNodeDTO getNodeInfoForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node, com.maoding.Storage.zeroc.QueryNodeInfoDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return getNodeInfoForAccount(account, node, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.FullNodeDTO getNodeInfoForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node, com.maoding.Storage.zeroc.QueryNodeInfoDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_getNodeInfoForAccountAsync(account, node, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.FullNodeDTO> getNodeInfoForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node, com.maoding.Storage.zeroc.QueryNodeInfoDTO request)
    {
        return _iceI_getNodeInfoForAccountAsync(account, node, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.FullNodeDTO> getNodeInfoForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO node, com.maoding.Storage.zeroc.QueryNodeInfoDTO request, java.util.Map<String, String> context)
    {
        return _iceI_getNodeInfoForAccountAsync(account, node, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.FullNodeDTO> _iceI_getNodeInfoForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_node, com.maoding.Storage.zeroc.QueryNodeInfoDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.FullNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getNodeInfoForAccount", null, sync, _iceE_getNodeInfoForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_node);
                     com.maoding.Storage.zeroc.QueryNodeInfoDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     com.maoding.Storage.zeroc.FullNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.FullNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_getNodeInfoForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default java.util.List<com.maoding.Storage.zeroc.NodeFileDTO> listFile(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.QueryNodeFileDTO query)
        throws com.maoding.Common.zeroc.CustomException
    {
        return listFile(account, query, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<com.maoding.Storage.zeroc.NodeFileDTO> listFile(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.QueryNodeFileDTO query, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_listFileAsync(account, query, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.NodeFileDTO>> listFileAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.QueryNodeFileDTO query)
    {
        return _iceI_listFileAsync(account, query, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.NodeFileDTO>> listFileAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.QueryNodeFileDTO query, java.util.Map<String, String> context)
    {
        return _iceI_listFileAsync(account, query, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.NodeFileDTO>> _iceI_listFileAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.QueryNodeFileDTO iceP_query, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.NodeFileDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listFile", null, sync, _iceE_listFile);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.QueryNodeFileDTO.ice_write(ostr, iceP_query);
                 }, istr -> {
                     java.util.List<com.maoding.Storage.zeroc.NodeFileDTO> ret;
                     ret = com.maoding.Storage.zeroc.NodeFileListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listFile =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> listChildNode(com.maoding.Storage.zeroc.SimpleNodeDTO parent)
        throws com.maoding.Common.zeroc.CustomException
    {
        return listChildNode(parent, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> listChildNode(com.maoding.Storage.zeroc.SimpleNodeDTO parent, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_listChildNodeAsync(parent, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> listChildNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO parent)
    {
        return _iceI_listChildNodeAsync(parent, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> listChildNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO parent, java.util.Map<String, String> context)
    {
        return _iceI_listChildNodeAsync(parent, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> _iceI_listChildNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO iceP_parent, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listChildNode", null, sync, _iceE_listChildNode);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_parent);
                 }, istr -> {
                     java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listChildNode =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> listChildNodeForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO parent)
        throws com.maoding.Common.zeroc.CustomException
    {
        return listChildNodeForAccount(account, parent, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> listChildNodeForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO parent, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_listChildNodeForAccountAsync(account, parent, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> listChildNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO parent)
    {
        return _iceI_listChildNodeForAccountAsync(account, parent, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> listChildNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO parent, java.util.Map<String, String> context)
    {
        return _iceI_listChildNodeForAccountAsync(account, parent, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> _iceI_listChildNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_parent, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listChildNodeForAccount", null, sync, _iceE_listChildNodeForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_parent);
                 }, istr -> {
                     java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listChildNodeForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> listChildrenNode(com.maoding.Storage.zeroc.SimpleNodeDTO parent)
        throws com.maoding.Common.zeroc.CustomException
    {
        return listChildrenNode(parent, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> listChildrenNode(com.maoding.Storage.zeroc.SimpleNodeDTO parent, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_listChildrenNodeAsync(parent, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> listChildrenNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO parent)
    {
        return _iceI_listChildrenNodeAsync(parent, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> listChildrenNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO parent, java.util.Map<String, String> context)
    {
        return _iceI_listChildrenNodeAsync(parent, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> _iceI_listChildrenNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO iceP_parent, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listChildrenNode", null, sync, _iceE_listChildrenNode);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_parent);
                 }, istr -> {
                     java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listChildrenNode =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> listChildrenNodeForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO parent)
        throws com.maoding.Common.zeroc.CustomException
    {
        return listChildrenNodeForAccount(account, parent, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> listChildrenNodeForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO parent, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_listChildrenNodeForAccountAsync(account, parent, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> listChildrenNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO parent)
    {
        return _iceI_listChildrenNodeForAccountAsync(account, parent, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> listChildrenNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO parent, java.util.Map<String, String> context)
    {
        return _iceI_listChildrenNodeForAccountAsync(account, parent, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> _iceI_listChildrenNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_parent, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listChildrenNodeForAccount", null, sync, _iceE_listChildrenNodeForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_parent);
                 }, istr -> {
                     java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listChildrenNodeForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> listWebArchiveDir(String projectId)
        throws com.maoding.Common.zeroc.CustomException
    {
        return listWebArchiveDir(projectId, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> listWebArchiveDir(String projectId, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_listWebArchiveDirAsync(projectId, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> listWebArchiveDirAsync(String projectId)
    {
        return _iceI_listWebArchiveDirAsync(projectId, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> listWebArchiveDirAsync(String projectId, java.util.Map<String, String> context)
    {
        return _iceI_listWebArchiveDirAsync(projectId, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> _iceI_listWebArchiveDirAsync(String iceP_projectId, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listWebArchiveDir", null, sync, _iceE_listWebArchiveDir);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_projectId);
                 }, istr -> {
                     java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listWebArchiveDir =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> listWebArchiveDirForAccount(com.maoding.User.zeroc.AccountDTO account, String projectId)
        throws com.maoding.Common.zeroc.CustomException
    {
        return listWebArchiveDirForAccount(account, projectId, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> listWebArchiveDirForAccount(com.maoding.User.zeroc.AccountDTO account, String projectId, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_listWebArchiveDirForAccountAsync(account, projectId, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> listWebArchiveDirForAccountAsync(com.maoding.User.zeroc.AccountDTO account, String projectId)
    {
        return _iceI_listWebArchiveDirForAccountAsync(account, projectId, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> listWebArchiveDirForAccountAsync(com.maoding.User.zeroc.AccountDTO account, String projectId, java.util.Map<String, String> context)
    {
        return _iceI_listWebArchiveDirForAccountAsync(account, projectId, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> _iceI_listWebArchiveDirForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, String iceP_projectId, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listWebArchiveDirForAccount", null, sync, _iceE_listWebArchiveDirForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     ostr.writeString(iceP_projectId);
                 }, istr -> {
                     java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listWebArchiveDirForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    /**
     * @deprecated 尚未实现
     **/
    @Deprecated
    default boolean createMirror(com.maoding.Storage.zeroc.FileNodeDTO src)
        throws com.maoding.Common.zeroc.CustomException
    {
        return createMirror(src, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * @param context The Context map to send with the invocation.
     * @deprecated 尚未实现
     **/
    @Deprecated
    default boolean createMirror(com.maoding.Storage.zeroc.FileNodeDTO src, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_createMirrorAsync(src, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * @return A future that will be completed with the result.
     * @deprecated 尚未实现
     **/
    @Deprecated
    default java.util.concurrent.CompletableFuture<java.lang.Boolean> createMirrorAsync(com.maoding.Storage.zeroc.FileNodeDTO src)
    {
        return _iceI_createMirrorAsync(src, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     * @deprecated 尚未实现
     **/
    @Deprecated
    default java.util.concurrent.CompletableFuture<java.lang.Boolean> createMirrorAsync(com.maoding.Storage.zeroc.FileNodeDTO src, java.util.Map<String, String> context)
    {
        return _iceI_createMirrorAsync(src, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_createMirrorAsync(com.maoding.Storage.zeroc.FileNodeDTO iceP_src, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createMirror", null, sync, _iceE_createMirror);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.FileNodeDTO.ice_write(ostr, iceP_src);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_createMirror =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    /**
     * @deprecated 尚未实现
     **/
    @Deprecated
    default boolean createMirrorForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.FileNodeDTO src)
        throws com.maoding.Common.zeroc.CustomException
    {
        return createMirrorForAccount(account, src, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * @param context The Context map to send with the invocation.
     * @deprecated 尚未实现
     **/
    @Deprecated
    default boolean createMirrorForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.FileNodeDTO src, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_createMirrorForAccountAsync(account, src, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * @return A future that will be completed with the result.
     * @deprecated 尚未实现
     **/
    @Deprecated
    default java.util.concurrent.CompletableFuture<java.lang.Boolean> createMirrorForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.FileNodeDTO src)
    {
        return _iceI_createMirrorForAccountAsync(account, src, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     * @deprecated 尚未实现
     **/
    @Deprecated
    default java.util.concurrent.CompletableFuture<java.lang.Boolean> createMirrorForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.FileNodeDTO src, java.util.Map<String, String> context)
    {
        return _iceI_createMirrorForAccountAsync(account, src, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_createMirrorForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.FileNodeDTO iceP_src, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createMirrorForAccount", null, sync, _iceE_createMirrorForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.FileNodeDTO.ice_write(ostr, iceP_src);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_createMirrorForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.SimpleNodeDTO changeNodeOwner(com.maoding.Storage.zeroc.SimpleNodeDTO src, com.maoding.User.zeroc.UserDTO dstOwner)
        throws com.maoding.Common.zeroc.CustomException
    {
        return changeNodeOwner(src, dstOwner, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.SimpleNodeDTO changeNodeOwner(com.maoding.Storage.zeroc.SimpleNodeDTO src, com.maoding.User.zeroc.UserDTO dstOwner, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_changeNodeOwnerAsync(src, dstOwner, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> changeNodeOwnerAsync(com.maoding.Storage.zeroc.SimpleNodeDTO src, com.maoding.User.zeroc.UserDTO dstOwner)
    {
        return _iceI_changeNodeOwnerAsync(src, dstOwner, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> changeNodeOwnerAsync(com.maoding.Storage.zeroc.SimpleNodeDTO src, com.maoding.User.zeroc.UserDTO dstOwner, java.util.Map<String, String> context)
    {
        return _iceI_changeNodeOwnerAsync(src, dstOwner, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> _iceI_changeNodeOwnerAsync(com.maoding.Storage.zeroc.SimpleNodeDTO iceP_src, com.maoding.User.zeroc.UserDTO iceP_dstOwner, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "changeNodeOwner", null, sync, _iceE_changeNodeOwner);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_src);
                     com.maoding.User.zeroc.UserDTO.ice_write(ostr, iceP_dstOwner);
                 }, istr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_changeNodeOwner =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.SimpleNodeDTO changeNodeOwnerForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, com.maoding.User.zeroc.UserDTO dstOwner)
        throws com.maoding.Common.zeroc.CustomException
    {
        return changeNodeOwnerForAccount(account, src, dstOwner, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.SimpleNodeDTO changeNodeOwnerForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, com.maoding.User.zeroc.UserDTO dstOwner, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_changeNodeOwnerForAccountAsync(account, src, dstOwner, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> changeNodeOwnerForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, com.maoding.User.zeroc.UserDTO dstOwner)
    {
        return _iceI_changeNodeOwnerForAccountAsync(account, src, dstOwner, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> changeNodeOwnerForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, com.maoding.User.zeroc.UserDTO dstOwner, java.util.Map<String, String> context)
    {
        return _iceI_changeNodeOwnerForAccountAsync(account, src, dstOwner, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> _iceI_changeNodeOwnerForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_src, com.maoding.User.zeroc.UserDTO iceP_dstOwner, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "changeNodeOwnerForAccount", null, sync, _iceE_changeNodeOwnerForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_src);
                     com.maoding.User.zeroc.UserDTO.ice_write(ostr, iceP_dstOwner);
                 }, istr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_changeNodeOwnerForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    /**
     * @deprecated 尚未实现
     **/
    @Deprecated
    default com.maoding.Project.zeroc.ProjectDTO getProjectInfoByPath(String path)
        throws com.maoding.Common.zeroc.CustomException
    {
        return getProjectInfoByPath(path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * @param context The Context map to send with the invocation.
     * @deprecated 尚未实现
     **/
    @Deprecated
    default com.maoding.Project.zeroc.ProjectDTO getProjectInfoByPath(String path, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_getProjectInfoByPathAsync(path, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * @return A future that will be completed with the result.
     * @deprecated 尚未实现
     **/
    @Deprecated
    default java.util.concurrent.CompletableFuture<com.maoding.Project.zeroc.ProjectDTO> getProjectInfoByPathAsync(String path)
    {
        return _iceI_getProjectInfoByPathAsync(path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     * @deprecated 尚未实现
     **/
    @Deprecated
    default java.util.concurrent.CompletableFuture<com.maoding.Project.zeroc.ProjectDTO> getProjectInfoByPathAsync(String path, java.util.Map<String, String> context)
    {
        return _iceI_getProjectInfoByPathAsync(path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Project.zeroc.ProjectDTO> _iceI_getProjectInfoByPathAsync(String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Project.zeroc.ProjectDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getProjectInfoByPath", null, sync, _iceE_getProjectInfoByPath);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_path);
                 }, istr -> {
                     com.maoding.Project.zeroc.ProjectDTO ret;
                     ret = com.maoding.Project.zeroc.ProjectDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_getProjectInfoByPath =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    /**
     * @deprecated 尚未实现
     **/
    @Deprecated
    default com.maoding.Project.zeroc.ProjectDTO getProjectInfoByPathForAccount(com.maoding.User.zeroc.AccountDTO account, String path)
        throws com.maoding.Common.zeroc.CustomException
    {
        return getProjectInfoByPathForAccount(account, path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    /**
     * @param context The Context map to send with the invocation.
     * @deprecated 尚未实现
     **/
    @Deprecated
    default com.maoding.Project.zeroc.ProjectDTO getProjectInfoByPathForAccount(com.maoding.User.zeroc.AccountDTO account, String path, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_getProjectInfoByPathForAccountAsync(account, path, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    /**
     * @return A future that will be completed with the result.
     * @deprecated 尚未实现
     **/
    @Deprecated
    default java.util.concurrent.CompletableFuture<com.maoding.Project.zeroc.ProjectDTO> getProjectInfoByPathForAccountAsync(com.maoding.User.zeroc.AccountDTO account, String path)
    {
        return _iceI_getProjectInfoByPathForAccountAsync(account, path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    /**
     * @param context The Context map to send with the invocation.
     * @return A future that will be completed with the result.
     * @deprecated 尚未实现
     **/
    @Deprecated
    default java.util.concurrent.CompletableFuture<com.maoding.Project.zeroc.ProjectDTO> getProjectInfoByPathForAccountAsync(com.maoding.User.zeroc.AccountDTO account, String path, java.util.Map<String, String> context)
    {
        return _iceI_getProjectInfoByPathForAccountAsync(account, path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Project.zeroc.ProjectDTO> _iceI_getProjectInfoByPathForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Project.zeroc.ProjectDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getProjectInfoByPathForAccount", null, sync, _iceE_getProjectInfoByPathForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     ostr.writeString(iceP_path);
                 }, istr -> {
                     com.maoding.Project.zeroc.ProjectDTO ret;
                     ret = com.maoding.Project.zeroc.ProjectDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_getProjectInfoByPathForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default boolean login(com.maoding.User.zeroc.LoginDTO loginInfo)
        throws com.maoding.Common.zeroc.CustomException
    {
        return login(loginInfo, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean login(com.maoding.User.zeroc.LoginDTO loginInfo, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_loginAsync(loginInfo, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> loginAsync(com.maoding.User.zeroc.LoginDTO loginInfo)
    {
        return _iceI_loginAsync(loginInfo, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> loginAsync(com.maoding.User.zeroc.LoginDTO loginInfo, java.util.Map<String, String> context)
    {
        return _iceI_loginAsync(loginInfo, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_loginAsync(com.maoding.User.zeroc.LoginDTO iceP_loginInfo, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "login", null, sync, _iceE_login);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.LoginDTO.ice_write(ostr, iceP_loginInfo);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_login =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default java.util.List<java.lang.String> setNoticeClient(String userId, com.maoding.Notice.zeroc.NoticeClientPrx client)
        throws com.maoding.Common.zeroc.CustomException
    {
        return setNoticeClient(userId, client, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<java.lang.String> setNoticeClient(String userId, com.maoding.Notice.zeroc.NoticeClientPrx client, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_setNoticeClientAsync(userId, client, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<java.lang.String>> setNoticeClientAsync(String userId, com.maoding.Notice.zeroc.NoticeClientPrx client)
    {
        return _iceI_setNoticeClientAsync(userId, client, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<java.lang.String>> setNoticeClientAsync(String userId, com.maoding.Notice.zeroc.NoticeClientPrx client, java.util.Map<String, String> context)
    {
        return _iceI_setNoticeClientAsync(userId, client, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<java.lang.String>> _iceI_setNoticeClientAsync(String iceP_userId, com.maoding.Notice.zeroc.NoticeClientPrx iceP_client, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<java.lang.String>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "setNoticeClient", null, sync, _iceE_setNoticeClient);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_userId);
                     ostr.writeProxy(iceP_client);
                 }, istr -> {
                     java.util.List<java.lang.String> ret;
                     ret = com.maoding.Common.zeroc.StringListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_setNoticeClient =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default java.util.List<com.maoding.Common.zeroc.IdNameDTO> listMajor()
        throws com.maoding.Common.zeroc.CustomException
    {
        return listMajor(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<com.maoding.Common.zeroc.IdNameDTO> listMajor(java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_listMajorAsync(context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Common.zeroc.IdNameDTO>> listMajorAsync()
    {
        return _iceI_listMajorAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Common.zeroc.IdNameDTO>> listMajorAsync(java.util.Map<String, String> context)
    {
        return _iceI_listMajorAsync(context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Common.zeroc.IdNameDTO>> _iceI_listMajorAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Common.zeroc.IdNameDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listMajor", null, sync, _iceE_listMajor);
        f.invoke(true, context, null, null, istr -> {
                     java.util.List<com.maoding.Common.zeroc.IdNameDTO> ret;
                     ret = com.maoding.Common.zeroc.IdNameListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listMajor =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default java.util.List<com.maoding.Common.zeroc.IdNameDTO> listMajorForAccount(com.maoding.User.zeroc.AccountDTO account)
        throws com.maoding.Common.zeroc.CustomException
    {
        return listMajorForAccount(account, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<com.maoding.Common.zeroc.IdNameDTO> listMajorForAccount(com.maoding.User.zeroc.AccountDTO account, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_listMajorForAccountAsync(account, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Common.zeroc.IdNameDTO>> listMajorForAccountAsync(com.maoding.User.zeroc.AccountDTO account)
    {
        return _iceI_listMajorForAccountAsync(account, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Common.zeroc.IdNameDTO>> listMajorForAccountAsync(com.maoding.User.zeroc.AccountDTO account, java.util.Map<String, String> context)
    {
        return _iceI_listMajorForAccountAsync(account, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Common.zeroc.IdNameDTO>> _iceI_listMajorForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Common.zeroc.IdNameDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listMajorForAccount", null, sync, _iceE_listMajorForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                 }, istr -> {
                     java.util.List<com.maoding.Common.zeroc.IdNameDTO> ret;
                     ret = com.maoding.Common.zeroc.IdNameListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listMajorForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default java.util.List<com.maoding.Common.zeroc.IdNameDTO> listAction()
        throws com.maoding.Common.zeroc.CustomException
    {
        return listAction(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<com.maoding.Common.zeroc.IdNameDTO> listAction(java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_listActionAsync(context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Common.zeroc.IdNameDTO>> listActionAsync()
    {
        return _iceI_listActionAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Common.zeroc.IdNameDTO>> listActionAsync(java.util.Map<String, String> context)
    {
        return _iceI_listActionAsync(context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Common.zeroc.IdNameDTO>> _iceI_listActionAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Common.zeroc.IdNameDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listAction", null, sync, _iceE_listAction);
        f.invoke(true, context, null, null, istr -> {
                     java.util.List<com.maoding.Common.zeroc.IdNameDTO> ret;
                     ret = com.maoding.Common.zeroc.IdNameListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listAction =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default java.util.List<com.maoding.Common.zeroc.IdNameDTO> listActionForAccount(com.maoding.User.zeroc.AccountDTO account)
        throws com.maoding.Common.zeroc.CustomException
    {
        return listActionForAccount(account, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<com.maoding.Common.zeroc.IdNameDTO> listActionForAccount(com.maoding.User.zeroc.AccountDTO account, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_listActionForAccountAsync(account, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Common.zeroc.IdNameDTO>> listActionForAccountAsync(com.maoding.User.zeroc.AccountDTO account)
    {
        return _iceI_listActionForAccountAsync(account, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Common.zeroc.IdNameDTO>> listActionForAccountAsync(com.maoding.User.zeroc.AccountDTO account, java.util.Map<String, String> context)
    {
        return _iceI_listActionForAccountAsync(account, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Common.zeroc.IdNameDTO>> _iceI_listActionForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Common.zeroc.IdNameDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listActionForAccount", null, sync, _iceE_listActionForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                 }, istr -> {
                     java.util.List<com.maoding.Common.zeroc.IdNameDTO> ret;
                     ret = com.maoding.Common.zeroc.IdNameListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listActionForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default java.util.List<com.maoding.User.zeroc.ProjectRoleDTO> listProjectRoleByProjectId(String projectId)
        throws com.maoding.Common.zeroc.CustomException
    {
        return listProjectRoleByProjectId(projectId, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<com.maoding.User.zeroc.ProjectRoleDTO> listProjectRoleByProjectId(String projectId, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_listProjectRoleByProjectIdAsync(projectId, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.User.zeroc.ProjectRoleDTO>> listProjectRoleByProjectIdAsync(String projectId)
    {
        return _iceI_listProjectRoleByProjectIdAsync(projectId, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.User.zeroc.ProjectRoleDTO>> listProjectRoleByProjectIdAsync(String projectId, java.util.Map<String, String> context)
    {
        return _iceI_listProjectRoleByProjectIdAsync(projectId, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.User.zeroc.ProjectRoleDTO>> _iceI_listProjectRoleByProjectIdAsync(String iceP_projectId, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.User.zeroc.ProjectRoleDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listProjectRoleByProjectId", null, sync, _iceE_listProjectRoleByProjectId);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_projectId);
                 }, istr -> {
                     java.util.List<com.maoding.User.zeroc.ProjectRoleDTO> ret;
                     ret = com.maoding.User.zeroc.ProjectRoleListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listProjectRoleByProjectId =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default java.util.List<com.maoding.User.zeroc.ProjectRoleDTO> listProjectRoleByProjectIdForAccount(com.maoding.User.zeroc.AccountDTO account, String projectId)
        throws com.maoding.Common.zeroc.CustomException
    {
        return listProjectRoleByProjectIdForAccount(account, projectId, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<com.maoding.User.zeroc.ProjectRoleDTO> listProjectRoleByProjectIdForAccount(com.maoding.User.zeroc.AccountDTO account, String projectId, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_listProjectRoleByProjectIdForAccountAsync(account, projectId, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.User.zeroc.ProjectRoleDTO>> listProjectRoleByProjectIdForAccountAsync(com.maoding.User.zeroc.AccountDTO account, String projectId)
    {
        return _iceI_listProjectRoleByProjectIdForAccountAsync(account, projectId, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.User.zeroc.ProjectRoleDTO>> listProjectRoleByProjectIdForAccountAsync(com.maoding.User.zeroc.AccountDTO account, String projectId, java.util.Map<String, String> context)
    {
        return _iceI_listProjectRoleByProjectIdForAccountAsync(account, projectId, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.User.zeroc.ProjectRoleDTO>> _iceI_listProjectRoleByProjectIdForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, String iceP_projectId, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.User.zeroc.ProjectRoleDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listProjectRoleByProjectIdForAccount", null, sync, _iceE_listProjectRoleByProjectIdForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     ostr.writeString(iceP_projectId);
                 }, istr -> {
                     java.util.List<com.maoding.User.zeroc.ProjectRoleDTO> ret;
                     ret = com.maoding.User.zeroc.ProjectRoleListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listProjectRoleByProjectIdForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default CommitListResultDTO issueNodeList(java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return issueNodeList(srcList, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default CommitListResultDTO issueNodeList(java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_issueNodeListAsync(srcList, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<CommitListResultDTO> issueNodeListAsync(java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request)
    {
        return _iceI_issueNodeListAsync(srcList, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<CommitListResultDTO> issueNodeListAsync(java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_issueNodeListAsync(srcList, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<CommitListResultDTO> _iceI_issueNodeListAsync(java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> iceP_srcList, CommitRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<CommitListResultDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "issueNodeList", null, sync, _iceE_issueNodeList);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.SimpleNodeListHelper.write(ostr, iceP_srcList);
                     CommitRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     CommitListResultDTO ret;
                     ret = CommitListResultDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_issueNodeList =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default CommitListResultDTO issueNodeListForAccount(com.maoding.User.zeroc.AccountDTO account, java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return issueNodeListForAccount(account, srcList, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default CommitListResultDTO issueNodeListForAccount(com.maoding.User.zeroc.AccountDTO account, java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_issueNodeListForAccountAsync(account, srcList, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<CommitListResultDTO> issueNodeListForAccountAsync(com.maoding.User.zeroc.AccountDTO account, java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request)
    {
        return _iceI_issueNodeListForAccountAsync(account, srcList, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<CommitListResultDTO> issueNodeListForAccountAsync(com.maoding.User.zeroc.AccountDTO account, java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_issueNodeListForAccountAsync(account, srcList, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<CommitListResultDTO> _iceI_issueNodeListForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> iceP_srcList, CommitRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<CommitListResultDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "issueNodeListForAccount", null, sync, _iceE_issueNodeListForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeListHelper.write(ostr, iceP_srcList);
                     CommitRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     CommitListResultDTO ret;
                     ret = CommitListResultDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_issueNodeListForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.SimpleNodeDTO issueNode(com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return issueNode(src, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.SimpleNodeDTO issueNode(com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_issueNodeAsync(src, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> issueNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request)
    {
        return _iceI_issueNodeAsync(src, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> issueNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_issueNodeAsync(src, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> _iceI_issueNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO iceP_src, CommitRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "issueNode", null, sync, _iceE_issueNode);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_src);
                     CommitRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_issueNode =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.SimpleNodeDTO issueNodeForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return issueNodeForAccount(account, src, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.SimpleNodeDTO issueNodeForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_issueNodeForAccountAsync(account, src, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> issueNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request)
    {
        return _iceI_issueNodeForAccountAsync(account, src, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> issueNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_issueNodeForAccountAsync(account, src, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> _iceI_issueNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_src, CommitRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "issueNodeForAccount", null, sync, _iceE_issueNodeForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_src);
                     CommitRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_issueNodeForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default CommitListResultDTO checkNodeListRequest(java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return checkNodeListRequest(srcList, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default CommitListResultDTO checkNodeListRequest(java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_checkNodeListRequestAsync(srcList, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<CommitListResultDTO> checkNodeListRequestAsync(java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request)
    {
        return _iceI_checkNodeListRequestAsync(srcList, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<CommitListResultDTO> checkNodeListRequestAsync(java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_checkNodeListRequestAsync(srcList, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<CommitListResultDTO> _iceI_checkNodeListRequestAsync(java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> iceP_srcList, CommitRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<CommitListResultDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "checkNodeListRequest", null, sync, _iceE_checkNodeListRequest);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.SimpleNodeListHelper.write(ostr, iceP_srcList);
                     CommitRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     CommitListResultDTO ret;
                     ret = CommitListResultDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_checkNodeListRequest =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default CommitListResultDTO checkNodeListRequestForAccount(com.maoding.User.zeroc.AccountDTO account, java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return checkNodeListRequestForAccount(account, srcList, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default CommitListResultDTO checkNodeListRequestForAccount(com.maoding.User.zeroc.AccountDTO account, java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_checkNodeListRequestForAccountAsync(account, srcList, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<CommitListResultDTO> checkNodeListRequestForAccountAsync(com.maoding.User.zeroc.AccountDTO account, java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request)
    {
        return _iceI_checkNodeListRequestForAccountAsync(account, srcList, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<CommitListResultDTO> checkNodeListRequestForAccountAsync(com.maoding.User.zeroc.AccountDTO account, java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_checkNodeListRequestForAccountAsync(account, srcList, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<CommitListResultDTO> _iceI_checkNodeListRequestForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> iceP_srcList, CommitRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<CommitListResultDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "checkNodeListRequestForAccount", null, sync, _iceE_checkNodeListRequestForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeListHelper.write(ostr, iceP_srcList);
                     CommitRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     CommitListResultDTO ret;
                     ret = CommitListResultDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_checkNodeListRequestForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.SimpleNodeDTO checkNodeRequest(com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return checkNodeRequest(src, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.SimpleNodeDTO checkNodeRequest(com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_checkNodeRequestAsync(src, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> checkNodeRequestAsync(com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request)
    {
        return _iceI_checkNodeRequestAsync(src, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> checkNodeRequestAsync(com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_checkNodeRequestAsync(src, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> _iceI_checkNodeRequestAsync(com.maoding.Storage.zeroc.SimpleNodeDTO iceP_src, CommitRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "checkNodeRequest", null, sync, _iceE_checkNodeRequest);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_src);
                     CommitRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_checkNodeRequest =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.SimpleNodeDTO checkNodeRequestForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return checkNodeRequestForAccount(account, src, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.SimpleNodeDTO checkNodeRequestForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_checkNodeRequestForAccountAsync(account, src, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> checkNodeRequestForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request)
    {
        return _iceI_checkNodeRequestForAccountAsync(account, src, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> checkNodeRequestForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_checkNodeRequestForAccountAsync(account, src, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> _iceI_checkNodeRequestForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_src, CommitRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "checkNodeRequestForAccount", null, sync, _iceE_checkNodeRequestForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_src);
                     CommitRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_checkNodeRequestForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default CommitListResultDTO auditNodeListRequest(java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return auditNodeListRequest(srcList, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default CommitListResultDTO auditNodeListRequest(java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_auditNodeListRequestAsync(srcList, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<CommitListResultDTO> auditNodeListRequestAsync(java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request)
    {
        return _iceI_auditNodeListRequestAsync(srcList, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<CommitListResultDTO> auditNodeListRequestAsync(java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_auditNodeListRequestAsync(srcList, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<CommitListResultDTO> _iceI_auditNodeListRequestAsync(java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> iceP_srcList, CommitRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<CommitListResultDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "auditNodeListRequest", null, sync, _iceE_auditNodeListRequest);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.SimpleNodeListHelper.write(ostr, iceP_srcList);
                     CommitRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     CommitListResultDTO ret;
                     ret = CommitListResultDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_auditNodeListRequest =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default CommitListResultDTO auditNodeListRequestForAccount(com.maoding.User.zeroc.AccountDTO account, java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return auditNodeListRequestForAccount(account, srcList, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default CommitListResultDTO auditNodeListRequestForAccount(com.maoding.User.zeroc.AccountDTO account, java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_auditNodeListRequestForAccountAsync(account, srcList, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<CommitListResultDTO> auditNodeListRequestForAccountAsync(com.maoding.User.zeroc.AccountDTO account, java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request)
    {
        return _iceI_auditNodeListRequestForAccountAsync(account, srcList, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<CommitListResultDTO> auditNodeListRequestForAccountAsync(com.maoding.User.zeroc.AccountDTO account, java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_auditNodeListRequestForAccountAsync(account, srcList, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<CommitListResultDTO> _iceI_auditNodeListRequestForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> iceP_srcList, CommitRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<CommitListResultDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "auditNodeListRequestForAccount", null, sync, _iceE_auditNodeListRequestForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeListHelper.write(ostr, iceP_srcList);
                     CommitRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     CommitListResultDTO ret;
                     ret = CommitListResultDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_auditNodeListRequestForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.SimpleNodeDTO auditNodeRequest(com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return auditNodeRequest(src, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.SimpleNodeDTO auditNodeRequest(com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_auditNodeRequestAsync(src, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> auditNodeRequestAsync(com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request)
    {
        return _iceI_auditNodeRequestAsync(src, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> auditNodeRequestAsync(com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_auditNodeRequestAsync(src, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> _iceI_auditNodeRequestAsync(com.maoding.Storage.zeroc.SimpleNodeDTO iceP_src, CommitRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "auditNodeRequest", null, sync, _iceE_auditNodeRequest);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_src);
                     CommitRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_auditNodeRequest =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.SimpleNodeDTO auditNodeRequestForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return auditNodeRequestForAccount(account, src, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.SimpleNodeDTO auditNodeRequestForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_auditNodeRequestForAccountAsync(account, src, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> auditNodeRequestForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request)
    {
        return _iceI_auditNodeRequestForAccountAsync(account, src, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> auditNodeRequestForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_auditNodeRequestForAccountAsync(account, src, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> _iceI_auditNodeRequestForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_src, CommitRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "auditNodeRequestForAccount", null, sync, _iceE_auditNodeRequestForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_src);
                     CommitRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_auditNodeRequestForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default CommitListResultDTO commitNodeList(java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return commitNodeList(srcList, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default CommitListResultDTO commitNodeList(java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_commitNodeListAsync(srcList, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<CommitListResultDTO> commitNodeListAsync(java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request)
    {
        return _iceI_commitNodeListAsync(srcList, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<CommitListResultDTO> commitNodeListAsync(java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_commitNodeListAsync(srcList, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<CommitListResultDTO> _iceI_commitNodeListAsync(java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> iceP_srcList, CommitRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<CommitListResultDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "commitNodeList", null, sync, _iceE_commitNodeList);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.SimpleNodeListHelper.write(ostr, iceP_srcList);
                     CommitRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     CommitListResultDTO ret;
                     ret = CommitListResultDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_commitNodeList =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default CommitListResultDTO commitNodeListForAccount(com.maoding.User.zeroc.AccountDTO account, java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return commitNodeListForAccount(account, srcList, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default CommitListResultDTO commitNodeListForAccount(com.maoding.User.zeroc.AccountDTO account, java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_commitNodeListForAccountAsync(account, srcList, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<CommitListResultDTO> commitNodeListForAccountAsync(com.maoding.User.zeroc.AccountDTO account, java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request)
    {
        return _iceI_commitNodeListForAccountAsync(account, srcList, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<CommitListResultDTO> commitNodeListForAccountAsync(com.maoding.User.zeroc.AccountDTO account, java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> srcList, CommitRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_commitNodeListForAccountAsync(account, srcList, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<CommitListResultDTO> _iceI_commitNodeListForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> iceP_srcList, CommitRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<CommitListResultDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "commitNodeListForAccount", null, sync, _iceE_commitNodeListForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeListHelper.write(ostr, iceP_srcList);
                     CommitRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     CommitListResultDTO ret;
                     ret = CommitListResultDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_commitNodeListForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.SimpleNodeDTO commitNode(com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return commitNode(src, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.SimpleNodeDTO commitNode(com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_commitNodeAsync(src, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> commitNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request)
    {
        return _iceI_commitNodeAsync(src, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> commitNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_commitNodeAsync(src, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> _iceI_commitNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO iceP_src, CommitRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "commitNode", null, sync, _iceE_commitNode);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_src);
                     CommitRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_commitNode =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.SimpleNodeDTO commitNodeForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return commitNodeForAccount(account, src, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.SimpleNodeDTO commitNodeForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_commitNodeForAccountAsync(account, src, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> commitNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request)
    {
        return _iceI_commitNodeForAccountAsync(account, src, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> commitNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, CommitRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_commitNodeForAccountAsync(account, src, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> _iceI_commitNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_src, CommitRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "commitNodeForAccount", null, sync, _iceE_commitNodeForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_src);
                     CommitRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_commitNodeForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.SimpleNodeDTO createVersion(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, String path, CommitRequestDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return createVersion(account, src, path, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.SimpleNodeDTO createVersion(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, String path, CommitRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_createVersionAsync(account, src, path, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> createVersionAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, String path, CommitRequestDTO request)
    {
        return _iceI_createVersionAsync(account, src, path, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> createVersionAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, String path, CommitRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_createVersionAsync(account, src, path, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> _iceI_createVersionAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_src, String iceP_path, CommitRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createVersion", null, sync, _iceE_createVersion);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_src);
                     ostr.writeString(iceP_path);
                     CommitRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_createVersion =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.SimpleNodeDTO updateVersion(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, com.maoding.Storage.zeroc.SimpleNodeDTO dst, CommitRequestDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return updateVersion(account, src, dst, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.SimpleNodeDTO updateVersion(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, com.maoding.Storage.zeroc.SimpleNodeDTO dst, CommitRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_updateVersionAsync(account, src, dst, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> updateVersionAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, com.maoding.Storage.zeroc.SimpleNodeDTO dst, CommitRequestDTO request)
    {
        return _iceI_updateVersionAsync(account, src, dst, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> updateVersionAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, com.maoding.Storage.zeroc.SimpleNodeDTO dst, CommitRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_updateVersionAsync(account, src, dst, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> _iceI_updateVersionAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_src, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_dst, CommitRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "updateVersion", null, sync, _iceE_updateVersion);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_src);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_dst);
                     CommitRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_updateVersion =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default boolean deleteNode(com.maoding.Storage.zeroc.SimpleNodeDTO src)
        throws com.maoding.Common.zeroc.CustomException
    {
        return deleteNode(src, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean deleteNode(com.maoding.Storage.zeroc.SimpleNodeDTO src, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_deleteNodeAsync(src, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> deleteNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO src)
    {
        return _iceI_deleteNodeAsync(src, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> deleteNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO src, java.util.Map<String, String> context)
    {
        return _iceI_deleteNodeAsync(src, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_deleteNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO iceP_src, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "deleteNode", null, sync, _iceE_deleteNode);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_src);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_deleteNode =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default boolean deleteNodeForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src)
        throws com.maoding.Common.zeroc.CustomException
    {
        return deleteNodeForAccount(account, src, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean deleteNodeForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_deleteNodeForAccountAsync(account, src, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> deleteNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src)
    {
        return _iceI_deleteNodeForAccountAsync(account, src, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> deleteNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, java.util.Map<String, String> context)
    {
        return _iceI_deleteNodeForAccountAsync(account, src, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_deleteNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_src, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "deleteNodeForAccount", null, sync, _iceE_deleteNodeForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_src);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_deleteNodeForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default boolean setNodeLength(com.maoding.Storage.zeroc.SimpleNodeDTO src, long fileLength)
        throws com.maoding.Common.zeroc.CustomException
    {
        return setNodeLength(src, fileLength, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean setNodeLength(com.maoding.Storage.zeroc.SimpleNodeDTO src, long fileLength, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_setNodeLengthAsync(src, fileLength, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> setNodeLengthAsync(com.maoding.Storage.zeroc.SimpleNodeDTO src, long fileLength)
    {
        return _iceI_setNodeLengthAsync(src, fileLength, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> setNodeLengthAsync(com.maoding.Storage.zeroc.SimpleNodeDTO src, long fileLength, java.util.Map<String, String> context)
    {
        return _iceI_setNodeLengthAsync(src, fileLength, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_setNodeLengthAsync(com.maoding.Storage.zeroc.SimpleNodeDTO iceP_src, long iceP_fileLength, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "setNodeLength", null, sync, _iceE_setNodeLength);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_src);
                     ostr.writeLong(iceP_fileLength);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_setNodeLength =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default boolean setNodeLengthForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, long fileLength)
        throws com.maoding.Common.zeroc.CustomException
    {
        return setNodeLengthForAccount(account, src, fileLength, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean setNodeLengthForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, long fileLength, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_setNodeLengthForAccountAsync(account, src, fileLength, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> setNodeLengthForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, long fileLength)
    {
        return _iceI_setNodeLengthForAccountAsync(account, src, fileLength, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> setNodeLengthForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, long fileLength, java.util.Map<String, String> context)
    {
        return _iceI_setNodeLengthForAccountAsync(account, src, fileLength, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_setNodeLengthForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_src, long iceP_fileLength, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "setNodeLengthForAccount", null, sync, _iceE_setNodeLengthForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_src);
                     ostr.writeLong(iceP_fileLength);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_setNodeLengthForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default boolean setFullNodeLength(com.maoding.Storage.zeroc.FullNodeDTO src, long fileLength)
        throws com.maoding.Common.zeroc.CustomException
    {
        return setFullNodeLength(src, fileLength, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean setFullNodeLength(com.maoding.Storage.zeroc.FullNodeDTO src, long fileLength, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_setFullNodeLengthAsync(src, fileLength, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> setFullNodeLengthAsync(com.maoding.Storage.zeroc.FullNodeDTO src, long fileLength)
    {
        return _iceI_setFullNodeLengthAsync(src, fileLength, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> setFullNodeLengthAsync(com.maoding.Storage.zeroc.FullNodeDTO src, long fileLength, java.util.Map<String, String> context)
    {
        return _iceI_setFullNodeLengthAsync(src, fileLength, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_setFullNodeLengthAsync(com.maoding.Storage.zeroc.FullNodeDTO iceP_src, long iceP_fileLength, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "setFullNodeLength", null, sync, _iceE_setFullNodeLength);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.FullNodeDTO.ice_write(ostr, iceP_src);
                     ostr.writeLong(iceP_fileLength);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_setFullNodeLength =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default boolean setFullNodeLengthForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.FullNodeDTO src, long fileLength)
        throws com.maoding.Common.zeroc.CustomException
    {
        return setFullNodeLengthForAccount(account, src, fileLength, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean setFullNodeLengthForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.FullNodeDTO src, long fileLength, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_setFullNodeLengthForAccountAsync(account, src, fileLength, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> setFullNodeLengthForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.FullNodeDTO src, long fileLength)
    {
        return _iceI_setFullNodeLengthForAccountAsync(account, src, fileLength, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> setFullNodeLengthForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.FullNodeDTO src, long fileLength, java.util.Map<String, String> context)
    {
        return _iceI_setFullNodeLengthForAccountAsync(account, src, fileLength, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_setFullNodeLengthForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.FullNodeDTO iceP_src, long iceP_fileLength, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "setFullNodeLengthForAccount", null, sync, _iceE_setFullNodeLengthForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.FullNodeDTO.ice_write(ostr, iceP_src);
                     ostr.writeLong(iceP_fileLength);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_setFullNodeLengthForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default void releaseFile(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.NodeFileDTO file, String path)
        throws com.maoding.Common.zeroc.CustomException
    {
        releaseFile(account, file, path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void releaseFile(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.NodeFileDTO file, String path, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            _iceI_releaseFileAsync(account, file, path, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> releaseFileAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.NodeFileDTO file, String path)
    {
        return _iceI_releaseFileAsync(account, file, path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> releaseFileAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.NodeFileDTO file, String path, java.util.Map<String, String> context)
    {
        return _iceI_releaseFileAsync(account, file, path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_releaseFileAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.NodeFileDTO iceP_file, String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "releaseFile", null, sync, _iceE_releaseFile);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.NodeFileDTO.ice_write(ostr, iceP_file);
                     ostr.writeString(iceP_path);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_releaseFile =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default boolean releaseNode(com.maoding.Storage.zeroc.SimpleNodeDTO src, long fileLength)
        throws com.maoding.Common.zeroc.CustomException
    {
        return releaseNode(src, fileLength, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean releaseNode(com.maoding.Storage.zeroc.SimpleNodeDTO src, long fileLength, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_releaseNodeAsync(src, fileLength, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> releaseNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO src, long fileLength)
    {
        return _iceI_releaseNodeAsync(src, fileLength, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> releaseNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO src, long fileLength, java.util.Map<String, String> context)
    {
        return _iceI_releaseNodeAsync(src, fileLength, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_releaseNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO iceP_src, long iceP_fileLength, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "releaseNode", null, sync, _iceE_releaseNode);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_src);
                     ostr.writeLong(iceP_fileLength);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_releaseNode =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default boolean releaseNodeForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, long fileLength)
        throws com.maoding.Common.zeroc.CustomException
    {
        return releaseNodeForAccount(account, src, fileLength, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean releaseNodeForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, long fileLength, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_releaseNodeForAccountAsync(account, src, fileLength, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> releaseNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, long fileLength)
    {
        return _iceI_releaseNodeForAccountAsync(account, src, fileLength, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> releaseNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, long fileLength, java.util.Map<String, String> context)
    {
        return _iceI_releaseNodeForAccountAsync(account, src, fileLength, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_releaseNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_src, long iceP_fileLength, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "releaseNodeForAccount", null, sync, _iceE_releaseNodeForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_src);
                     ostr.writeLong(iceP_fileLength);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_releaseNodeForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default void reloadFile(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.NodeFileDTO file, String path)
        throws com.maoding.Common.zeroc.CustomException
    {
        reloadFile(account, file, path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default void reloadFile(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.NodeFileDTO file, String path, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            _iceI_reloadFileAsync(account, file, path, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<Void> reloadFileAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.NodeFileDTO file, String path)
    {
        return _iceI_reloadFileAsync(account, file, path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<Void> reloadFileAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.NodeFileDTO file, String path, java.util.Map<String, String> context)
    {
        return _iceI_reloadFileAsync(account, file, path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<Void> _iceI_reloadFileAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.NodeFileDTO iceP_file, String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<Void> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "reloadFile", null, sync, _iceE_reloadFile);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.NodeFileDTO.ice_write(ostr, iceP_file);
                     ostr.writeString(iceP_path);
                 }, null);
        return f;
    }

    static final Class<?>[] _iceE_reloadFile =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default boolean reloadNode(com.maoding.Storage.zeroc.SimpleNodeDTO src)
        throws com.maoding.Common.zeroc.CustomException
    {
        return reloadNode(src, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean reloadNode(com.maoding.Storage.zeroc.SimpleNodeDTO src, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_reloadNodeAsync(src, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> reloadNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO src)
    {
        return _iceI_reloadNodeAsync(src, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> reloadNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO src, java.util.Map<String, String> context)
    {
        return _iceI_reloadNodeAsync(src, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_reloadNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO iceP_src, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "reloadNode", null, sync, _iceE_reloadNode);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_src);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_reloadNode =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default boolean reloadNodeForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src)
        throws com.maoding.Common.zeroc.CustomException
    {
        return reloadNodeForAccount(account, src, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean reloadNodeForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_reloadNodeForAccountAsync(account, src, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> reloadNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src)
    {
        return _iceI_reloadNodeForAccountAsync(account, src, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> reloadNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, java.util.Map<String, String> context)
    {
        return _iceI_reloadNodeForAccountAsync(account, src, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_reloadNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_src, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "reloadNodeForAccount", null, sync, _iceE_reloadNodeForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_src);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_reloadNodeForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default int writeFile(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.NodeFileDTO file, FileDataDTO data, String path)
        throws com.maoding.Common.zeroc.CustomException
    {
        return writeFile(account, file, data, path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default int writeFile(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.NodeFileDTO file, FileDataDTO data, String path, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_writeFileAsync(account, file, data, path, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> writeFileAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.NodeFileDTO file, FileDataDTO data, String path)
    {
        return _iceI_writeFileAsync(account, file, data, path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> writeFileAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.NodeFileDTO file, FileDataDTO data, String path, java.util.Map<String, String> context)
    {
        return _iceI_writeFileAsync(account, file, data, path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> _iceI_writeFileAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.NodeFileDTO iceP_file, FileDataDTO iceP_data, String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "writeFile", null, sync, _iceE_writeFile);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.NodeFileDTO.ice_write(ostr, iceP_file);
                     FileDataDTO.ice_write(ostr, iceP_data);
                     ostr.writeString(iceP_path);
                 }, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_writeFile =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default int writeFileAndRelease(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.NodeFileDTO file, FileDataDTO data, String path, long fileLength)
        throws com.maoding.Common.zeroc.CustomException
    {
        return writeFileAndRelease(account, file, data, path, fileLength, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default int writeFileAndRelease(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.NodeFileDTO file, FileDataDTO data, String path, long fileLength, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_writeFileAndReleaseAsync(account, file, data, path, fileLength, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> writeFileAndReleaseAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.NodeFileDTO file, FileDataDTO data, String path, long fileLength)
    {
        return _iceI_writeFileAndReleaseAsync(account, file, data, path, fileLength, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> writeFileAndReleaseAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.NodeFileDTO file, FileDataDTO data, String path, long fileLength, java.util.Map<String, String> context)
    {
        return _iceI_writeFileAndReleaseAsync(account, file, data, path, fileLength, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> _iceI_writeFileAndReleaseAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.NodeFileDTO iceP_file, FileDataDTO iceP_data, String iceP_path, long iceP_fileLength, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "writeFileAndRelease", null, sync, _iceE_writeFileAndRelease);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.NodeFileDTO.ice_write(ostr, iceP_file);
                     FileDataDTO.ice_write(ostr, iceP_data);
                     ostr.writeString(iceP_path);
                     ostr.writeLong(iceP_fileLength);
                 }, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_writeFileAndRelease =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default int writeAccessory(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.NodeFileDTO file, FileDataDTO data)
        throws com.maoding.Common.zeroc.CustomException
    {
        return writeAccessory(account, file, data, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default int writeAccessory(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.NodeFileDTO file, FileDataDTO data, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_writeAccessoryAsync(account, file, data, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> writeAccessoryAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.NodeFileDTO file, FileDataDTO data)
    {
        return _iceI_writeAccessoryAsync(account, file, data, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> writeAccessoryAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.NodeFileDTO file, FileDataDTO data, java.util.Map<String, String> context)
    {
        return _iceI_writeAccessoryAsync(account, file, data, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> _iceI_writeAccessoryAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.NodeFileDTO iceP_file, FileDataDTO iceP_data, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "writeAccessory", null, sync, _iceE_writeAccessory);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.NodeFileDTO.ice_write(ostr, iceP_file);
                     FileDataDTO.ice_write(ostr, iceP_data);
                 }, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_writeAccessory =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default int writeNode(com.maoding.Storage.zeroc.SimpleNodeDTO src, FileDataDTO data)
        throws com.maoding.Common.zeroc.CustomException
    {
        return writeNode(src, data, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default int writeNode(com.maoding.Storage.zeroc.SimpleNodeDTO src, FileDataDTO data, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_writeNodeAsync(src, data, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> writeNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO src, FileDataDTO data)
    {
        return _iceI_writeNodeAsync(src, data, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> writeNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO src, FileDataDTO data, java.util.Map<String, String> context)
    {
        return _iceI_writeNodeAsync(src, data, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> _iceI_writeNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO iceP_src, FileDataDTO iceP_data, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "writeNode", null, sync, _iceE_writeNode);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_src);
                     FileDataDTO.ice_write(ostr, iceP_data);
                 }, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_writeNode =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default int writeNodeForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, FileDataDTO data)
        throws com.maoding.Common.zeroc.CustomException
    {
        return writeNodeForAccount(account, src, data, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default int writeNodeForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, FileDataDTO data, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_writeNodeForAccountAsync(account, src, data, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> writeNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, FileDataDTO data)
    {
        return _iceI_writeNodeForAccountAsync(account, src, data, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Integer> writeNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, FileDataDTO data, java.util.Map<String, String> context)
    {
        return _iceI_writeNodeForAccountAsync(account, src, data, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> _iceI_writeNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_src, FileDataDTO iceP_data, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Integer> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "writeNodeForAccount", null, sync, _iceE_writeNodeForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_src);
                     FileDataDTO.ice_write(ostr, iceP_data);
                 }, istr -> {
                     int ret;
                     ret = istr.readInt();
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_writeNodeForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default FileDataDTO readFile(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.NodeFileDTO file, long pos, int size)
        throws com.maoding.Common.zeroc.CustomException
    {
        return readFile(account, file, pos, size, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default FileDataDTO readFile(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.NodeFileDTO file, long pos, int size, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_readFileAsync(account, file, pos, size, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<FileDataDTO> readFileAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.NodeFileDTO file, long pos, int size)
    {
        return _iceI_readFileAsync(account, file, pos, size, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<FileDataDTO> readFileAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.NodeFileDTO file, long pos, int size, java.util.Map<String, String> context)
    {
        return _iceI_readFileAsync(account, file, pos, size, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<FileDataDTO> _iceI_readFileAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.NodeFileDTO iceP_file, long iceP_pos, int iceP_size, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<FileDataDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "readFile", null, sync, _iceE_readFile);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.NodeFileDTO.ice_write(ostr, iceP_file);
                     ostr.writeLong(iceP_pos);
                     ostr.writeInt(iceP_size);
                 }, istr -> {
                     FileDataDTO ret;
                     ret = FileDataDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_readFile =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default FileDataDTO readNode(com.maoding.Storage.zeroc.SimpleNodeDTO src, long pos, int size)
        throws com.maoding.Common.zeroc.CustomException
    {
        return readNode(src, pos, size, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default FileDataDTO readNode(com.maoding.Storage.zeroc.SimpleNodeDTO src, long pos, int size, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_readNodeAsync(src, pos, size, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<FileDataDTO> readNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO src, long pos, int size)
    {
        return _iceI_readNodeAsync(src, pos, size, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<FileDataDTO> readNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO src, long pos, int size, java.util.Map<String, String> context)
    {
        return _iceI_readNodeAsync(src, pos, size, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<FileDataDTO> _iceI_readNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO iceP_src, long iceP_pos, int iceP_size, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<FileDataDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "readNode", null, sync, _iceE_readNode);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_src);
                     ostr.writeLong(iceP_pos);
                     ostr.writeInt(iceP_size);
                 }, istr -> {
                     FileDataDTO ret;
                     ret = FileDataDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_readNode =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default FileDataDTO readNodeForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, long pos, int size)
        throws com.maoding.Common.zeroc.CustomException
    {
        return readNodeForAccount(account, src, pos, size, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default FileDataDTO readNodeForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, long pos, int size, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_readNodeForAccountAsync(account, src, pos, size, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<FileDataDTO> readNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, long pos, int size)
    {
        return _iceI_readNodeForAccountAsync(account, src, pos, size, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<FileDataDTO> readNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, long pos, int size, java.util.Map<String, String> context)
    {
        return _iceI_readNodeForAccountAsync(account, src, pos, size, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<FileDataDTO> _iceI_readNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_src, long iceP_pos, int iceP_size, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<FileDataDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "readNodeForAccount", null, sync, _iceE_readNodeForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_src);
                     ostr.writeLong(iceP_pos);
                     ostr.writeInt(iceP_size);
                 }, istr -> {
                     FileDataDTO ret;
                     ret = FileDataDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_readNodeForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default boolean isEmpty(com.maoding.Storage.zeroc.SimpleNodeDTO node)
        throws com.maoding.Common.zeroc.CustomException
    {
        return isEmpty(node, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default boolean isEmpty(com.maoding.Storage.zeroc.SimpleNodeDTO node, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_isEmptyAsync(node, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> isEmptyAsync(com.maoding.Storage.zeroc.SimpleNodeDTO node)
    {
        return _iceI_isEmptyAsync(node, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.lang.Boolean> isEmptyAsync(com.maoding.Storage.zeroc.SimpleNodeDTO node, java.util.Map<String, String> context)
    {
        return _iceI_isEmptyAsync(node, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> _iceI_isEmptyAsync(com.maoding.Storage.zeroc.SimpleNodeDTO iceP_node, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.lang.Boolean> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "isEmpty", null, sync, _iceE_isEmpty);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_node);
                 }, istr -> {
                     boolean ret;
                     ret = istr.readBool();
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_isEmpty =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.SimpleNodeDTO moveNode(com.maoding.Storage.zeroc.SimpleNodeDTO src, com.maoding.Storage.zeroc.SimpleNodeDTO dstParent, MoveNodeRequestDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return moveNode(src, dstParent, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.SimpleNodeDTO moveNode(com.maoding.Storage.zeroc.SimpleNodeDTO src, com.maoding.Storage.zeroc.SimpleNodeDTO dstParent, MoveNodeRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_moveNodeAsync(src, dstParent, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> moveNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO src, com.maoding.Storage.zeroc.SimpleNodeDTO dstParent, MoveNodeRequestDTO request)
    {
        return _iceI_moveNodeAsync(src, dstParent, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> moveNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO src, com.maoding.Storage.zeroc.SimpleNodeDTO dstParent, MoveNodeRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_moveNodeAsync(src, dstParent, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> _iceI_moveNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO iceP_src, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_dstParent, MoveNodeRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "moveNode", null, sync, _iceE_moveNode);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_src);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_dstParent);
                     MoveNodeRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_moveNode =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.SimpleNodeDTO moveNodeForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, com.maoding.Storage.zeroc.SimpleNodeDTO dstParent, MoveNodeRequestDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return moveNodeForAccount(account, src, dstParent, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.SimpleNodeDTO moveNodeForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, com.maoding.Storage.zeroc.SimpleNodeDTO dstParent, MoveNodeRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_moveNodeForAccountAsync(account, src, dstParent, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> moveNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, com.maoding.Storage.zeroc.SimpleNodeDTO dstParent, MoveNodeRequestDTO request)
    {
        return _iceI_moveNodeForAccountAsync(account, src, dstParent, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> moveNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO src, com.maoding.Storage.zeroc.SimpleNodeDTO dstParent, MoveNodeRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_moveNodeForAccountAsync(account, src, dstParent, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> _iceI_moveNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_src, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_dstParent, MoveNodeRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "moveNodeForAccount", null, sync, _iceE_moveNodeForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_src);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_dstParent);
                     MoveNodeRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_moveNodeForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.SimpleNodeDTO createDirectory(com.maoding.Storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return createDirectory(parent, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.SimpleNodeDTO createDirectory(com.maoding.Storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_createDirectoryAsync(parent, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> createDirectoryAsync(com.maoding.Storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request)
    {
        return _iceI_createDirectoryAsync(parent, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> createDirectoryAsync(com.maoding.Storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_createDirectoryAsync(parent, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> _iceI_createDirectoryAsync(com.maoding.Storage.zeroc.SimpleNodeDTO iceP_parent, CreateNodeRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createDirectory", null, sync, _iceE_createDirectory);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_parent);
                     CreateNodeRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_createDirectory =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.SimpleNodeDTO createDirectoryForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return createDirectoryForAccount(account, parent, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.SimpleNodeDTO createDirectoryForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_createDirectoryForAccountAsync(account, parent, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> createDirectoryForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request)
    {
        return _iceI_createDirectoryForAccountAsync(account, parent, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> createDirectoryForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_createDirectoryForAccountAsync(account, parent, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> _iceI_createDirectoryForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_parent, CreateNodeRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createDirectoryForAccount", null, sync, _iceE_createDirectoryForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_parent);
                     CreateNodeRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_createDirectoryForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.SimpleNodeDTO createFile(com.maoding.Storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return createFile(parent, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.SimpleNodeDTO createFile(com.maoding.Storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_createFileAsync(parent, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> createFileAsync(com.maoding.Storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request)
    {
        return _iceI_createFileAsync(parent, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> createFileAsync(com.maoding.Storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_createFileAsync(parent, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> _iceI_createFileAsync(com.maoding.Storage.zeroc.SimpleNodeDTO iceP_parent, CreateNodeRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createFile", null, sync, _iceE_createFile);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_parent);
                     CreateNodeRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_createFile =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.SimpleNodeDTO createFileForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return createFileForAccount(account, parent, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.SimpleNodeDTO createFileForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_createFileForAccountAsync(account, parent, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> createFileForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request)
    {
        return _iceI_createFileForAccountAsync(account, parent, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> createFileForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_createFileForAccountAsync(account, parent, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> _iceI_createFileForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_parent, CreateNodeRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createFileForAccount", null, sync, _iceE_createFileForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_parent);
                     CreateNodeRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_createFileForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.SimpleNodeDTO createNode(com.maoding.Storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return createNode(parent, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.SimpleNodeDTO createNode(com.maoding.Storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_createNodeAsync(parent, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> createNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request)
    {
        return _iceI_createNodeAsync(parent, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> createNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_createNodeAsync(parent, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> _iceI_createNodeAsync(com.maoding.Storage.zeroc.SimpleNodeDTO iceP_parent, CreateNodeRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createNode", null, sync, _iceE_createNode);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_parent);
                     CreateNodeRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_createNode =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.SimpleNodeDTO createNodeForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request)
        throws com.maoding.Common.zeroc.CustomException
    {
        return createNodeForAccount(account, parent, request, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.SimpleNodeDTO createNodeForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_createNodeForAccountAsync(account, parent, request, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> createNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request)
    {
        return _iceI_createNodeForAccountAsync(account, parent, request, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> createNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.SimpleNodeDTO parent, CreateNodeRequestDTO request, java.util.Map<String, String> context)
    {
        return _iceI_createNodeForAccountAsync(account, parent, request, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> _iceI_createNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.SimpleNodeDTO iceP_parent, CreateNodeRequestDTO iceP_request, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "createNodeForAccount", null, sync, _iceE_createNodeForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.SimpleNodeDTO.ice_write(ostr, iceP_parent);
                     CreateNodeRequestDTO.ice_write(ostr, iceP_request);
                 }, istr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_createNodeForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.SimpleNodeDTO getNodeById(String id)
        throws com.maoding.Common.zeroc.CustomException
    {
        return getNodeById(id, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.SimpleNodeDTO getNodeById(String id, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_getNodeByIdAsync(id, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> getNodeByIdAsync(String id)
    {
        return _iceI_getNodeByIdAsync(id, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> getNodeByIdAsync(String id, java.util.Map<String, String> context)
    {
        return _iceI_getNodeByIdAsync(id, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> _iceI_getNodeByIdAsync(String iceP_id, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getNodeById", null, sync, _iceE_getNodeById);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_id);
                 }, istr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_getNodeById =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.SimpleNodeDTO getNodeByIdForAccount(com.maoding.User.zeroc.AccountDTO account, String id)
        throws com.maoding.Common.zeroc.CustomException
    {
        return getNodeByIdForAccount(account, id, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.SimpleNodeDTO getNodeByIdForAccount(com.maoding.User.zeroc.AccountDTO account, String id, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_getNodeByIdForAccountAsync(account, id, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> getNodeByIdForAccountAsync(com.maoding.User.zeroc.AccountDTO account, String id)
    {
        return _iceI_getNodeByIdForAccountAsync(account, id, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> getNodeByIdForAccountAsync(com.maoding.User.zeroc.AccountDTO account, String id, java.util.Map<String, String> context)
    {
        return _iceI_getNodeByIdForAccountAsync(account, id, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> _iceI_getNodeByIdForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, String iceP_id, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getNodeByIdForAccount", null, sync, _iceE_getNodeByIdForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     ostr.writeString(iceP_id);
                 }, istr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_getNodeByIdForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.SimpleNodeDTO getNodeByPath(String path)
        throws com.maoding.Common.zeroc.CustomException
    {
        return getNodeByPath(path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.SimpleNodeDTO getNodeByPath(String path, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_getNodeByPathAsync(path, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> getNodeByPathAsync(String path)
    {
        return _iceI_getNodeByPathAsync(path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> getNodeByPathAsync(String path, java.util.Map<String, String> context)
    {
        return _iceI_getNodeByPathAsync(path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> _iceI_getNodeByPathAsync(String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getNodeByPath", null, sync, _iceE_getNodeByPath);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_path);
                 }, istr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_getNodeByPath =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.SimpleNodeDTO getNodeByPathForAccount(com.maoding.User.zeroc.AccountDTO account, String path)
        throws com.maoding.Common.zeroc.CustomException
    {
        return getNodeByPathForAccount(account, path, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.SimpleNodeDTO getNodeByPathForAccount(com.maoding.User.zeroc.AccountDTO account, String path, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_getNodeByPathForAccountAsync(account, path, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> getNodeByPathForAccountAsync(com.maoding.User.zeroc.AccountDTO account, String path)
    {
        return _iceI_getNodeByPathForAccountAsync(account, path, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> getNodeByPathForAccountAsync(com.maoding.User.zeroc.AccountDTO account, String path, java.util.Map<String, String> context)
    {
        return _iceI_getNodeByPathForAccountAsync(account, path, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> _iceI_getNodeByPathForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, String iceP_path, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getNodeByPathForAccount", null, sync, _iceE_getNodeByPathForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     ostr.writeString(iceP_path);
                 }, istr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_getNodeByPathForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.SimpleNodeDTO getNodeByFuzzyPath(String fuzzyPath)
        throws com.maoding.Common.zeroc.CustomException
    {
        return getNodeByFuzzyPath(fuzzyPath, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.SimpleNodeDTO getNodeByFuzzyPath(String fuzzyPath, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_getNodeByFuzzyPathAsync(fuzzyPath, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> getNodeByFuzzyPathAsync(String fuzzyPath)
    {
        return _iceI_getNodeByFuzzyPathAsync(fuzzyPath, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> getNodeByFuzzyPathAsync(String fuzzyPath, java.util.Map<String, String> context)
    {
        return _iceI_getNodeByFuzzyPathAsync(fuzzyPath, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> _iceI_getNodeByFuzzyPathAsync(String iceP_fuzzyPath, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getNodeByFuzzyPath", null, sync, _iceE_getNodeByFuzzyPath);
        f.invoke(true, context, null, ostr -> {
                     ostr.writeString(iceP_fuzzyPath);
                 }, istr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_getNodeByFuzzyPath =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default com.maoding.Storage.zeroc.SimpleNodeDTO getNodeByFuzzyPathForAccount(com.maoding.User.zeroc.AccountDTO account, String fuzzyPath)
        throws com.maoding.Common.zeroc.CustomException
    {
        return getNodeByFuzzyPathForAccount(account, fuzzyPath, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default com.maoding.Storage.zeroc.SimpleNodeDTO getNodeByFuzzyPathForAccount(com.maoding.User.zeroc.AccountDTO account, String fuzzyPath, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_getNodeByFuzzyPathForAccountAsync(account, fuzzyPath, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> getNodeByFuzzyPathForAccountAsync(com.maoding.User.zeroc.AccountDTO account, String fuzzyPath)
    {
        return _iceI_getNodeByFuzzyPathForAccountAsync(account, fuzzyPath, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<com.maoding.Storage.zeroc.SimpleNodeDTO> getNodeByFuzzyPathForAccountAsync(com.maoding.User.zeroc.AccountDTO account, String fuzzyPath, java.util.Map<String, String> context)
    {
        return _iceI_getNodeByFuzzyPathForAccountAsync(account, fuzzyPath, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> _iceI_getNodeByFuzzyPathForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, String iceP_fuzzyPath, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<com.maoding.Storage.zeroc.SimpleNodeDTO> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "getNodeByFuzzyPathForAccount", null, sync, _iceE_getNodeByFuzzyPathForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     ostr.writeString(iceP_fuzzyPath);
                 }, istr -> {
                     com.maoding.Storage.zeroc.SimpleNodeDTO ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeDTO.ice_read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_getNodeByFuzzyPathForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> listRootNode()
        throws com.maoding.Common.zeroc.CustomException
    {
        return listRootNode(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> listRootNode(java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_listRootNodeAsync(context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> listRootNodeAsync()
    {
        return _iceI_listRootNodeAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> listRootNodeAsync(java.util.Map<String, String> context)
    {
        return _iceI_listRootNodeAsync(context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> _iceI_listRootNodeAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listRootNode", null, sync, _iceE_listRootNode);
        f.invoke(true, context, null, null, istr -> {
                     java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listRootNode =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> listRootNodeForAccount(com.maoding.User.zeroc.AccountDTO account)
        throws com.maoding.Common.zeroc.CustomException
    {
        return listRootNodeForAccount(account, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> listRootNodeForAccount(com.maoding.User.zeroc.AccountDTO account, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_listRootNodeForAccountAsync(account, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> listRootNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account)
    {
        return _iceI_listRootNodeForAccountAsync(account, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> listRootNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, java.util.Map<String, String> context)
    {
        return _iceI_listRootNodeForAccountAsync(account, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> _iceI_listRootNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listRootNodeForAccount", null, sync, _iceE_listRootNodeForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                 }, istr -> {
                     java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listRootNodeForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> listAllNode()
        throws com.maoding.Common.zeroc.CustomException
    {
        return listAllNode(com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> listAllNode(java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_listAllNodeAsync(context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> listAllNodeAsync()
    {
        return _iceI_listAllNodeAsync(com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> listAllNodeAsync(java.util.Map<String, String> context)
    {
        return _iceI_listAllNodeAsync(context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> _iceI_listAllNodeAsync(java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listAllNode", null, sync, _iceE_listAllNode);
        f.invoke(true, context, null, null, istr -> {
                     java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listAllNode =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> listAllNodeForAccount(com.maoding.User.zeroc.AccountDTO account)
        throws com.maoding.Common.zeroc.CustomException
    {
        return listAllNodeForAccount(account, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> listAllNodeForAccount(com.maoding.User.zeroc.AccountDTO account, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_listAllNodeForAccountAsync(account, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> listAllNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account)
    {
        return _iceI_listAllNodeForAccountAsync(account, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> listAllNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, java.util.Map<String, String> context)
    {
        return _iceI_listAllNodeForAccountAsync(account, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> _iceI_listAllNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listAllNodeForAccount", null, sync, _iceE_listAllNodeForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                 }, istr -> {
                     java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listAllNodeForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> listNode(com.maoding.Storage.zeroc.QueryNodeDTO query)
        throws com.maoding.Common.zeroc.CustomException
    {
        return listNode(query, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> listNode(com.maoding.Storage.zeroc.QueryNodeDTO query, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_listNodeAsync(query, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> listNodeAsync(com.maoding.Storage.zeroc.QueryNodeDTO query)
    {
        return _iceI_listNodeAsync(query, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> listNodeAsync(com.maoding.Storage.zeroc.QueryNodeDTO query, java.util.Map<String, String> context)
    {
        return _iceI_listNodeAsync(query, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> _iceI_listNodeAsync(com.maoding.Storage.zeroc.QueryNodeDTO iceP_query, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listNode", null, sync, _iceE_listNode);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.Storage.zeroc.QueryNodeDTO.ice_write(ostr, iceP_query);
                 }, istr -> {
                     java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listNode =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    default java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> listNodeForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.QueryNodeDTO query)
        throws com.maoding.Common.zeroc.CustomException
    {
        return listNodeForAccount(account, query, com.zeroc.Ice.ObjectPrx.noExplicitContext);
    }

    default java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> listNodeForAccount(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.QueryNodeDTO query, java.util.Map<String, String> context)
        throws com.maoding.Common.zeroc.CustomException
    {
        try
        {
            return _iceI_listNodeForAccountAsync(account, query, context, true).waitForResponseOrUserEx();
        }
        catch(com.maoding.Common.zeroc.CustomException ex)
        {
            throw ex;
        }
        catch(com.zeroc.Ice.UserException ex)
        {
            throw new com.zeroc.Ice.UnknownUserException(ex.ice_id(), ex);
        }
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> listNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.QueryNodeDTO query)
    {
        return _iceI_listNodeForAccountAsync(account, query, com.zeroc.Ice.ObjectPrx.noExplicitContext, false);
    }

    default java.util.concurrent.CompletableFuture<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> listNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO account, com.maoding.Storage.zeroc.QueryNodeDTO query, java.util.Map<String, String> context)
    {
        return _iceI_listNodeForAccountAsync(account, query, context, false);
    }

    default com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> _iceI_listNodeForAccountAsync(com.maoding.User.zeroc.AccountDTO iceP_account, com.maoding.Storage.zeroc.QueryNodeDTO iceP_query, java.util.Map<String, String> context, boolean sync)
    {
        com.zeroc.IceInternal.OutgoingAsync<java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO>> f = new com.zeroc.IceInternal.OutgoingAsync<>(this, "listNodeForAccount", null, sync, _iceE_listNodeForAccount);
        f.invoke(true, context, null, ostr -> {
                     com.maoding.User.zeroc.AccountDTO.ice_write(ostr, iceP_account);
                     com.maoding.Storage.zeroc.QueryNodeDTO.ice_write(ostr, iceP_query);
                 }, istr -> {
                     java.util.List<com.maoding.Storage.zeroc.SimpleNodeDTO> ret;
                     ret = com.maoding.Storage.zeroc.SimpleNodeListHelper.read(istr);
                     return ret;
                 });
        return f;
    }

    static final Class<?>[] _iceE_listNodeForAccount =
    {
        com.maoding.Common.zeroc.CustomException.class
    };

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static FileServicePrx checkedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, ice_staticId(), FileServicePrx.class, _FileServicePrxI.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static FileServicePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, context, ice_staticId(), FileServicePrx.class, _FileServicePrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static FileServicePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, ice_staticId(), FileServicePrx.class, _FileServicePrxI.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    static FileServicePrx checkedCast(com.zeroc.Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return com.zeroc.Ice.ObjectPrx._checkedCast(obj, facet, context, ice_staticId(), FileServicePrx.class, _FileServicePrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    static FileServicePrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, FileServicePrx.class, _FileServicePrxI.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    static FileServicePrx uncheckedCast(com.zeroc.Ice.ObjectPrx obj, String facet)
    {
        return com.zeroc.Ice.ObjectPrx._uncheckedCast(obj, facet, FileServicePrx.class, _FileServicePrxI.class);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the per-proxy context.
     * @param newContext The context for the new proxy.
     * @return A proxy with the specified per-proxy context.
     **/
    @Override
    default FileServicePrx ice_context(java.util.Map<String, String> newContext)
    {
        return (FileServicePrx)_ice_context(newContext);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the adapter ID.
     * @param newAdapterId The adapter ID for the new proxy.
     * @return A proxy with the specified adapter ID.
     **/
    @Override
    default FileServicePrx ice_adapterId(String newAdapterId)
    {
        return (FileServicePrx)_ice_adapterId(newAdapterId);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoints.
     * @param newEndpoints The endpoints for the new proxy.
     * @return A proxy with the specified endpoints.
     **/
    @Override
    default FileServicePrx ice_endpoints(com.zeroc.Ice.Endpoint[] newEndpoints)
    {
        return (FileServicePrx)_ice_endpoints(newEndpoints);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator cache timeout.
     * @param newTimeout The new locator cache timeout (in seconds).
     * @return A proxy with the specified locator cache timeout.
     **/
    @Override
    default FileServicePrx ice_locatorCacheTimeout(int newTimeout)
    {
        return (FileServicePrx)_ice_locatorCacheTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the invocation timeout.
     * @param newTimeout The new invocation timeout (in seconds).
     * @return A proxy with the specified invocation timeout.
     **/
    @Override
    default FileServicePrx ice_invocationTimeout(int newTimeout)
    {
        return (FileServicePrx)_ice_invocationTimeout(newTimeout);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for connection caching.
     * @param newCache <code>true</code> if the new proxy should cache connections; <code>false</code> otherwise.
     * @return A proxy with the specified caching policy.
     **/
    @Override
    default FileServicePrx ice_connectionCached(boolean newCache)
    {
        return (FileServicePrx)_ice_connectionCached(newCache);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the endpoint selection policy.
     * @param newType The new endpoint selection policy.
     * @return A proxy with the specified endpoint selection policy.
     **/
    @Override
    default FileServicePrx ice_endpointSelection(com.zeroc.Ice.EndpointSelectionType newType)
    {
        return (FileServicePrx)_ice_endpointSelection(newType);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for how it selects endpoints.
     * @param b If <code>b</code> is <code>true</code>, only endpoints that use a secure transport are
     * used by the new proxy. If <code>b</code> is false, the returned proxy uses both secure and
     * insecure endpoints.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default FileServicePrx ice_secure(boolean b)
    {
        return (FileServicePrx)_ice_secure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the encoding used to marshal parameters.
     * @param e The encoding version to use to marshal request parameters.
     * @return A proxy with the specified encoding version.
     **/
    @Override
    default FileServicePrx ice_encodingVersion(com.zeroc.Ice.EncodingVersion e)
    {
        return (FileServicePrx)_ice_encodingVersion(e);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its endpoint selection policy.
     * @param b If <code>b</code> is <code>true</code>, the new proxy will use secure endpoints for invocations
     * and only use insecure endpoints if an invocation cannot be made via secure endpoints. If <code>b</code> is
     * <code>false</code>, the proxy prefers insecure endpoints to secure ones.
     * @return A proxy with the specified selection policy.
     **/
    @Override
    default FileServicePrx ice_preferSecure(boolean b)
    {
        return (FileServicePrx)_ice_preferSecure(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the router.
     * @param router The router for the new proxy.
     * @return A proxy with the specified router.
     **/
    @Override
    default FileServicePrx ice_router(com.zeroc.Ice.RouterPrx router)
    {
        return (FileServicePrx)_ice_router(router);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for the locator.
     * @param locator The locator for the new proxy.
     * @return A proxy with the specified locator.
     **/
    @Override
    default FileServicePrx ice_locator(com.zeroc.Ice.LocatorPrx locator)
    {
        return (FileServicePrx)_ice_locator(locator);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for collocation optimization.
     * @param b <code>true</code> if the new proxy enables collocation optimization; <code>false</code> otherwise.
     * @return A proxy with the specified collocation optimization.
     **/
    @Override
    default FileServicePrx ice_collocationOptimized(boolean b)
    {
        return (FileServicePrx)_ice_collocationOptimized(b);
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses twoway invocations.
     * @return A proxy that uses twoway invocations.
     **/
    @Override
    default FileServicePrx ice_twoway()
    {
        return (FileServicePrx)_ice_twoway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses oneway invocations.
     * @return A proxy that uses oneway invocations.
     **/
    @Override
    default FileServicePrx ice_oneway()
    {
        return (FileServicePrx)_ice_oneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch oneway invocations.
     * @return A proxy that uses batch oneway invocations.
     **/
    @Override
    default FileServicePrx ice_batchOneway()
    {
        return (FileServicePrx)_ice_batchOneway();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses datagram invocations.
     * @return A proxy that uses datagram invocations.
     **/
    @Override
    default FileServicePrx ice_datagram()
    {
        return (FileServicePrx)_ice_datagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, but uses batch datagram invocations.
     * @return A proxy that uses batch datagram invocations.
     **/
    @Override
    default FileServicePrx ice_batchDatagram()
    {
        return (FileServicePrx)_ice_batchDatagram();
    }

    /**
     * Returns a proxy that is identical to this proxy, except for compression.
     * @param co <code>true</code> enables compression for the new proxy; <code>false</code> disables compression.
     * @return A proxy with the specified compression setting.
     **/
    @Override
    default FileServicePrx ice_compress(boolean co)
    {
        return (FileServicePrx)_ice_compress(co);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection timeout setting.
     * @param t The connection timeout for the proxy in milliseconds.
     * @return A proxy with the specified timeout.
     **/
    @Override
    default FileServicePrx ice_timeout(int t)
    {
        return (FileServicePrx)_ice_timeout(t);
    }

    /**
     * Returns a proxy that is identical to this proxy, except for its connection ID.
     * @param connectionId The connection ID for the new proxy. An empty string removes the connection ID.
     * @return A proxy with the specified connection ID.
     **/
    @Override
    default FileServicePrx ice_connectionId(String connectionId)
    {
        return (FileServicePrx)_ice_connectionId(connectionId);
    }

    static String ice_staticId()
    {
        return "::zeroc::FileService";
    }
}
