<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.maoding.Storage.Dao.StorageDao">
    <select id="summaryNodeLength" parameterType="com.maoding.Storage.zeroc.QuerySummaryDTO" resultType="java.lang.Long">
        select sum(storage_tree.file_length)
        from md_tree_storage storage_tree
        inner join md_node_storage node on (storage_tree.id = substring(node.id,1,32))
        <where>
            storage_tree.deleted = 0
            <if test="companyId != null">
                and (node.company_id = #{companyId})
            </if>
            <if test="projectId != null">
                and (node.project_id = #{projectId})
            </if>
            <if test="ownerUserId != null">
                and (node.owner_user_id = #{ownerUserId})
            </if>
        </where>
    </select>

    <sql id="ConditionForQueryNode">
        <if test="id != null">
            and find_in_set(node.id,#{id})
        </if>
        <if test="pid != null">
            <choose>
                <when test="pid == '-'.toString()">
                    and (pid is null)
                </when>
                <otherwise>
                    and find_in_set(node.pid,#{pid})
                </otherwise>
            </choose>
        </if>
        <if test="name != null">
            and find_in_set(node.name,#{name})
        </if>
        <if test="path != null">
            and (node.path = #{path})
        </if>
        <if test="typeId != null">
            and find_in_set(node.type_id,#{typeId})
        </if>
        <if test="projectId != null">
            and find_in_set(node.project_id,#{projectId})
        </if>
        <if test="rangeId != null">
            and find_in_set(node.range_id,#{rangeId})
        </if>
        <if test="issueId != null">
            and find_in_set(node.issue_id,#{issueId})
        </if>
        <if test="taskId != null">
            and find_in_set(node.task_id,#{taskId})
        </if>
        <if test="companyId != null">
            and find_in_set(node.company_id,#{companyId})
        </if>
        <if test="ownerUserId != null">
            and find_in_set(node.owner_user_id,#{ownerUserId})
        </if>
        <if test="lastModifyRoleId != null">
            and find_in_set(node.last_modify_role_id in #{lastModifyRoleId})
        </if>
        <if test="parentPath != null">
            and (node.path like concat(#{parentPath},'/%'))
        </if>
        <if test="fuzzyPath != null">
            and (node.path = #{fuzzyPath} or #{fuzzyPath} like concat(node.path,'/%'))
        </if>
    </sql>

    <select id="listNodeFile" resultType="com.maoding.Storage.zeroc.NodeFileDTO" parameterType="com.maoding.Storage.zeroc.QueryNodeFileDTO">
        select * from md_file file
        <where>
            <if test="id != null">
                and find_in_set(file.id,#{id})
            </if>
            <if test="serverTypeId != null">
                and (find_in_set(file.server_type_id,#{serverTypeId})
                  or find_in_set(file.mirror_server_type_id,#{serverTypeId}))
            </if>
            <if test="serverAddress != null">
                and (find_in_set(file.server_address,#{serverAddress})
                  or find_in_set(file.mirror_server_address,#{serverAddress}))
            </if>
            <if test="baseDir != null">
                and (find_in_set(file.base_dir,#{baseDir})
                  or find_in_set(file.mirror_base_dir,#{baseDir}))
            </if>
            <if test="key != null">
                and (find_in_set(file.read_only_key,#{key})
                  or find_in_set(file.writable_key,#{key})
                  or find_in_set(file.read_only_mirror_key,#{key})
                  or find_in_set(file.writable_mirror_key,#{key}))
            </if>
        </where>
    </select>

    <resultMap id="FileDetailMap" type="com.maoding.Storage.zeroc.FullNodeDTO" autoMapping="true" >
        <association property="textInfo" javaType="com.maoding.Storage.zeroc.NodeTextDTO" autoMapping="true" fetchType="eager"/>
        <association property="fileInfo" javaType="com.maoding.Storage.zeroc.NodeFileDTO" autoMapping="true" fetchType="eager">
            <id column="file_id" property="id"/>
        </association>
        <collection property="historyList" ofType="com.maoding.Storage.zeroc.HistoryDTO" autoMapping="true" fetchType="eager">
            <id column="history_id" property="id"/>
            <result column="history_action_user_id" property="userId"/>
            <result column="history_action_type_id" property="actionTypeId"/>
            <result column="history_remark" property="remark"/>
            <result column="history_action_user_name" property="userName"/>
            <result column="history_action_name" property="actionName"/>
        </collection>
    </resultMap>

    <select id="getNodeDetailByNodeId" resultMap="FileDetailMap" parameterType="java.util.Map">
        select
            storage_tree.path as storage_path
            <if test="request != null">
                <if test="request.textQuery != null">
                    ,node.path
                    ,company.company_name
                    ,project.project_name
                    ,task.issue_name
                    ,task.issue_path
                    ,task.task_name
                    ,task.task_path
                    ,account.user_name as owner_name
                    <if test="request.textQuery.isQueryTypeName != null and request.textQuery.isQueryTypeName != 0">
                        ,range_type.type_name as range_name
                    </if>
                </if>
                <if test="request.fileQuery != null">
                    ,file.id as file_id
                    ,file.file_type_id
                    ,file.file_version
                    ,file.file_checksum
                    ,file.major_type_id
                    ,file.main_file_id
                    ,file.server_type_id
                    ,file.server_address
                    ,file.base_dir
                    ,file.read_only_key
                    ,file.writable_key
                    <if test="request.fileQuery.mirrorServerTypeId != null">
                        ,mirror.read_only_key as read_only_mirror_key
                        ,mirror.writable_key as writable_mirror_key
                    </if>
                </if>
                <if test="request.historyQuery != null">
                    ,his.id as history_id
                    ,his.last_modify_user_id as history_action_user_id
                    ,his.action_type_id as history_action_type_id
                    ,his.remark as history_remark
                    ,his_account.user_name as history_action_user_name
                    ,his_action_type.type_name as history_action_name
                </if>
            </if>
        from
        <choose>
            <when test="request != null">
                <choose>
                    <when test="request.textQuery != null">
                        md_node node
                        left join md_tree_storage storage_tree on (storage_tree.id = substring(node.id,1,32))
                        left join maoding_web_company company on (node.company_id = company.id)
                        left join maoding_web_project project on (node.project_id = project.id)
                        left join md_web_task task on (node.task_id = task.id)
                        left join maoding_web_account account on (node.owner_user_id = account.id)
                        <if test="request.textQuery.isQueryTypeName != null and request.textQuery.isQueryTypeName != 0">
                            left join md_type_range range_type on (range_type.type_id = node.range_id)
                        </if>
                    </when>
                    <otherwise>
                        md_tree_storage storage_tree
                    </otherwise>
                </choose>
                <if test="request.fileQuery != null">
                    left join md_list_storage_file file on (storage_tree.id = file.id)
                    <if test="request.fileQuery.mirrorServerTypeId != null">
                        left join md_list_storage_file mirror on (mirror.deleted = 0
                                and mirror.main_file_id = file.id
                                and mirror.server_type_id = #{request.fileQuery.mirrorServerTypeId}
                            <if test="request.fileQuery.mirrorServerAddress != null">
                                and mirror.server_address = #{request.fileQuery.mirrorServerAddress}
                            </if>
                            <if test="request.fileQuery.mirrorBaseDir != null">
                                and mirror.base_dir = #{request.fileQuery.mirrorBaseDir}
                            </if>
                        )
                    </if>
                </if>
                <if test="request.historyQuery != null">
                    left join md_list_storage_file_his his on (his.main_file_id = storage_tree.id
                            <if test="request.historyQuery.historyStartTimeStamp != null and request.historyQuery.historyStartTimeStamp > 0">
                                and his.last_modify_time >= #{request.historyQuery.historyStartTimeStamp}
                            </if>
                            <if test="request.historyQuery.historyEndTimeStamp != null and request.historyQuery.historyEndTimeStamp > 0">
                                and #{request.historyQuery.historyStartTimeStamp} >= his.last_modify_time
                            </if>
                            )
                    left join maoding_web_account his_account on (his.last_modify_user_id = his_account.id)
                    left join md_type_commit his_action_type on (his.action_type_id = his_action_type.type_id)
                </if>
            </when>
            <otherwise>
                md_tree_storage storage_tree
            </otherwise>
        </choose>
        <where>
            <if test="id != null">
                <choose>
                    <when test="request != null and request.textQuery != null">
                        (node.id = #{id})
                    </when>
                    <otherwise>
                        (storage_tree.deleted = 0) and (storage_tree.id = substring(#{id},1,32))
                    </otherwise>
                </choose>
            </if>
        </where>
        limit 1
    </select>

    <select id="listWebArchiveDir" resultType="com.maoding.Storage.zeroc.SimpleNodeDTO" parameterType="com.maoding.Storage.zeroc.QueryNodeDTO">
        select node.*
        from md_node_sky_drive node
        <where>
            <include refid="ConditionForQueryNode"/>
            <if test="fuzzyId != null">
                and (#{fuzzyId} like concat(node.project_id,",",
                        if(node.company_id is null,"",concat(node.company_id)),
                        '%'))
            </if>
        </where>
        <if test="fuzzyPath != null or fuzzyId != null">
            order by (length(replace(node.path,'/','//')) - length(node.path)) desc
                ,node.project_id,node.company_id,node.issue_id,node.task_id
            limit 1
        </if>
    </select>


    <select id="listNode" resultType="com.maoding.Storage.zeroc.SimpleNodeDTO" parameterType="com.maoding.Storage.zeroc.QueryNodeDTO">
        select distinct node.* from md_node_project node
        <if test="accountId != null">
            inner join maoding_web_project_member project_member on (find_in_set(#{accountId},project_member.account_id)
                                                                        and node.project_id = project_member.project_id
                                                                        and project_member.deleted = 0)
        </if>
        <where>
            <include refid="ConditionForQueryNode"/>
            <if test="fuzzyId != null">
                and find_in_set(substring(node.id,1,32),#{fuzzyId})
            </if>
        </where>
        <if test="fuzzyPath != null">
            order by (length(replace(path,'/','//')) - length(path)) desc
            limit 1
        </if>

        union all

        select distinct node.* from md_node_range node
        <where>
            node.range_id in (1,2)
            <include refid="ConditionForQueryNode"/>
            <if test="fuzzyId != null">
                and find_in_set(substring(node.id,1,32),#{fuzzyId})
            </if>
        </where>
        <if test="fuzzyPath != null">
            order by (length(replace(path,'/','//')) - length(path)) desc
            limit 1
        </if>

        union all

        select distinct node.* from md_node_task node
        <if test="accountId != null">
            inner join md_type_range range_type on (node.range_id = range_type.type_id)
            inner join maoding_web_project_member project_member on (node.task_id = project_member.target_id
                                                                      and project_member.deleted = 0)
            inner join maoding_web_company_user company_user on (company_user.company_id = project_member.company_id
                                                                      and company_user.user_id = project_member.account_id)
        </if>
        <where>
            node.range_id in (1,2)
            <if test="accountId != null">
                and (range_type.is_show_all_task = 1 or find_in_set(#{accountId},company_user.user_id))
            </if>
            <include refid="ConditionForQueryNode"/>
            <if test="fuzzyId != null">
                and find_in_set(substring(node.id,1,32),#{fuzzyId})
            </if>
        </where>
        <if test="fuzzyPath != null">
            order by (length(replace(path,'/','//')) - length(path)) desc
            limit 1
        </if>

        union all

        select distinct node.* from md_node_storage node
        <if test="accountId != null">
            inner join md_type_range range_type on (node.range_id = range_type.type_id)
            inner join maoding_web_project_member project_member on (node.task_id = project_member.target_id
                                                                      and project_member.deleted = 0)
            inner join maoding_web_company_user company_user on (company_user.company_id = project_member.company_id
                                                                      and company_user.user_id = project_member.account_id)
        </if>
        <where>
            node.range_id in (1,2)
            <if test="accountId != null">
                and (range_type.is_show_all_task = 1 or find_in_set(#{accountId},company_user.user_id))
            </if>
            <include refid="ConditionForQueryNode"/>
            <if test="fuzzyId != null">
                and find_in_set(substring(node.id,1,32),#{fuzzyId})
            </if>
        </where>
        <if test="fuzzyPath != null">
            order by (length(replace(path,'/','//')) - length(path)) desc
            limit 1
        </if>

    </select>


    <resultMap id="FileWithBasicMap" type="com.maoding.Storage.zeroc.FileNodeDTO">
        <association property="basic" javaType="com.maoding.Storage.zeroc.SimpleNodeDTO" fetchType="eager"/>
    </resultMap>

    <resultMap id="FileWithBasicHistoryMap" type="com.maoding.Storage.zeroc.FileNodeDTO">
        <association property="basic" javaType="com.maoding.Storage.zeroc.SimpleNodeDTO" fetchType="eager"/>
        <collection property="historyList" ofType="com.maoding.Storage.zeroc.HistoryDTO" autoMapping="true" fetchType="eager">
            <id column="history_id"/>
        </collection>
    </resultMap>


    <resultMap id="FileWithHistoryMap" type="com.maoding.Storage.zeroc.FileNodeDTO">
        <collection property="historyList" ofType="com.maoding.Storage.zeroc.HistoryDTO" fetchType="eager">
            <id column="history_id"/>
        </collection>
    </resultMap>


    <resultMap id="StorageEntityUnionMap" type="com.maoding.Storage.Dto.StorageEntityUnionDTO">
        <association property="fileEntity" select="selectFileEntity" column="{id=id}" fetchType="eager"/>
        <association property="hisEntity" select="selectHisEntity" column="{id=id}" fetchType="eager"/>
    </resultMap>

    <select id="selectStorageEntityUnion" resultMap="StorageEntityUnionMap" parameterType="com.maoding.Storage.zeroc.QueryNodeDTO">
        select storage_tree.*
        from md_tree_storage storage_tree
          <if test="path != null or fuzzyPath != null or parentPath != null or projectId != null or rangeId != null or issueId != null or companyId != null">
            left join md_type_range range_type on (find_in_set(storage_tree.type_id,range_type.sub_node_type))
            left join md_web_task task on (storage_tree.task_id = task.id)
          </if>
        where (storage_tree.deleted = 0)
            <if test="id != null">
                and (storage_tree.id = substring(#{id},1,32))
            </if>
            <if test="pid != null">
                and (storage_tree.pid = substring(#{pid},1,32))
            </if>
            <if test="path != null">
                and (concat('/',task.project_name,'/',range_type.content,'/',task.path,'/',storage_tree.path) = #{path})
            </if>
            <if test="typeId != null">
                and (storage_tree.type_id = #{typeId})
            </if>
            <if test="projectId != null">
                and (task.project_id = #{projectId})
            </if>
            <if test="rangeId != null">
                and (range_type.value_id = #{rangeId})
            </if>
            <if test="issueId != null">
                and (task.issue_id = #{issueId})
            </if>
            <if test="taskId != null">
                and (storage_tree.task_id = #{taskId})
            </if>
            <if test="companyId != null">
                and (task.company_id = #{companyId})
            </if>
            <if test="ownerUserId != null">
                and (storage_tree.owner_user_id = #{ownerUserId})
            </if>
            <if test="fuzzyPath != null">
                and (concat('/',task.project_name,'/',range_type.content,'/',task.path,'/',storage_tree.path) = #{fuzzyPath}
                    or #{fuzzyPath} like concat(concat('/',task.project_name,'/',range_type.content,'/',task.path,'/',storage_tree.path),'/%'))
            </if>
            <if test="parentPath != null">
                and (concat('/',task.project_name,'/',range_type.content,'/',task.path,'/',storage_tree.path) like concat(#{parentPath},'/%'))
            </if>
        <if test="fuzzyPath != null">
            order by (length(replace(concat(concat('/',task.project_name,'/',range_type.content,'/',task.path,'/',storage_tree.path)),'/','//'))
                  - length(concat(concat('/',task.project_name,'/',range_type.content,'/',task.path,'/',storage_tree.path)))) desc
        </if>
        limit 1
    </select>


    <select id="selectFileEntity" resultType="com.maoding.Storage.Entity.StorageFileEntity" parameterType="java.util.Map">
        select
            <choose>
                <when test="mainFileId != null">
                    mirror.*
                </when>
                <otherwise>
                    file.*
                </otherwise>
            </choose>
        from md_list_storage_file file
            <if test="mainFileId != null">
                left join md_list_storage_file mirror on (
                    mirror.file_type_id = 22
                    and mirror.main_file_id = file.id
                    <if test="mirrorServerTypeId != null">
                        and mirror.server_type_id = #{mirrorServerTypeId}
                    </if>
                    <if test="mirrorServerAddress != null">
                        and mirror.server_address = #{mirrorServerAddress}
                    </if>
                    <if test="mirrorBaseDir != null">
                        and mirror.base_dir = #{mirrorBaseDir}
                    </if>
                )
            </if>
        <where>
            <if test="id != null">
                and file.id = #{id}
            </if>
            <if test="mainFileId != null">
                and file.id = #{mainFileId}
            </if>
        </where>
        limit 1
    </select>

    <select id="selectHisEntity" resultType="com.maoding.Storage.Entity.StorageFileHisEntity" parameterType="java.util.Map">
        select his.* from md_list_storage_file_his his where his.id = #{id}
    </select>

</mapper>
